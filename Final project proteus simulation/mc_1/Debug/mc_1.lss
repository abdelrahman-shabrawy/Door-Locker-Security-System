
mc_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f0  00800060  000030e0  00003174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800150  00800150  00003264  2**0
                  ALLOC
  3 .stab         0000324c  00000000  00000000  00003264  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b5a  00000000  00000000  000064b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000800a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000814a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000082ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000adee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bb9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bcfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bf89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c757  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 35       	cpi	r26, 0x50	; 80
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e5       	ldi	r26, 0x50	; 80
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 35       	cpi	r26, 0x5E	; 94
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 aa 11 	call	0x2354	; 0x2354 <main>
      8a:	0c 94 6e 18 	jmp	0x30dc	; 0x30dc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e3       	ldi	r26, 0x34	; 52
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e3       	ldi	r24, 0x34	; 52
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 02 18 	jmp	0x3004	; 0x3004 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1e 18 	jmp	0x303c	; 0x303c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = (0 OR 1 )to select data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b62:	ea e2       	ldi	r30, 0x2A	; 42
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0xFB) | ((Config_Ptr->bit_data) & 0x04);
     b6a:	aa e2       	ldi	r26, 0x2A	; 42
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ea e2       	ldi	r30, 0x2A	; 42
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	98 2f       	mov	r25, r24
     b76:	9b 7f       	andi	r25, 0xFB	; 251
     b78:	eb 81       	ldd	r30, Y+3	; 0x03
     b7a:	fc 81       	ldd	r31, Y+4	; 0x04
     b7c:	80 81       	ld	r24, Z
     b7e:	84 70       	andi	r24, 0x04	; 4
     b80:	89 2b       	or	r24, r25
     b82:	8c 93       	st	X, r24
	 * UPM1:0  = (0 or 1) For select parity mode
	 * USBS    = (0 or 1) For select stop_bit mode
	 * UCSZ1:0 = (0 or 1) For select data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
     b84:	e0 e4       	ldi	r30, 0x40	; 64
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 e8       	ldi	r24, 0x80	; 128
     b8a:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) | (Config_Ptr->parity);
     b8c:	a0 e4       	ldi	r26, 0x40	; 64
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	e0 e4       	ldi	r30, 0x40	; 64
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	98 2f       	mov	r25, r24
     b98:	9f 7c       	andi	r25, 0xCF	; 207
     b9a:	eb 81       	ldd	r30, Y+3	; 0x03
     b9c:	fc 81       	ldd	r31, Y+4	; 0x04
     b9e:	81 81       	ldd	r24, Z+1	; 0x01
     ba0:	89 2b       	or	r24, r25
     ba2:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | (Config_Ptr->stop_bit);
     ba4:	a0 e4       	ldi	r26, 0x40	; 64
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	e0 e4       	ldi	r30, 0x40	; 64
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	98 2f       	mov	r25, r24
     bb0:	97 7f       	andi	r25, 0xF7	; 247
     bb2:	eb 81       	ldd	r30, Y+3	; 0x03
     bb4:	fc 81       	ldd	r31, Y+4	; 0x04
     bb6:	82 81       	ldd	r24, Z+2	; 0x02
     bb8:	89 2b       	or	r24, r25
     bba:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data) & 0X03);
     bbc:	a0 e4       	ldi	r26, 0x40	; 64
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e0 e4       	ldi	r30, 0x40	; 64
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	98 2f       	mov	r25, r24
     bc8:	99 7f       	andi	r25, 0xF9	; 249
     bca:	eb 81       	ldd	r30, Y+3	; 0x03
     bcc:	fc 81       	ldd	r31, Y+4	; 0x04
     bce:	80 81       	ld	r24, Z
     bd0:	83 70       	andi	r24, 0x03	; 3
     bd2:	89 2b       	or	r24, r25
     bd4:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
     bd6:	eb 81       	ldd	r30, Y+3	; 0x03
     bd8:	fc 81       	ldd	r31, Y+4	; 0x04
     bda:	83 81       	ldd	r24, Z+3	; 0x03
     bdc:	94 81       	ldd	r25, Z+4	; 0x04
     bde:	a5 81       	ldd	r26, Z+5	; 0x05
     be0:	b6 81       	ldd	r27, Z+6	; 0x06
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	aa 1f       	adc	r26, r26
     be8:	bb 1f       	adc	r27, r27
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	aa 1f       	adc	r26, r26
     bf0:	bb 1f       	adc	r27, r27
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	aa 1f       	adc	r26, r26
     bf8:	bb 1f       	adc	r27, r27
     bfa:	9c 01       	movw	r18, r24
     bfc:	ad 01       	movw	r20, r26
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	92 e1       	ldi	r25, 0x12	; 18
     c02:	aa e7       	ldi	r26, 0x7A	; 122
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	bc 01       	movw	r22, r24
     c08:	cd 01       	movw	r24, r26
     c0a:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <__udivmodsi4>
     c0e:	da 01       	movw	r26, r20
     c10:	c9 01       	movw	r24, r18
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	9a 83       	std	Y+2, r25	; 0x02
     c16:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     c18:	e0 e4       	ldi	r30, 0x40	; 64
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	9a 81       	ldd	r25, Y+2	; 0x02
     c20:	89 2f       	mov	r24, r25
     c22:	99 27       	eor	r25, r25
     c24:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     c26:	e9 e2       	ldi	r30, 0x29	; 41
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	80 83       	st	Z, r24
}
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	cf 91       	pop	r28
     c38:	df 91       	pop	r29
     c3a:	08 95       	ret

00000c3c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     c3c:	df 93       	push	r29
     c3e:	cf 93       	push	r28
     c40:	0f 92       	push	r0
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     c48:	eb e2       	ldi	r30, 0x2B	; 43
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	88 2f       	mov	r24, r24
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	80 72       	andi	r24, 0x20	; 32
     c54:	90 70       	andi	r25, 0x00	; 0
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	b9 f3       	breq	.-18     	; 0xc48 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     c5a:	ec e2       	ldi	r30, 0x2C	; 44
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     c62:	0f 90       	pop	r0
     c64:	cf 91       	pop	r28
     c66:	df 91       	pop	r29
     c68:	08 95       	ret

00000c6a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     c6a:	df 93       	push	r29
     c6c:	cf 93       	push	r28
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c72:	eb e2       	ldi	r30, 0x2B	; 43
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	88 23       	and	r24, r24
     c7a:	dc f7       	brge	.-10     	; 0xc72 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     c7c:	ec e2       	ldi	r30, 0x2C	; 44
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
}
     c82:	cf 91       	pop	r28
     c84:	df 91       	pop	r29
     c86:	08 95       	ret

00000c88 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <UART_sendString+0x6>
     c8e:	0f 92       	push	r0
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	9b 83       	std	Y+3, r25	; 0x03
     c96:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     c98:	19 82       	std	Y+1, r1	; 0x01
     c9a:	0e c0       	rjmp	.+28     	; 0xcb8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	9b 81       	ldd	r25, Y+3	; 0x03
     ca6:	fc 01       	movw	r30, r24
     ca8:	e2 0f       	add	r30, r18
     caa:	f3 1f       	adc	r31, r19
     cac:	80 81       	ld	r24, Z
     cae:	0e 94 1e 06 	call	0xc3c	; 0xc3c <UART_sendByte>
		i++;
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	8f 5f       	subi	r24, 0xFF	; 255
     cb6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	9b 81       	ldd	r25, Y+3	; 0x03
     cc2:	fc 01       	movw	r30, r24
     cc4:	e2 0f       	add	r30, r18
     cc6:	f3 1f       	adc	r31, r19
     cc8:	80 81       	ld	r24, Z
     cca:	88 23       	and	r24, r24
     ccc:	39 f7       	brne	.-50     	; 0xc9c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <UART_receiveString+0xa>
     ce4:	0f 92       	push	r0
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	9b 83       	std	Y+3, r25	; 0x03
     cec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     cee:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	9b 81       	ldd	r25, Y+3	; 0x03
     cfa:	8c 01       	movw	r16, r24
     cfc:	02 0f       	add	r16, r18
     cfe:	13 1f       	adc	r17, r19
     d00:	0e 94 35 06 	call	0xc6a	; 0xc6a <UART_recieveByte>
     d04:	f8 01       	movw	r30, r16
     d06:	80 83       	st	Z, r24
     d08:	0f c0       	rjmp	.+30     	; 0xd28 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	8f 5f       	subi	r24, 0xFF	; 255
     d0e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	9b 81       	ldd	r25, Y+3	; 0x03
     d1a:	8c 01       	movw	r16, r24
     d1c:	02 0f       	add	r16, r18
     d1e:	13 1f       	adc	r17, r19
     d20:	0e 94 35 06 	call	0xc6a	; 0xc6a <UART_recieveByte>
     d24:	f8 01       	movw	r30, r16
     d26:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	9b 81       	ldd	r25, Y+3	; 0x03
     d32:	fc 01       	movw	r30, r24
     d34:	e2 0f       	add	r30, r18
     d36:	f3 1f       	adc	r31, r19
     d38:	80 81       	ld	r24, Z
     d3a:	83 32       	cpi	r24, 0x23	; 35
     d3c:	31 f7       	brne	.-52     	; 0xd0a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	9b 81       	ldd	r25, Y+3	; 0x03
     d48:	fc 01       	movw	r30, r24
     d4a:	e2 0f       	add	r30, r18
     d4c:	f3 1f       	adc	r31, r19
     d4e:	10 82       	st	Z, r1
}
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	08 95       	ret

00000d60 <__vector_9>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
/* Interrupt Service Routine for timer1 overflow mode */

ISR(TIMER1_OVF_vect)
{
     d60:	1f 92       	push	r1
     d62:	0f 92       	push	r0
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	0f 92       	push	r0
     d68:	11 24       	eor	r1, r1
     d6a:	2f 93       	push	r18
     d6c:	3f 93       	push	r19
     d6e:	4f 93       	push	r20
     d70:	5f 93       	push	r21
     d72:	6f 93       	push	r22
     d74:	7f 93       	push	r23
     d76:	8f 93       	push	r24
     d78:	9f 93       	push	r25
     d7a:	af 93       	push	r26
     d7c:	bf 93       	push	r27
     d7e:	ef 93       	push	r30
     d80:	ff 93       	push	r31
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     d8a:	80 91 50 01 	lds	r24, 0x0150
     d8e:	90 91 51 01 	lds	r25, 0x0151
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	29 f0       	breq	.+10     	; 0xda0 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
     d96:	e0 91 50 01 	lds	r30, 0x0150
     d9a:	f0 91 51 01 	lds	r31, 0x0151
     d9e:	09 95       	icall
	}
}
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	ff 91       	pop	r31
     da6:	ef 91       	pop	r30
     da8:	bf 91       	pop	r27
     daa:	af 91       	pop	r26
     dac:	9f 91       	pop	r25
     dae:	8f 91       	pop	r24
     db0:	7f 91       	pop	r23
     db2:	6f 91       	pop	r22
     db4:	5f 91       	pop	r21
     db6:	4f 91       	pop	r20
     db8:	3f 91       	pop	r19
     dba:	2f 91       	pop	r18
     dbc:	0f 90       	pop	r0
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	0f 90       	pop	r0
     dc2:	1f 90       	pop	r1
     dc4:	18 95       	reti

00000dc6 <__vector_7>:

/* Interrupt Service Routine for timer1 compare mode */

ISR(TIMER1_COMPA_vect)
{
     dc6:	1f 92       	push	r1
     dc8:	0f 92       	push	r0
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	0f 92       	push	r0
     dce:	11 24       	eor	r1, r1
     dd0:	2f 93       	push	r18
     dd2:	3f 93       	push	r19
     dd4:	4f 93       	push	r20
     dd6:	5f 93       	push	r21
     dd8:	6f 93       	push	r22
     dda:	7f 93       	push	r23
     ddc:	8f 93       	push	r24
     dde:	9f 93       	push	r25
     de0:	af 93       	push	r26
     de2:	bf 93       	push	r27
     de4:	ef 93       	push	r30
     de6:	ff 93       	push	r31
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     df0:	80 91 50 01 	lds	r24, 0x0150
     df4:	90 91 51 01 	lds	r25, 0x0151
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	29 f0       	breq	.+10     	; 0xe06 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
     dfc:	e0 91 50 01 	lds	r30, 0x0150
     e00:	f0 91 51 01 	lds	r31, 0x0151
     e04:	09 95       	icall
	}
}
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	ff 91       	pop	r31
     e0c:	ef 91       	pop	r30
     e0e:	bf 91       	pop	r27
     e10:	af 91       	pop	r26
     e12:	9f 91       	pop	r25
     e14:	8f 91       	pop	r24
     e16:	7f 91       	pop	r23
     e18:	6f 91       	pop	r22
     e1a:	5f 91       	pop	r21
     e1c:	4f 91       	pop	r20
     e1e:	3f 91       	pop	r19
     e20:	2f 91       	pop	r18
     e22:	0f 90       	pop	r0
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	0f 90       	pop	r0
     e28:	1f 90       	pop	r1
     e2a:	18 95       	reti

00000e2c <Timer1_init>:
 * 2. Adjusting the TIMER_1 registers for the required mode and prescaler
 * 3. Enabling the interrupt
 */

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	00 d0       	rcall	.+0      	; 0xe32 <Timer1_init+0x6>
     e32:	00 d0       	rcall	.+0      	; 0xe34 <Timer1_init+0x8>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = (Config_Ptr->timer1_initialvalue) & 0XFFFF; /* set initial value */
     e3c:	ac e4       	ldi	r26, 0x4C	; 76
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e9 81       	ldd	r30, Y+1	; 0x01
     e42:	fa 81       	ldd	r31, Y+2	; 0x02
     e44:	81 81       	ldd	r24, Z+1	; 0x01
     e46:	92 81       	ldd	r25, Z+2	; 0x02
     e48:	11 96       	adiw	r26, 0x01	; 1
     e4a:	9c 93       	st	X, r25
     e4c:	8e 93       	st	-X, r24
	TCCR1A =0;
     e4e:	ef e4       	ldi	r30, 0x4F	; 79
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	10 82       	st	Z, r1
	TCCR1B =0;
     e54:	ee e4       	ldi	r30, 0x4E	; 78
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	10 82       	st	Z, r1
	TCCR1B = (TCCR1B  & 0XF8) | (Config_Ptr->timer1_prescaler); /* set the prescaler */
     e5a:	ae e4       	ldi	r26, 0x4E	; 78
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	ee e4       	ldi	r30, 0x4E	; 78
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	98 2f       	mov	r25, r24
     e66:	98 7f       	andi	r25, 0xF8	; 248
     e68:	e9 81       	ldd	r30, Y+1	; 0x01
     e6a:	fa 81       	ldd	r31, Y+2	; 0x02
     e6c:	85 81       	ldd	r24, Z+5	; 0x05
     e6e:	89 2b       	or	r24, r25
     e70:	8c 93       	st	X, r24
	switch(Config_Ptr->mode)
     e72:	e9 81       	ldd	r30, Y+1	; 0x01
     e74:	fa 81       	ldd	r31, Y+2	; 0x02
     e76:	80 81       	ld	r24, Z
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	3c 83       	std	Y+4, r19	; 0x04
     e7e:	2b 83       	std	Y+3, r18	; 0x03
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	9c 81       	ldd	r25, Y+4	; 0x04
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	31 f0       	breq	.+12     	; 0xe94 <Timer1_init+0x68>
     e88:	2b 81       	ldd	r18, Y+3	; 0x03
     e8a:	3c 81       	ldd	r19, Y+4	; 0x04
     e8c:	21 30       	cpi	r18, 0x01	; 1
     e8e:	31 05       	cpc	r19, r1
     e90:	81 f0       	breq	.+32     	; 0xeb2 <Timer1_init+0x86>
     e92:	2d c0       	rjmp	.+90     	; 0xeee <Timer1_init+0xc2>
	{
	case OVERFLOW:
		TCCR1A |= (1<<FOC1A); /* Adjust for overflow mode */
     e94:	af e4       	ldi	r26, 0x4F	; 79
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	ef e4       	ldi	r30, 0x4F	; 79
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	88 60       	ori	r24, 0x08	; 8
     ea0:	8c 93       	st	X, r24
		TIMSK |= (1<<TOIE1); /* Enable Timer1 Compare A Interrupt */
     ea2:	a9 e5       	ldi	r26, 0x59	; 89
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e9 e5       	ldi	r30, 0x59	; 89
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	84 60       	ori	r24, 0x04	; 4
     eae:	8c 93       	st	X, r24
     eb0:	1e c0       	rjmp	.+60     	; 0xeee <Timer1_init+0xc2>
		break;
	case COMPARE:
		OCR1A = (Config_Ptr->timer1_comparevalue)& 0XFFFF; // Set Compare Value
     eb2:	aa e4       	ldi	r26, 0x4A	; 74
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e9 81       	ldd	r30, Y+1	; 0x01
     eb8:	fa 81       	ldd	r31, Y+2	; 0x02
     eba:	83 81       	ldd	r24, Z+3	; 0x03
     ebc:	94 81       	ldd	r25, Z+4	; 0x04
     ebe:	11 96       	adiw	r26, 0x01	; 1
     ec0:	9c 93       	st	X, r25
     ec2:	8e 93       	st	-X, r24
		TCCR1A |= (1<<FOC1A) | (1<<WGM01); /* Adjust for compare mode */
     ec4:	af e4       	ldi	r26, 0x4F	; 79
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ef e4       	ldi	r30, 0x4F	; 79
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	88 60       	ori	r24, 0x08	; 8
     ed0:	8c 93       	st	X, r24
		TCCR1B |= (1<<WGM12);
     ed2:	ae e4       	ldi	r26, 0x4E	; 78
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ee e4       	ldi	r30, 0x4E	; 78
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	88 60       	ori	r24, 0x08	; 8
     ede:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
     ee0:	a9 e5       	ldi	r26, 0x59	; 89
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e9 e5       	ldi	r30, 0x59	; 89
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	80 61       	ori	r24, 0x10	; 16
     eec:	8c 93       	st	X, r24
		break;
	}
}
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <Timer1_setCallBack>:


void Timer1_setCallBack(void(*a_ptr)(void))
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <Timer1_setCallBack+0x6>
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	9a 83       	std	Y+2, r25	; 0x02
     f08:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	90 93 51 01 	sts	0x0151, r25
     f12:	80 93 50 01 	sts	0x0150, r24
}
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <Timer1_stop>:
/*
 * Description :
 * Function responsible to stop the timer */

void Timer1_stop(void)
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (TCCR1B & 0XF8);
     f28:	ae e4       	ldi	r26, 0x4E	; 78
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	ee e4       	ldi	r30, 0x4E	; 78
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	88 7f       	andi	r24, 0xF8	; 248
     f34:	8c 93       	st	X, r24
}
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <Timer1_deinit>:
/*
 * Description :
 * Function responsible to shut down the timer by clearing all the registers of the module */

void Timer1_deinit(void)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
	TCCR1A= 0;
     f44:	ef e4       	ldi	r30, 0x4F	; 79
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	10 82       	st	Z, r1
	TCCR1B=0;
     f4a:	ee e4       	ldi	r30, 0x4E	; 78
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	10 82       	st	Z, r1
	TCNT1= 0;
     f50:	ec e4       	ldi	r30, 0x4C	; 76
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	11 82       	std	Z+1, r1	; 0x01
     f56:	10 82       	st	Z, r1
	OCR1A= 0;
     f58:	ea e4       	ldi	r30, 0x4A	; 74
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	11 82       	std	Z+1, r1	; 0x01
     f5e:	10 82       	st	Z, r1
	TIMSK= 0;
     f60:	e9 e5       	ldi	r30, 0x59	; 89
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	10 82       	st	Z, r1
}
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	00 d0       	rcall	.+0      	; 0xf72 <GPIO_setupPinDirection+0x6>
     f72:	00 d0       	rcall	.+0      	; 0xf74 <GPIO_setupPinDirection+0x8>
     f74:	0f 92       	push	r0
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	89 83       	std	Y+1, r24	; 0x01
     f7c:	6a 83       	std	Y+2, r22	; 0x02
     f7e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	88 30       	cpi	r24, 0x08	; 8
     f84:	08 f0       	brcs	.+2      	; 0xf88 <GPIO_setupPinDirection+0x1c>
     f86:	d5 c0       	rjmp	.+426    	; 0x1132 <GPIO_setupPinDirection+0x1c6>
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	84 30       	cpi	r24, 0x04	; 4
     f8c:	08 f0       	brcs	.+2      	; 0xf90 <GPIO_setupPinDirection+0x24>
     f8e:	d1 c0       	rjmp	.+418    	; 0x1132 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	3d 83       	std	Y+5, r19	; 0x05
     f98:	2c 83       	std	Y+4, r18	; 0x04
     f9a:	8c 81       	ldd	r24, Y+4	; 0x04
     f9c:	9d 81       	ldd	r25, Y+5	; 0x05
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	91 05       	cpc	r25, r1
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <GPIO_setupPinDirection+0x3a>
     fa4:	43 c0       	rjmp	.+134    	; 0x102c <GPIO_setupPinDirection+0xc0>
     fa6:	2c 81       	ldd	r18, Y+4	; 0x04
     fa8:	3d 81       	ldd	r19, Y+5	; 0x05
     faa:	22 30       	cpi	r18, 0x02	; 2
     fac:	31 05       	cpc	r19, r1
     fae:	2c f4       	brge	.+10     	; 0xfba <GPIO_setupPinDirection+0x4e>
     fb0:	8c 81       	ldd	r24, Y+4	; 0x04
     fb2:	9d 81       	ldd	r25, Y+5	; 0x05
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	71 f0       	breq	.+28     	; 0xfd4 <GPIO_setupPinDirection+0x68>
     fb8:	bc c0       	rjmp	.+376    	; 0x1132 <GPIO_setupPinDirection+0x1c6>
     fba:	2c 81       	ldd	r18, Y+4	; 0x04
     fbc:	3d 81       	ldd	r19, Y+5	; 0x05
     fbe:	22 30       	cpi	r18, 0x02	; 2
     fc0:	31 05       	cpc	r19, r1
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <GPIO_setupPinDirection+0x5a>
     fc4:	5f c0       	rjmp	.+190    	; 0x1084 <GPIO_setupPinDirection+0x118>
     fc6:	8c 81       	ldd	r24, Y+4	; 0x04
     fc8:	9d 81       	ldd	r25, Y+5	; 0x05
     fca:	83 30       	cpi	r24, 0x03	; 3
     fcc:	91 05       	cpc	r25, r1
     fce:	09 f4       	brne	.+2      	; 0xfd2 <GPIO_setupPinDirection+0x66>
     fd0:	85 c0       	rjmp	.+266    	; 0x10dc <GPIO_setupPinDirection+0x170>
     fd2:	af c0       	rjmp	.+350    	; 0x1132 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	a1 f4       	brne	.+40     	; 0x1002 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     fda:	aa e3       	ldi	r26, 0x3A	; 58
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	ea e3       	ldi	r30, 0x3A	; 58
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <GPIO_setupPinDirection+0x8c>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <GPIO_setupPinDirection+0x88>
     ffc:	84 2b       	or	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	98 c0       	rjmp	.+304    	; 0x1132 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1002:	aa e3       	ldi	r26, 0x3A	; 58
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	ea e3       	ldi	r30, 0x3A	; 58
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <GPIO_setupPinDirection+0xb4>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <GPIO_setupPinDirection+0xb0>
    1024:	80 95       	com	r24
    1026:	84 23       	and	r24, r20
    1028:	8c 93       	st	X, r24
    102a:	83 c0       	rjmp	.+262    	; 0x1132 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	a1 f4       	brne	.+40     	; 0x105a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1032:	a7 e3       	ldi	r26, 0x37	; 55
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e7 e3       	ldi	r30, 0x37	; 55
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <GPIO_setupPinDirection+0xe4>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <GPIO_setupPinDirection+0xe0>
    1054:	84 2b       	or	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	6c c0       	rjmp	.+216    	; 0x1132 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    105a:	a7 e3       	ldi	r26, 0x37	; 55
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e7 e3       	ldi	r30, 0x37	; 55
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <GPIO_setupPinDirection+0x10c>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <GPIO_setupPinDirection+0x108>
    107c:	80 95       	com	r24
    107e:	84 23       	and	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	57 c0       	rjmp	.+174    	; 0x1132 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	a1 f4       	brne	.+40     	; 0x10b2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    108a:	a4 e3       	ldi	r26, 0x34	; 52
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e4 e3       	ldi	r30, 0x34	; 52
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <GPIO_setupPinDirection+0x13c>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <GPIO_setupPinDirection+0x138>
    10ac:	84 2b       	or	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	40 c0       	rjmp	.+128    	; 0x1132 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    10b2:	a4 e3       	ldi	r26, 0x34	; 52
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e4 e3       	ldi	r30, 0x34	; 52
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 2e       	mov	r0, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <GPIO_setupPinDirection+0x164>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <GPIO_setupPinDirection+0x160>
    10d4:	80 95       	com	r24
    10d6:	84 23       	and	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	2b c0       	rjmp	.+86     	; 0x1132 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	a1 f4       	brne	.+40     	; 0x110a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    10e2:	a1 e3       	ldi	r26, 0x31	; 49
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e1 e3       	ldi	r30, 0x31	; 49
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <GPIO_setupPinDirection+0x194>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <GPIO_setupPinDirection+0x190>
    1104:	84 2b       	or	r24, r20
    1106:	8c 93       	st	X, r24
    1108:	14 c0       	rjmp	.+40     	; 0x1132 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    110a:	a1 e3       	ldi	r26, 0x31	; 49
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e1 e3       	ldi	r30, 0x31	; 49
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	48 2f       	mov	r20, r24
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 2e       	mov	r0, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <GPIO_setupPinDirection+0x1bc>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <GPIO_setupPinDirection+0x1b8>
    112c:	80 95       	com	r24
    112e:	84 23       	and	r24, r20
    1130:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	00 d0       	rcall	.+0      	; 0x1148 <GPIO_writePin+0x6>
    1148:	00 d0       	rcall	.+0      	; 0x114a <GPIO_writePin+0x8>
    114a:	0f 92       	push	r0
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	6a 83       	std	Y+2, r22	; 0x02
    1154:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	88 30       	cpi	r24, 0x08	; 8
    115a:	08 f0       	brcs	.+2      	; 0x115e <GPIO_writePin+0x1c>
    115c:	d5 c0       	rjmp	.+426    	; 0x1308 <GPIO_writePin+0x1c6>
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	84 30       	cpi	r24, 0x04	; 4
    1162:	08 f0       	brcs	.+2      	; 0x1166 <GPIO_writePin+0x24>
    1164:	d1 c0       	rjmp	.+418    	; 0x1308 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	3d 83       	std	Y+5, r19	; 0x05
    116e:	2c 83       	std	Y+4, r18	; 0x04
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	9d 81       	ldd	r25, Y+5	; 0x05
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	91 05       	cpc	r25, r1
    1178:	09 f4       	brne	.+2      	; 0x117c <GPIO_writePin+0x3a>
    117a:	43 c0       	rjmp	.+134    	; 0x1202 <GPIO_writePin+0xc0>
    117c:	2c 81       	ldd	r18, Y+4	; 0x04
    117e:	3d 81       	ldd	r19, Y+5	; 0x05
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	2c f4       	brge	.+10     	; 0x1190 <GPIO_writePin+0x4e>
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	9d 81       	ldd	r25, Y+5	; 0x05
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	71 f0       	breq	.+28     	; 0x11aa <GPIO_writePin+0x68>
    118e:	bc c0       	rjmp	.+376    	; 0x1308 <GPIO_writePin+0x1c6>
    1190:	2c 81       	ldd	r18, Y+4	; 0x04
    1192:	3d 81       	ldd	r19, Y+5	; 0x05
    1194:	22 30       	cpi	r18, 0x02	; 2
    1196:	31 05       	cpc	r19, r1
    1198:	09 f4       	brne	.+2      	; 0x119c <GPIO_writePin+0x5a>
    119a:	5f c0       	rjmp	.+190    	; 0x125a <GPIO_writePin+0x118>
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	9d 81       	ldd	r25, Y+5	; 0x05
    11a0:	83 30       	cpi	r24, 0x03	; 3
    11a2:	91 05       	cpc	r25, r1
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <GPIO_writePin+0x66>
    11a6:	85 c0       	rjmp	.+266    	; 0x12b2 <GPIO_writePin+0x170>
    11a8:	af c0       	rjmp	.+350    	; 0x1308 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	a1 f4       	brne	.+40     	; 0x11d8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    11b0:	ab e3       	ldi	r26, 0x3B	; 59
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	eb e3       	ldi	r30, 0x3B	; 59
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <GPIO_writePin+0x8c>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <GPIO_writePin+0x88>
    11d2:	84 2b       	or	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	98 c0       	rjmp	.+304    	; 0x1308 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    11d8:	ab e3       	ldi	r26, 0x3B	; 59
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	eb e3       	ldi	r30, 0x3B	; 59
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <GPIO_writePin+0xb4>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <GPIO_writePin+0xb0>
    11fa:	80 95       	com	r24
    11fc:	84 23       	and	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	83 c0       	rjmp	.+262    	; 0x1308 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	a1 f4       	brne	.+40     	; 0x1230 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1208:	a8 e3       	ldi	r26, 0x38	; 56
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e8 e3       	ldi	r30, 0x38	; 56
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	48 2f       	mov	r20, r24
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 2e       	mov	r0, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <GPIO_writePin+0xe4>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	0a 94       	dec	r0
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <GPIO_writePin+0xe0>
    122a:	84 2b       	or	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	6c c0       	rjmp	.+216    	; 0x1308 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1230:	a8 e3       	ldi	r26, 0x38	; 56
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e8 e3       	ldi	r30, 0x38	; 56
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <GPIO_writePin+0x10c>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <GPIO_writePin+0x108>
    1252:	80 95       	com	r24
    1254:	84 23       	and	r24, r20
    1256:	8c 93       	st	X, r24
    1258:	57 c0       	rjmp	.+174    	; 0x1308 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	a1 f4       	brne	.+40     	; 0x1288 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1260:	a5 e3       	ldi	r26, 0x35	; 53
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e5 e3       	ldi	r30, 0x35	; 53
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <GPIO_writePin+0x13c>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <GPIO_writePin+0x138>
    1282:	84 2b       	or	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	40 c0       	rjmp	.+128    	; 0x1308 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1288:	a5 e3       	ldi	r26, 0x35	; 53
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e5 e3       	ldi	r30, 0x35	; 53
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <GPIO_writePin+0x164>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <GPIO_writePin+0x160>
    12aa:	80 95       	com	r24
    12ac:	84 23       	and	r24, r20
    12ae:	8c 93       	st	X, r24
    12b0:	2b c0       	rjmp	.+86     	; 0x1308 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	a1 f4       	brne	.+40     	; 0x12e0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    12b8:	a2 e3       	ldi	r26, 0x32	; 50
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e2 e3       	ldi	r30, 0x32	; 50
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <GPIO_writePin+0x194>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <GPIO_writePin+0x190>
    12da:	84 2b       	or	r24, r20
    12dc:	8c 93       	st	X, r24
    12de:	14 c0       	rjmp	.+40     	; 0x1308 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    12e0:	a2 e3       	ldi	r26, 0x32	; 50
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e2 e3       	ldi	r30, 0x32	; 50
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	02 2e       	mov	r0, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <GPIO_writePin+0x1bc>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <GPIO_writePin+0x1b8>
    1302:	80 95       	com	r24
    1304:	84 23       	and	r24, r20
    1306:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <GPIO_readPin+0x6>
    131e:	00 d0       	rcall	.+0      	; 0x1320 <GPIO_readPin+0x8>
    1320:	0f 92       	push	r0
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	8a 83       	std	Y+2, r24	; 0x02
    1328:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    132a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 30       	cpi	r24, 0x08	; 8
    1330:	08 f0       	brcs	.+2      	; 0x1334 <GPIO_readPin+0x1c>
    1332:	84 c0       	rjmp	.+264    	; 0x143c <GPIO_readPin+0x124>
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	84 30       	cpi	r24, 0x04	; 4
    1338:	08 f0       	brcs	.+2      	; 0x133c <GPIO_readPin+0x24>
    133a:	80 c0       	rjmp	.+256    	; 0x143c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	3d 83       	std	Y+5, r19	; 0x05
    1344:	2c 83       	std	Y+4, r18	; 0x04
    1346:	4c 81       	ldd	r20, Y+4	; 0x04
    1348:	5d 81       	ldd	r21, Y+5	; 0x05
    134a:	41 30       	cpi	r20, 0x01	; 1
    134c:	51 05       	cpc	r21, r1
    134e:	79 f1       	breq	.+94     	; 0x13ae <GPIO_readPin+0x96>
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	9d 81       	ldd	r25, Y+5	; 0x05
    1354:	82 30       	cpi	r24, 0x02	; 2
    1356:	91 05       	cpc	r25, r1
    1358:	34 f4       	brge	.+12     	; 0x1366 <GPIO_readPin+0x4e>
    135a:	2c 81       	ldd	r18, Y+4	; 0x04
    135c:	3d 81       	ldd	r19, Y+5	; 0x05
    135e:	21 15       	cp	r18, r1
    1360:	31 05       	cpc	r19, r1
    1362:	69 f0       	breq	.+26     	; 0x137e <GPIO_readPin+0x66>
    1364:	6b c0       	rjmp	.+214    	; 0x143c <GPIO_readPin+0x124>
    1366:	4c 81       	ldd	r20, Y+4	; 0x04
    1368:	5d 81       	ldd	r21, Y+5	; 0x05
    136a:	42 30       	cpi	r20, 0x02	; 2
    136c:	51 05       	cpc	r21, r1
    136e:	b9 f1       	breq	.+110    	; 0x13de <GPIO_readPin+0xc6>
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	9d 81       	ldd	r25, Y+5	; 0x05
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	91 05       	cpc	r25, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <GPIO_readPin+0x64>
    137a:	49 c0       	rjmp	.+146    	; 0x140e <GPIO_readPin+0xf6>
    137c:	5f c0       	rjmp	.+190    	; 0x143c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    137e:	e9 e3       	ldi	r30, 0x39	; 57
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	88 2f       	mov	r24, r24
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	a9 01       	movw	r20, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <GPIO_readPin+0x7e>
    1392:	55 95       	asr	r21
    1394:	47 95       	ror	r20
    1396:	8a 95       	dec	r24
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <GPIO_readPin+0x7a>
    139a:	ca 01       	movw	r24, r20
    139c:	81 70       	andi	r24, 0x01	; 1
    139e:	90 70       	andi	r25, 0x00	; 0
    13a0:	88 23       	and	r24, r24
    13a2:	19 f0       	breq	.+6      	; 0x13aa <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	49 c0       	rjmp	.+146    	; 0x143c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13aa:	19 82       	std	Y+1, r1	; 0x01
    13ac:	47 c0       	rjmp	.+142    	; 0x143c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    13ae:	e6 e3       	ldi	r30, 0x36	; 54
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a9 01       	movw	r20, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <GPIO_readPin+0xae>
    13c2:	55 95       	asr	r21
    13c4:	47 95       	ror	r20
    13c6:	8a 95       	dec	r24
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <GPIO_readPin+0xaa>
    13ca:	ca 01       	movw	r24, r20
    13cc:	81 70       	andi	r24, 0x01	; 1
    13ce:	90 70       	andi	r25, 0x00	; 0
    13d0:	88 23       	and	r24, r24
    13d2:	19 f0       	breq	.+6      	; 0x13da <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	31 c0       	rjmp	.+98     	; 0x143c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13da:	19 82       	std	Y+1, r1	; 0x01
    13dc:	2f c0       	rjmp	.+94     	; 0x143c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    13de:	e3 e3       	ldi	r30, 0x33	; 51
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	88 2f       	mov	r24, r24
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	a9 01       	movw	r20, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <GPIO_readPin+0xde>
    13f2:	55 95       	asr	r21
    13f4:	47 95       	ror	r20
    13f6:	8a 95       	dec	r24
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <GPIO_readPin+0xda>
    13fa:	ca 01       	movw	r24, r20
    13fc:	81 70       	andi	r24, 0x01	; 1
    13fe:	90 70       	andi	r25, 0x00	; 0
    1400:	88 23       	and	r24, r24
    1402:	19 f0       	breq	.+6      	; 0x140a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	89 83       	std	Y+1, r24	; 0x01
    1408:	19 c0       	rjmp	.+50     	; 0x143c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    140a:	19 82       	std	Y+1, r1	; 0x01
    140c:	17 c0       	rjmp	.+46     	; 0x143c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    140e:	e0 e3       	ldi	r30, 0x30	; 48
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	88 2f       	mov	r24, r24
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	a9 01       	movw	r20, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <GPIO_readPin+0x10e>
    1422:	55 95       	asr	r21
    1424:	47 95       	ror	r20
    1426:	8a 95       	dec	r24
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <GPIO_readPin+0x10a>
    142a:	ca 01       	movw	r24, r20
    142c:	81 70       	andi	r24, 0x01	; 1
    142e:	90 70       	andi	r25, 0x00	; 0
    1430:	88 23       	and	r24, r24
    1432:	19 f0       	breq	.+6      	; 0x143a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	89 83       	std	Y+1, r24	; 0x01
    1438:	01 c0       	rjmp	.+2      	; 0x143c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    143a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    143c:	89 81       	ldd	r24, Y+1	; 0x01
}
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	00 d0       	rcall	.+0      	; 0x1454 <GPIO_setupPortDirection+0x6>
    1454:	00 d0       	rcall	.+0      	; 0x1456 <GPIO_setupPortDirection+0x8>
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	84 30       	cpi	r24, 0x04	; 4
    1462:	90 f5       	brcc	.+100    	; 0x14c8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	3c 83       	std	Y+4, r19	; 0x04
    146c:	2b 83       	std	Y+3, r18	; 0x03
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	91 05       	cpc	r25, r1
    1476:	d1 f0       	breq	.+52     	; 0x14ac <GPIO_setupPortDirection+0x5e>
    1478:	2b 81       	ldd	r18, Y+3	; 0x03
    147a:	3c 81       	ldd	r19, Y+4	; 0x04
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	2c f4       	brge	.+10     	; 0x148c <GPIO_setupPortDirection+0x3e>
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	61 f0       	breq	.+24     	; 0x14a2 <GPIO_setupPortDirection+0x54>
    148a:	1e c0       	rjmp	.+60     	; 0x14c8 <GPIO_setupPortDirection+0x7a>
    148c:	2b 81       	ldd	r18, Y+3	; 0x03
    148e:	3c 81       	ldd	r19, Y+4	; 0x04
    1490:	22 30       	cpi	r18, 0x02	; 2
    1492:	31 05       	cpc	r19, r1
    1494:	81 f0       	breq	.+32     	; 0x14b6 <GPIO_setupPortDirection+0x68>
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	9c 81       	ldd	r25, Y+4	; 0x04
    149a:	83 30       	cpi	r24, 0x03	; 3
    149c:	91 05       	cpc	r25, r1
    149e:	81 f0       	breq	.+32     	; 0x14c0 <GPIO_setupPortDirection+0x72>
    14a0:	13 c0       	rjmp	.+38     	; 0x14c8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    14a2:	ea e3       	ldi	r30, 0x3A	; 58
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	80 83       	st	Z, r24
    14aa:	0e c0       	rjmp	.+28     	; 0x14c8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    14ac:	e7 e3       	ldi	r30, 0x37	; 55
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	80 83       	st	Z, r24
    14b4:	09 c0       	rjmp	.+18     	; 0x14c8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    14b6:	e4 e3       	ldi	r30, 0x34	; 52
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	80 83       	st	Z, r24
    14be:	04 c0       	rjmp	.+8      	; 0x14c8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    14c0:	e1 e3       	ldi	r30, 0x31	; 49
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	80 83       	st	Z, r24
			break;
		}
	}
}
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <GPIO_writePort+0x6>
    14dc:	00 d0       	rcall	.+0      	; 0x14de <GPIO_writePort+0x8>
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	84 30       	cpi	r24, 0x04	; 4
    14ea:	90 f5       	brcc	.+100    	; 0x1550 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3c 83       	std	Y+4, r19	; 0x04
    14f4:	2b 83       	std	Y+3, r18	; 0x03
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	91 05       	cpc	r25, r1
    14fe:	d1 f0       	breq	.+52     	; 0x1534 <GPIO_writePort+0x5e>
    1500:	2b 81       	ldd	r18, Y+3	; 0x03
    1502:	3c 81       	ldd	r19, Y+4	; 0x04
    1504:	22 30       	cpi	r18, 0x02	; 2
    1506:	31 05       	cpc	r19, r1
    1508:	2c f4       	brge	.+10     	; 0x1514 <GPIO_writePort+0x3e>
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	61 f0       	breq	.+24     	; 0x152a <GPIO_writePort+0x54>
    1512:	1e c0       	rjmp	.+60     	; 0x1550 <GPIO_writePort+0x7a>
    1514:	2b 81       	ldd	r18, Y+3	; 0x03
    1516:	3c 81       	ldd	r19, Y+4	; 0x04
    1518:	22 30       	cpi	r18, 0x02	; 2
    151a:	31 05       	cpc	r19, r1
    151c:	81 f0       	breq	.+32     	; 0x153e <GPIO_writePort+0x68>
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	83 30       	cpi	r24, 0x03	; 3
    1524:	91 05       	cpc	r25, r1
    1526:	81 f0       	breq	.+32     	; 0x1548 <GPIO_writePort+0x72>
    1528:	13 c0       	rjmp	.+38     	; 0x1550 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    152a:	eb e3       	ldi	r30, 0x3B	; 59
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	80 83       	st	Z, r24
    1532:	0e c0       	rjmp	.+28     	; 0x1550 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1534:	e8 e3       	ldi	r30, 0x38	; 56
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	80 83       	st	Z, r24
    153c:	09 c0       	rjmp	.+18     	; 0x1550 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    153e:	e5 e3       	ldi	r30, 0x35	; 53
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	80 83       	st	Z, r24
    1546:	04 c0       	rjmp	.+8      	; 0x1550 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1548:	e2 e3       	ldi	r30, 0x32	; 50
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <GPIO_readPort+0x6>
    1564:	00 d0       	rcall	.+0      	; 0x1566 <GPIO_readPort+0x8>
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    156c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	84 30       	cpi	r24, 0x04	; 4
    1572:	90 f5       	brcc	.+100    	; 0x15d8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3c 83       	std	Y+4, r19	; 0x04
    157c:	2b 83       	std	Y+3, r18	; 0x03
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	91 05       	cpc	r25, r1
    1586:	d1 f0       	breq	.+52     	; 0x15bc <GPIO_readPort+0x5e>
    1588:	2b 81       	ldd	r18, Y+3	; 0x03
    158a:	3c 81       	ldd	r19, Y+4	; 0x04
    158c:	22 30       	cpi	r18, 0x02	; 2
    158e:	31 05       	cpc	r19, r1
    1590:	2c f4       	brge	.+10     	; 0x159c <GPIO_readPort+0x3e>
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	61 f0       	breq	.+24     	; 0x15b2 <GPIO_readPort+0x54>
    159a:	1e c0       	rjmp	.+60     	; 0x15d8 <GPIO_readPort+0x7a>
    159c:	2b 81       	ldd	r18, Y+3	; 0x03
    159e:	3c 81       	ldd	r19, Y+4	; 0x04
    15a0:	22 30       	cpi	r18, 0x02	; 2
    15a2:	31 05       	cpc	r19, r1
    15a4:	81 f0       	breq	.+32     	; 0x15c6 <GPIO_readPort+0x68>
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	83 30       	cpi	r24, 0x03	; 3
    15ac:	91 05       	cpc	r25, r1
    15ae:	81 f0       	breq	.+32     	; 0x15d0 <GPIO_readPort+0x72>
    15b0:	13 c0       	rjmp	.+38     	; 0x15d8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    15b2:	e9 e3       	ldi	r30, 0x39	; 57
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	0e c0       	rjmp	.+28     	; 0x15d8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    15bc:	e6 e3       	ldi	r30, 0x36	; 54
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	09 c0       	rjmp	.+18     	; 0x15d8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    15c6:	e3 e3       	ldi	r30, 0x33	; 51
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	04 c0       	rjmp	.+8      	; 0x15d8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    15d0:	e0 e3       	ldi	r30, 0x30	; 48
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	2e 97       	sbiw	r28, 0x0e	; 14
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    15fc:	83 e0       	ldi	r24, 0x03	; 3
    15fe:	62 e0       	ldi	r22, 0x02	; 2
    1600:	41 e0       	ldi	r20, 0x01	; 1
    1602:	0e 94 b6 07 	call	0xf6c	; 0xf6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1606:	83 e0       	ldi	r24, 0x03	; 3
    1608:	63 e0       	ldi	r22, 0x03	; 3
    160a:	41 e0       	ldi	r20, 0x01	; 1
    160c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <GPIO_setupPinDirection>
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	a0 ea       	ldi	r26, 0xA0	; 160
    1616:	b1 e4       	ldi	r27, 0x41	; 65
    1618:	8b 87       	std	Y+11, r24	; 0x0b
    161a:	9c 87       	std	Y+12, r25	; 0x0c
    161c:	ad 87       	std	Y+13, r26	; 0x0d
    161e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1620:	6b 85       	ldd	r22, Y+11	; 0x0b
    1622:	7c 85       	ldd	r23, Y+12	; 0x0c
    1624:	8d 85       	ldd	r24, Y+13	; 0x0d
    1626:	9e 85       	ldd	r25, Y+14	; 0x0e
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	4a ef       	ldi	r20, 0xFA	; 250
    162e:	54 e4       	ldi	r21, 0x44	; 68
    1630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	8f 83       	std	Y+7, r24	; 0x07
    163a:	98 87       	std	Y+8, r25	; 0x08
    163c:	a9 87       	std	Y+9, r26	; 0x09
    163e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1640:	6f 81       	ldd	r22, Y+7	; 0x07
    1642:	78 85       	ldd	r23, Y+8	; 0x08
    1644:	89 85       	ldd	r24, Y+9	; 0x09
    1646:	9a 85       	ldd	r25, Y+10	; 0x0a
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e8       	ldi	r20, 0x80	; 128
    164e:	5f e3       	ldi	r21, 0x3F	; 63
    1650:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1654:	88 23       	and	r24, r24
    1656:	2c f4       	brge	.+10     	; 0x1662 <LCD_init+0x7a>
		__ticks = 1;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	9e 83       	std	Y+6, r25	; 0x06
    165e:	8d 83       	std	Y+5, r24	; 0x05
    1660:	3f c0       	rjmp	.+126    	; 0x16e0 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1662:	6f 81       	ldd	r22, Y+7	; 0x07
    1664:	78 85       	ldd	r23, Y+8	; 0x08
    1666:	89 85       	ldd	r24, Y+9	; 0x09
    1668:	9a 85       	ldd	r25, Y+10	; 0x0a
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	3f ef       	ldi	r19, 0xFF	; 255
    166e:	4f e7       	ldi	r20, 0x7F	; 127
    1670:	57 e4       	ldi	r21, 0x47	; 71
    1672:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1676:	18 16       	cp	r1, r24
    1678:	4c f5       	brge	.+82     	; 0x16cc <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167a:	6b 85       	ldd	r22, Y+11	; 0x0b
    167c:	7c 85       	ldd	r23, Y+12	; 0x0c
    167e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1680:	9e 85       	ldd	r25, Y+14	; 0x0e
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e2       	ldi	r20, 0x20	; 32
    1688:	51 e4       	ldi	r21, 0x41	; 65
    168a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	bc 01       	movw	r22, r24
    1694:	cd 01       	movw	r24, r26
    1696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	9e 83       	std	Y+6, r25	; 0x06
    16a0:	8d 83       	std	Y+5, r24	; 0x05
    16a2:	0f c0       	rjmp	.+30     	; 0x16c2 <LCD_init+0xda>
    16a4:	88 ec       	ldi	r24, 0xC8	; 200
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	9c 83       	std	Y+4, r25	; 0x04
    16aa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	9c 81       	ldd	r25, Y+4	; 0x04
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <LCD_init+0xc8>
    16b4:	9c 83       	std	Y+4, r25	; 0x04
    16b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ba:	9e 81       	ldd	r25, Y+6	; 0x06
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c2:	8d 81       	ldd	r24, Y+5	; 0x05
    16c4:	9e 81       	ldd	r25, Y+6	; 0x06
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	69 f7       	brne	.-38     	; 0x16a4 <LCD_init+0xbc>
    16ca:	14 c0       	rjmp	.+40     	; 0x16f4 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16cc:	6f 81       	ldd	r22, Y+7	; 0x07
    16ce:	78 85       	ldd	r23, Y+8	; 0x08
    16d0:	89 85       	ldd	r24, Y+9	; 0x09
    16d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	9e 83       	std	Y+6, r25	; 0x06
    16de:	8d 83       	std	Y+5, r24	; 0x05
    16e0:	8d 81       	ldd	r24, Y+5	; 0x05
    16e2:	9e 81       	ldd	r25, Y+6	; 0x06
    16e4:	9a 83       	std	Y+2, r25	; 0x02
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	9a 81       	ldd	r25, Y+2	; 0x02
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <LCD_init+0x104>
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    16f4:	82 e0       	ldi	r24, 0x02	; 2
    16f6:	6f ef       	ldi	r22, 0xFF	; 255
    16f8:	0e 94 27 0a 	call	0x144e	; 0x144e <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    16fc:	88 e3       	ldi	r24, 0x38	; 56
    16fe:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1702:	8c e0       	ldi	r24, 0x0C	; 12
    1704:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_sendCommand>
}
    170e:	2e 96       	adiw	r28, 0x0e	; 14
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	e9 97       	sbiw	r28, 0x39	; 57
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1736:	83 e0       	ldi	r24, 0x03	; 3
    1738:	62 e0       	ldi	r22, 0x02	; 2
    173a:	40 e0       	ldi	r20, 0x00	; 0
    173c:	0e 94 a1 08 	call	0x1142	; 0x1142 <GPIO_writePin>
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a0 e8       	ldi	r26, 0x80	; 128
    1746:	bf e3       	ldi	r27, 0x3F	; 63
    1748:	8d ab       	std	Y+53, r24	; 0x35
    174a:	9e ab       	std	Y+54, r25	; 0x36
    174c:	af ab       	std	Y+55, r26	; 0x37
    174e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1750:	6d a9       	ldd	r22, Y+53	; 0x35
    1752:	7e a9       	ldd	r23, Y+54	; 0x36
    1754:	8f a9       	ldd	r24, Y+55	; 0x37
    1756:	98 ad       	ldd	r25, Y+56	; 0x38
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	4a ef       	ldi	r20, 0xFA	; 250
    175e:	54 e4       	ldi	r21, 0x44	; 68
    1760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	89 ab       	std	Y+49, r24	; 0x31
    176a:	9a ab       	std	Y+50, r25	; 0x32
    176c:	ab ab       	std	Y+51, r26	; 0x33
    176e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1770:	69 a9       	ldd	r22, Y+49	; 0x31
    1772:	7a a9       	ldd	r23, Y+50	; 0x32
    1774:	8b a9       	ldd	r24, Y+51	; 0x33
    1776:	9c a9       	ldd	r25, Y+52	; 0x34
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e8       	ldi	r20, 0x80	; 128
    177e:	5f e3       	ldi	r21, 0x3F	; 63
    1780:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1784:	88 23       	and	r24, r24
    1786:	2c f4       	brge	.+10     	; 0x1792 <LCD_sendCommand+0x72>
		__ticks = 1;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	98 ab       	std	Y+48, r25	; 0x30
    178e:	8f a7       	std	Y+47, r24	; 0x2f
    1790:	3f c0       	rjmp	.+126    	; 0x1810 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1792:	69 a9       	ldd	r22, Y+49	; 0x31
    1794:	7a a9       	ldd	r23, Y+50	; 0x32
    1796:	8b a9       	ldd	r24, Y+51	; 0x33
    1798:	9c a9       	ldd	r25, Y+52	; 0x34
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	3f ef       	ldi	r19, 0xFF	; 255
    179e:	4f e7       	ldi	r20, 0x7F	; 127
    17a0:	57 e4       	ldi	r21, 0x47	; 71
    17a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a6:	18 16       	cp	r1, r24
    17a8:	4c f5       	brge	.+82     	; 0x17fc <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17aa:	6d a9       	ldd	r22, Y+53	; 0x35
    17ac:	7e a9       	ldd	r23, Y+54	; 0x36
    17ae:	8f a9       	ldd	r24, Y+55	; 0x37
    17b0:	98 ad       	ldd	r25, Y+56	; 0x38
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e2       	ldi	r20, 0x20	; 32
    17b8:	51 e4       	ldi	r21, 0x41	; 65
    17ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	bc 01       	movw	r22, r24
    17c4:	cd 01       	movw	r24, r26
    17c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	98 ab       	std	Y+48, r25	; 0x30
    17d0:	8f a7       	std	Y+47, r24	; 0x2f
    17d2:	0f c0       	rjmp	.+30     	; 0x17f2 <LCD_sendCommand+0xd2>
    17d4:	88 ec       	ldi	r24, 0xC8	; 200
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	9e a7       	std	Y+46, r25	; 0x2e
    17da:	8d a7       	std	Y+45, r24	; 0x2d
    17dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    17de:	9e a5       	ldd	r25, Y+46	; 0x2e
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	f1 f7       	brne	.-4      	; 0x17e0 <LCD_sendCommand+0xc0>
    17e4:	9e a7       	std	Y+46, r25	; 0x2e
    17e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ea:	98 a9       	ldd	r25, Y+48	; 0x30
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	98 ab       	std	Y+48, r25	; 0x30
    17f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    17f4:	98 a9       	ldd	r25, Y+48	; 0x30
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	69 f7       	brne	.-38     	; 0x17d4 <LCD_sendCommand+0xb4>
    17fa:	14 c0       	rjmp	.+40     	; 0x1824 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fc:	69 a9       	ldd	r22, Y+49	; 0x31
    17fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1800:	8b a9       	ldd	r24, Y+51	; 0x33
    1802:	9c a9       	ldd	r25, Y+52	; 0x34
    1804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	98 ab       	std	Y+48, r25	; 0x30
    180e:	8f a7       	std	Y+47, r24	; 0x2f
    1810:	8f a5       	ldd	r24, Y+47	; 0x2f
    1812:	98 a9       	ldd	r25, Y+48	; 0x30
    1814:	9c a7       	std	Y+44, r25	; 0x2c
    1816:	8b a7       	std	Y+43, r24	; 0x2b
    1818:	8b a5       	ldd	r24, Y+43	; 0x2b
    181a:	9c a5       	ldd	r25, Y+44	; 0x2c
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <LCD_sendCommand+0xfc>
    1820:	9c a7       	std	Y+44, r25	; 0x2c
    1822:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1824:	83 e0       	ldi	r24, 0x03	; 3
    1826:	63 e0       	ldi	r22, 0x03	; 3
    1828:	41 e0       	ldi	r20, 0x01	; 1
    182a:	0e 94 a1 08 	call	0x1142	; 0x1142 <GPIO_writePin>
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	a0 e8       	ldi	r26, 0x80	; 128
    1834:	bf e3       	ldi	r27, 0x3F	; 63
    1836:	8f a3       	std	Y+39, r24	; 0x27
    1838:	98 a7       	std	Y+40, r25	; 0x28
    183a:	a9 a7       	std	Y+41, r26	; 0x29
    183c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183e:	6f a1       	ldd	r22, Y+39	; 0x27
    1840:	78 a5       	ldd	r23, Y+40	; 0x28
    1842:	89 a5       	ldd	r24, Y+41	; 0x29
    1844:	9a a5       	ldd	r25, Y+42	; 0x2a
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	4a ef       	ldi	r20, 0xFA	; 250
    184c:	54 e4       	ldi	r21, 0x44	; 68
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	8b a3       	std	Y+35, r24	; 0x23
    1858:	9c a3       	std	Y+36, r25	; 0x24
    185a:	ad a3       	std	Y+37, r26	; 0x25
    185c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    185e:	6b a1       	ldd	r22, Y+35	; 0x23
    1860:	7c a1       	ldd	r23, Y+36	; 0x24
    1862:	8d a1       	ldd	r24, Y+37	; 0x25
    1864:	9e a1       	ldd	r25, Y+38	; 0x26
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e8       	ldi	r20, 0x80	; 128
    186c:	5f e3       	ldi	r21, 0x3F	; 63
    186e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1872:	88 23       	and	r24, r24
    1874:	2c f4       	brge	.+10     	; 0x1880 <LCD_sendCommand+0x160>
		__ticks = 1;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	9a a3       	std	Y+34, r25	; 0x22
    187c:	89 a3       	std	Y+33, r24	; 0x21
    187e:	3f c0       	rjmp	.+126    	; 0x18fe <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1880:	6b a1       	ldd	r22, Y+35	; 0x23
    1882:	7c a1       	ldd	r23, Y+36	; 0x24
    1884:	8d a1       	ldd	r24, Y+37	; 0x25
    1886:	9e a1       	ldd	r25, Y+38	; 0x26
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	3f ef       	ldi	r19, 0xFF	; 255
    188c:	4f e7       	ldi	r20, 0x7F	; 127
    188e:	57 e4       	ldi	r21, 0x47	; 71
    1890:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1894:	18 16       	cp	r1, r24
    1896:	4c f5       	brge	.+82     	; 0x18ea <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1898:	6f a1       	ldd	r22, Y+39	; 0x27
    189a:	78 a5       	ldd	r23, Y+40	; 0x28
    189c:	89 a5       	ldd	r24, Y+41	; 0x29
    189e:	9a a5       	ldd	r25, Y+42	; 0x2a
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e2       	ldi	r20, 0x20	; 32
    18a6:	51 e4       	ldi	r21, 0x41	; 65
    18a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	bc 01       	movw	r22, r24
    18b2:	cd 01       	movw	r24, r26
    18b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	9a a3       	std	Y+34, r25	; 0x22
    18be:	89 a3       	std	Y+33, r24	; 0x21
    18c0:	0f c0       	rjmp	.+30     	; 0x18e0 <LCD_sendCommand+0x1c0>
    18c2:	88 ec       	ldi	r24, 0xC8	; 200
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	98 a3       	std	Y+32, r25	; 0x20
    18c8:	8f 8f       	std	Y+31, r24	; 0x1f
    18ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18cc:	98 a1       	ldd	r25, Y+32	; 0x20
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <LCD_sendCommand+0x1ae>
    18d2:	98 a3       	std	Y+32, r25	; 0x20
    18d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d6:	89 a1       	ldd	r24, Y+33	; 0x21
    18d8:	9a a1       	ldd	r25, Y+34	; 0x22
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	9a a3       	std	Y+34, r25	; 0x22
    18de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e0:	89 a1       	ldd	r24, Y+33	; 0x21
    18e2:	9a a1       	ldd	r25, Y+34	; 0x22
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	69 f7       	brne	.-38     	; 0x18c2 <LCD_sendCommand+0x1a2>
    18e8:	14 c0       	rjmp	.+40     	; 0x1912 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ea:	6b a1       	ldd	r22, Y+35	; 0x23
    18ec:	7c a1       	ldd	r23, Y+36	; 0x24
    18ee:	8d a1       	ldd	r24, Y+37	; 0x25
    18f0:	9e a1       	ldd	r25, Y+38	; 0x26
    18f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	9a a3       	std	Y+34, r25	; 0x22
    18fc:	89 a3       	std	Y+33, r24	; 0x21
    18fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1900:	9a a1       	ldd	r25, Y+34	; 0x22
    1902:	9e 8f       	std	Y+30, r25	; 0x1e
    1904:	8d 8f       	std	Y+29, r24	; 0x1d
    1906:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1908:	9e 8d       	ldd	r25, Y+30	; 0x1e
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	f1 f7       	brne	.-4      	; 0x190a <LCD_sendCommand+0x1ea>
    190e:	9e 8f       	std	Y+30, r25	; 0x1e
    1910:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1912:	82 e0       	ldi	r24, 0x02	; 2
    1914:	69 ad       	ldd	r22, Y+57	; 0x39
    1916:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <GPIO_writePort>
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	a0 e8       	ldi	r26, 0x80	; 128
    1920:	bf e3       	ldi	r27, 0x3F	; 63
    1922:	89 8f       	std	Y+25, r24	; 0x19
    1924:	9a 8f       	std	Y+26, r25	; 0x1a
    1926:	ab 8f       	std	Y+27, r26	; 0x1b
    1928:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    192a:	69 8d       	ldd	r22, Y+25	; 0x19
    192c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    192e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1930:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	4a ef       	ldi	r20, 0xFA	; 250
    1938:	54 e4       	ldi	r21, 0x44	; 68
    193a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	8d 8b       	std	Y+21, r24	; 0x15
    1944:	9e 8b       	std	Y+22, r25	; 0x16
    1946:	af 8b       	std	Y+23, r26	; 0x17
    1948:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    194a:	6d 89       	ldd	r22, Y+21	; 0x15
    194c:	7e 89       	ldd	r23, Y+22	; 0x16
    194e:	8f 89       	ldd	r24, Y+23	; 0x17
    1950:	98 8d       	ldd	r25, Y+24	; 0x18
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e8       	ldi	r20, 0x80	; 128
    1958:	5f e3       	ldi	r21, 0x3F	; 63
    195a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    195e:	88 23       	and	r24, r24
    1960:	2c f4       	brge	.+10     	; 0x196c <LCD_sendCommand+0x24c>
		__ticks = 1;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	9c 8b       	std	Y+20, r25	; 0x14
    1968:	8b 8b       	std	Y+19, r24	; 0x13
    196a:	3f c0       	rjmp	.+126    	; 0x19ea <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    196c:	6d 89       	ldd	r22, Y+21	; 0x15
    196e:	7e 89       	ldd	r23, Y+22	; 0x16
    1970:	8f 89       	ldd	r24, Y+23	; 0x17
    1972:	98 8d       	ldd	r25, Y+24	; 0x18
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	3f ef       	ldi	r19, 0xFF	; 255
    1978:	4f e7       	ldi	r20, 0x7F	; 127
    197a:	57 e4       	ldi	r21, 0x47	; 71
    197c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1980:	18 16       	cp	r1, r24
    1982:	4c f5       	brge	.+82     	; 0x19d6 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1984:	69 8d       	ldd	r22, Y+25	; 0x19
    1986:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1988:	8b 8d       	ldd	r24, Y+27	; 0x1b
    198a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e2       	ldi	r20, 0x20	; 32
    1992:	51 e4       	ldi	r21, 0x41	; 65
    1994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	bc 01       	movw	r22, r24
    199e:	cd 01       	movw	r24, r26
    19a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	9c 8b       	std	Y+20, r25	; 0x14
    19aa:	8b 8b       	std	Y+19, r24	; 0x13
    19ac:	0f c0       	rjmp	.+30     	; 0x19cc <LCD_sendCommand+0x2ac>
    19ae:	88 ec       	ldi	r24, 0xC8	; 200
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9a 8b       	std	Y+18, r25	; 0x12
    19b4:	89 8b       	std	Y+17, r24	; 0x11
    19b6:	89 89       	ldd	r24, Y+17	; 0x11
    19b8:	9a 89       	ldd	r25, Y+18	; 0x12
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <LCD_sendCommand+0x29a>
    19be:	9a 8b       	std	Y+18, r25	; 0x12
    19c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c2:	8b 89       	ldd	r24, Y+19	; 0x13
    19c4:	9c 89       	ldd	r25, Y+20	; 0x14
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	9c 8b       	std	Y+20, r25	; 0x14
    19ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19cc:	8b 89       	ldd	r24, Y+19	; 0x13
    19ce:	9c 89       	ldd	r25, Y+20	; 0x14
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	69 f7       	brne	.-38     	; 0x19ae <LCD_sendCommand+0x28e>
    19d4:	14 c0       	rjmp	.+40     	; 0x19fe <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d6:	6d 89       	ldd	r22, Y+21	; 0x15
    19d8:	7e 89       	ldd	r23, Y+22	; 0x16
    19da:	8f 89       	ldd	r24, Y+23	; 0x17
    19dc:	98 8d       	ldd	r25, Y+24	; 0x18
    19de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	9c 8b       	std	Y+20, r25	; 0x14
    19e8:	8b 8b       	std	Y+19, r24	; 0x13
    19ea:	8b 89       	ldd	r24, Y+19	; 0x13
    19ec:	9c 89       	ldd	r25, Y+20	; 0x14
    19ee:	98 8b       	std	Y+16, r25	; 0x10
    19f0:	8f 87       	std	Y+15, r24	; 0x0f
    19f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f4:	98 89       	ldd	r25, Y+16	; 0x10
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <LCD_sendCommand+0x2d6>
    19fa:	98 8b       	std	Y+16, r25	; 0x10
    19fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    19fe:	83 e0       	ldi	r24, 0x03	; 3
    1a00:	63 e0       	ldi	r22, 0x03	; 3
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	0e 94 a1 08 	call	0x1142	; 0x1142 <GPIO_writePin>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	a0 e8       	ldi	r26, 0x80	; 128
    1a0e:	bf e3       	ldi	r27, 0x3F	; 63
    1a10:	8b 87       	std	Y+11, r24	; 0x0b
    1a12:	9c 87       	std	Y+12, r25	; 0x0c
    1a14:	ad 87       	std	Y+13, r26	; 0x0d
    1a16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4a ef       	ldi	r20, 0xFA	; 250
    1a26:	54 e4       	ldi	r21, 0x44	; 68
    1a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8f 83       	std	Y+7, r24	; 0x07
    1a32:	98 87       	std	Y+8, r25	; 0x08
    1a34:	a9 87       	std	Y+9, r26	; 0x09
    1a36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a38:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3a:	78 85       	ldd	r23, Y+8	; 0x08
    1a3c:	89 85       	ldd	r24, Y+9	; 0x09
    1a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e8       	ldi	r20, 0x80	; 128
    1a46:	5f e3       	ldi	r21, 0x3F	; 63
    1a48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a4c:	88 23       	and	r24, r24
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <LCD_sendCommand+0x33a>
		__ticks = 1;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9e 83       	std	Y+6, r25	; 0x06
    1a56:	8d 83       	std	Y+5, r24	; 0x05
    1a58:	3f c0       	rjmp	.+126    	; 0x1ad8 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5c:	78 85       	ldd	r23, Y+8	; 0x08
    1a5e:	89 85       	ldd	r24, Y+9	; 0x09
    1a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	3f ef       	ldi	r19, 0xFF	; 255
    1a66:	4f e7       	ldi	r20, 0x7F	; 127
    1a68:	57 e4       	ldi	r21, 0x47	; 71
    1a6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a6e:	18 16       	cp	r1, r24
    1a70:	4c f5       	brge	.+82     	; 0x1ac4 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e2       	ldi	r20, 0x20	; 32
    1a80:	51 e4       	ldi	r21, 0x41	; 65
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	cd 01       	movw	r24, r26
    1a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	9e 83       	std	Y+6, r25	; 0x06
    1a98:	8d 83       	std	Y+5, r24	; 0x05
    1a9a:	0f c0       	rjmp	.+30     	; 0x1aba <LCD_sendCommand+0x39a>
    1a9c:	88 ec       	ldi	r24, 0xC8	; 200
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	9c 83       	std	Y+4, r25	; 0x04
    1aa2:	8b 83       	std	Y+3, r24	; 0x03
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <LCD_sendCommand+0x388>
    1aac:	9c 83       	std	Y+4, r25	; 0x04
    1aae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	9e 83       	std	Y+6, r25	; 0x06
    1ab8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aba:	8d 81       	ldd	r24, Y+5	; 0x05
    1abc:	9e 81       	ldd	r25, Y+6	; 0x06
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	69 f7       	brne	.-38     	; 0x1a9c <LCD_sendCommand+0x37c>
    1ac2:	14 c0       	rjmp	.+40     	; 0x1aec <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac6:	78 85       	ldd	r23, Y+8	; 0x08
    1ac8:	89 85       	ldd	r24, Y+9	; 0x09
    1aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
    1ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ada:	9e 81       	ldd	r25, Y+6	; 0x06
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <LCD_sendCommand+0x3c4>
    1ae8:	9a 83       	std	Y+2, r25	; 0x02
    1aea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1aec:	e9 96       	adiw	r28, 0x39	; 57
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	e9 97       	sbiw	r28, 0x39	; 57
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1b14:	83 e0       	ldi	r24, 0x03	; 3
    1b16:	62 e0       	ldi	r22, 0x02	; 2
    1b18:	41 e0       	ldi	r20, 0x01	; 1
    1b1a:	0e 94 a1 08 	call	0x1142	; 0x1142 <GPIO_writePin>
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	a0 e8       	ldi	r26, 0x80	; 128
    1b24:	bf e3       	ldi	r27, 0x3F	; 63
    1b26:	8d ab       	std	Y+53, r24	; 0x35
    1b28:	9e ab       	std	Y+54, r25	; 0x36
    1b2a:	af ab       	std	Y+55, r26	; 0x37
    1b2c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2e:	6d a9       	ldd	r22, Y+53	; 0x35
    1b30:	7e a9       	ldd	r23, Y+54	; 0x36
    1b32:	8f a9       	ldd	r24, Y+55	; 0x37
    1b34:	98 ad       	ldd	r25, Y+56	; 0x38
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	4a ef       	ldi	r20, 0xFA	; 250
    1b3c:	54 e4       	ldi	r21, 0x44	; 68
    1b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	89 ab       	std	Y+49, r24	; 0x31
    1b48:	9a ab       	std	Y+50, r25	; 0x32
    1b4a:	ab ab       	std	Y+51, r26	; 0x33
    1b4c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b50:	7a a9       	ldd	r23, Y+50	; 0x32
    1b52:	8b a9       	ldd	r24, Y+51	; 0x33
    1b54:	9c a9       	ldd	r25, Y+52	; 0x34
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e8       	ldi	r20, 0x80	; 128
    1b5c:	5f e3       	ldi	r21, 0x3F	; 63
    1b5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b62:	88 23       	and	r24, r24
    1b64:	2c f4       	brge	.+10     	; 0x1b70 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	98 ab       	std	Y+48, r25	; 0x30
    1b6c:	8f a7       	std	Y+47, r24	; 0x2f
    1b6e:	3f c0       	rjmp	.+126    	; 0x1bee <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1b70:	69 a9       	ldd	r22, Y+49	; 0x31
    1b72:	7a a9       	ldd	r23, Y+50	; 0x32
    1b74:	8b a9       	ldd	r24, Y+51	; 0x33
    1b76:	9c a9       	ldd	r25, Y+52	; 0x34
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	3f ef       	ldi	r19, 0xFF	; 255
    1b7c:	4f e7       	ldi	r20, 0x7F	; 127
    1b7e:	57 e4       	ldi	r21, 0x47	; 71
    1b80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b84:	18 16       	cp	r1, r24
    1b86:	4c f5       	brge	.+82     	; 0x1bda <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b88:	6d a9       	ldd	r22, Y+53	; 0x35
    1b8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e2       	ldi	r20, 0x20	; 32
    1b96:	51 e4       	ldi	r21, 0x41	; 65
    1b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	bc 01       	movw	r22, r24
    1ba2:	cd 01       	movw	r24, r26
    1ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	98 ab       	std	Y+48, r25	; 0x30
    1bae:	8f a7       	std	Y+47, r24	; 0x2f
    1bb0:	0f c0       	rjmp	.+30     	; 0x1bd0 <LCD_displayCharacter+0xd2>
    1bb2:	88 ec       	ldi	r24, 0xC8	; 200
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	9e a7       	std	Y+46, r25	; 0x2e
    1bb8:	8d a7       	std	Y+45, r24	; 0x2d
    1bba:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bbc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <LCD_displayCharacter+0xc0>
    1bc2:	9e a7       	std	Y+46, r25	; 0x2e
    1bc4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bc8:	98 a9       	ldd	r25, Y+48	; 0x30
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	98 ab       	std	Y+48, r25	; 0x30
    1bce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	69 f7       	brne	.-38     	; 0x1bb2 <LCD_displayCharacter+0xb4>
    1bd8:	14 c0       	rjmp	.+40     	; 0x1c02 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bda:	69 a9       	ldd	r22, Y+49	; 0x31
    1bdc:	7a a9       	ldd	r23, Y+50	; 0x32
    1bde:	8b a9       	ldd	r24, Y+51	; 0x33
    1be0:	9c a9       	ldd	r25, Y+52	; 0x34
    1be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	98 ab       	std	Y+48, r25	; 0x30
    1bec:	8f a7       	std	Y+47, r24	; 0x2f
    1bee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bf0:	98 a9       	ldd	r25, Y+48	; 0x30
    1bf2:	9c a7       	std	Y+44, r25	; 0x2c
    1bf4:	8b a7       	std	Y+43, r24	; 0x2b
    1bf6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bf8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <LCD_displayCharacter+0xfc>
    1bfe:	9c a7       	std	Y+44, r25	; 0x2c
    1c00:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c02:	83 e0       	ldi	r24, 0x03	; 3
    1c04:	63 e0       	ldi	r22, 0x03	; 3
    1c06:	41 e0       	ldi	r20, 0x01	; 1
    1c08:	0e 94 a1 08 	call	0x1142	; 0x1142 <GPIO_writePin>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a0 e8       	ldi	r26, 0x80	; 128
    1c12:	bf e3       	ldi	r27, 0x3F	; 63
    1c14:	8f a3       	std	Y+39, r24	; 0x27
    1c16:	98 a7       	std	Y+40, r25	; 0x28
    1c18:	a9 a7       	std	Y+41, r26	; 0x29
    1c1a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c1e:	78 a5       	ldd	r23, Y+40	; 0x28
    1c20:	89 a5       	ldd	r24, Y+41	; 0x29
    1c22:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	4a ef       	ldi	r20, 0xFA	; 250
    1c2a:	54 e4       	ldi	r21, 0x44	; 68
    1c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	8b a3       	std	Y+35, r24	; 0x23
    1c36:	9c a3       	std	Y+36, r25	; 0x24
    1c38:	ad a3       	std	Y+37, r26	; 0x25
    1c3a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c40:	8d a1       	ldd	r24, Y+37	; 0x25
    1c42:	9e a1       	ldd	r25, Y+38	; 0x26
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e8       	ldi	r20, 0x80	; 128
    1c4a:	5f e3       	ldi	r21, 0x3F	; 63
    1c4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c50:	88 23       	and	r24, r24
    1c52:	2c f4       	brge	.+10     	; 0x1c5e <LCD_displayCharacter+0x160>
		__ticks = 1;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	9a a3       	std	Y+34, r25	; 0x22
    1c5a:	89 a3       	std	Y+33, r24	; 0x21
    1c5c:	3f c0       	rjmp	.+126    	; 0x1cdc <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1c5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c60:	7c a1       	ldd	r23, Y+36	; 0x24
    1c62:	8d a1       	ldd	r24, Y+37	; 0x25
    1c64:	9e a1       	ldd	r25, Y+38	; 0x26
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	3f ef       	ldi	r19, 0xFF	; 255
    1c6a:	4f e7       	ldi	r20, 0x7F	; 127
    1c6c:	57 e4       	ldi	r21, 0x47	; 71
    1c6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c72:	18 16       	cp	r1, r24
    1c74:	4c f5       	brge	.+82     	; 0x1cc8 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c76:	6f a1       	ldd	r22, Y+39	; 0x27
    1c78:	78 a5       	ldd	r23, Y+40	; 0x28
    1c7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e2       	ldi	r20, 0x20	; 32
    1c84:	51 e4       	ldi	r21, 0x41	; 65
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	9a a3       	std	Y+34, r25	; 0x22
    1c9c:	89 a3       	std	Y+33, r24	; 0x21
    1c9e:	0f c0       	rjmp	.+30     	; 0x1cbe <LCD_displayCharacter+0x1c0>
    1ca0:	88 ec       	ldi	r24, 0xC8	; 200
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	98 a3       	std	Y+32, r25	; 0x20
    1ca6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ca8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1caa:	98 a1       	ldd	r25, Y+32	; 0x20
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <LCD_displayCharacter+0x1ae>
    1cb0:	98 a3       	std	Y+32, r25	; 0x20
    1cb2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb4:	89 a1       	ldd	r24, Y+33	; 0x21
    1cb6:	9a a1       	ldd	r25, Y+34	; 0x22
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	9a a3       	std	Y+34, r25	; 0x22
    1cbc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbe:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc0:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	69 f7       	brne	.-38     	; 0x1ca0 <LCD_displayCharacter+0x1a2>
    1cc6:	14 c0       	rjmp	.+40     	; 0x1cf0 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cca:	7c a1       	ldd	r23, Y+36	; 0x24
    1ccc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cce:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	9a a3       	std	Y+34, r25	; 0x22
    1cda:	89 a3       	std	Y+33, r24	; 0x21
    1cdc:	89 a1       	ldd	r24, Y+33	; 0x21
    1cde:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ce2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ce4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ce6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <LCD_displayCharacter+0x1ea>
    1cec:	9e 8f       	std	Y+30, r25	; 0x1e
    1cee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	69 ad       	ldd	r22, Y+57	; 0x39
    1cf4:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <GPIO_writePort>
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	a0 e8       	ldi	r26, 0x80	; 128
    1cfe:	bf e3       	ldi	r27, 0x3F	; 63
    1d00:	89 8f       	std	Y+25, r24	; 0x19
    1d02:	9a 8f       	std	Y+26, r25	; 0x1a
    1d04:	ab 8f       	std	Y+27, r26	; 0x1b
    1d06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d08:	69 8d       	ldd	r22, Y+25	; 0x19
    1d0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	4a ef       	ldi	r20, 0xFA	; 250
    1d16:	54 e4       	ldi	r21, 0x44	; 68
    1d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	8d 8b       	std	Y+21, r24	; 0x15
    1d22:	9e 8b       	std	Y+22, r25	; 0x16
    1d24:	af 8b       	std	Y+23, r26	; 0x17
    1d26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d28:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e8       	ldi	r20, 0x80	; 128
    1d36:	5f e3       	ldi	r21, 0x3F	; 63
    1d38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d3c:	88 23       	and	r24, r24
    1d3e:	2c f4       	brge	.+10     	; 0x1d4a <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	9c 8b       	std	Y+20, r25	; 0x14
    1d46:	8b 8b       	std	Y+19, r24	; 0x13
    1d48:	3f c0       	rjmp	.+126    	; 0x1dc8 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1d4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d50:	98 8d       	ldd	r25, Y+24	; 0x18
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	3f ef       	ldi	r19, 0xFF	; 255
    1d56:	4f e7       	ldi	r20, 0x7F	; 127
    1d58:	57 e4       	ldi	r21, 0x47	; 71
    1d5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d5e:	18 16       	cp	r1, r24
    1d60:	4c f5       	brge	.+82     	; 0x1db4 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d62:	69 8d       	ldd	r22, Y+25	; 0x19
    1d64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e2       	ldi	r20, 0x20	; 32
    1d70:	51 e4       	ldi	r21, 0x41	; 65
    1d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	bc 01       	movw	r22, r24
    1d7c:	cd 01       	movw	r24, r26
    1d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	9c 8b       	std	Y+20, r25	; 0x14
    1d88:	8b 8b       	std	Y+19, r24	; 0x13
    1d8a:	0f c0       	rjmp	.+30     	; 0x1daa <LCD_displayCharacter+0x2ac>
    1d8c:	88 ec       	ldi	r24, 0xC8	; 200
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	9a 8b       	std	Y+18, r25	; 0x12
    1d92:	89 8b       	std	Y+17, r24	; 0x11
    1d94:	89 89       	ldd	r24, Y+17	; 0x11
    1d96:	9a 89       	ldd	r25, Y+18	; 0x12
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	f1 f7       	brne	.-4      	; 0x1d98 <LCD_displayCharacter+0x29a>
    1d9c:	9a 8b       	std	Y+18, r25	; 0x12
    1d9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da0:	8b 89       	ldd	r24, Y+19	; 0x13
    1da2:	9c 89       	ldd	r25, Y+20	; 0x14
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	9c 8b       	std	Y+20, r25	; 0x14
    1da8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1daa:	8b 89       	ldd	r24, Y+19	; 0x13
    1dac:	9c 89       	ldd	r25, Y+20	; 0x14
    1dae:	00 97       	sbiw	r24, 0x00	; 0
    1db0:	69 f7       	brne	.-38     	; 0x1d8c <LCD_displayCharacter+0x28e>
    1db2:	14 c0       	rjmp	.+40     	; 0x1ddc <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db4:	6d 89       	ldd	r22, Y+21	; 0x15
    1db6:	7e 89       	ldd	r23, Y+22	; 0x16
    1db8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dba:	98 8d       	ldd	r25, Y+24	; 0x18
    1dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	9c 8b       	std	Y+20, r25	; 0x14
    1dc6:	8b 8b       	std	Y+19, r24	; 0x13
    1dc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dca:	9c 89       	ldd	r25, Y+20	; 0x14
    1dcc:	98 8b       	std	Y+16, r25	; 0x10
    1dce:	8f 87       	std	Y+15, r24	; 0x0f
    1dd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd2:	98 89       	ldd	r25, Y+16	; 0x10
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	f1 f7       	brne	.-4      	; 0x1dd4 <LCD_displayCharacter+0x2d6>
    1dd8:	98 8b       	std	Y+16, r25	; 0x10
    1dda:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ddc:	83 e0       	ldi	r24, 0x03	; 3
    1dde:	63 e0       	ldi	r22, 0x03	; 3
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	0e 94 a1 08 	call	0x1142	; 0x1142 <GPIO_writePin>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a0 e8       	ldi	r26, 0x80	; 128
    1dec:	bf e3       	ldi	r27, 0x3F	; 63
    1dee:	8b 87       	std	Y+11, r24	; 0x0b
    1df0:	9c 87       	std	Y+12, r25	; 0x0c
    1df2:	ad 87       	std	Y+13, r26	; 0x0d
    1df4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	4a ef       	ldi	r20, 0xFA	; 250
    1e04:	54 e4       	ldi	r21, 0x44	; 68
    1e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	8f 83       	std	Y+7, r24	; 0x07
    1e10:	98 87       	std	Y+8, r25	; 0x08
    1e12:	a9 87       	std	Y+9, r26	; 0x09
    1e14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e16:	6f 81       	ldd	r22, Y+7	; 0x07
    1e18:	78 85       	ldd	r23, Y+8	; 0x08
    1e1a:	89 85       	ldd	r24, Y+9	; 0x09
    1e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e8       	ldi	r20, 0x80	; 128
    1e24:	5f e3       	ldi	r21, 0x3F	; 63
    1e26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e2a:	88 23       	and	r24, r24
    1e2c:	2c f4       	brge	.+10     	; 0x1e38 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	9e 83       	std	Y+6, r25	; 0x06
    1e34:	8d 83       	std	Y+5, r24	; 0x05
    1e36:	3f c0       	rjmp	.+126    	; 0x1eb6 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1e38:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3a:	78 85       	ldd	r23, Y+8	; 0x08
    1e3c:	89 85       	ldd	r24, Y+9	; 0x09
    1e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	3f ef       	ldi	r19, 0xFF	; 255
    1e44:	4f e7       	ldi	r20, 0x7F	; 127
    1e46:	57 e4       	ldi	r21, 0x47	; 71
    1e48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e4c:	18 16       	cp	r1, r24
    1e4e:	4c f5       	brge	.+82     	; 0x1ea2 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e2       	ldi	r20, 0x20	; 32
    1e5e:	51 e4       	ldi	r21, 0x41	; 65
    1e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	bc 01       	movw	r22, r24
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	9e 83       	std	Y+6, r25	; 0x06
    1e76:	8d 83       	std	Y+5, r24	; 0x05
    1e78:	0f c0       	rjmp	.+30     	; 0x1e98 <LCD_displayCharacter+0x39a>
    1e7a:	88 ec       	ldi	r24, 0xC8	; 200
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	9c 83       	std	Y+4, r25	; 0x04
    1e80:	8b 83       	std	Y+3, r24	; 0x03
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <LCD_displayCharacter+0x388>
    1e8a:	9c 83       	std	Y+4, r25	; 0x04
    1e8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e90:	9e 81       	ldd	r25, Y+6	; 0x06
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	9e 83       	std	Y+6, r25	; 0x06
    1e96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e98:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	69 f7       	brne	.-38     	; 0x1e7a <LCD_displayCharacter+0x37c>
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea4:	78 85       	ldd	r23, Y+8	; 0x08
    1ea6:	89 85       	ldd	r24, Y+9	; 0x09
    1ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	9e 83       	std	Y+6, r25	; 0x06
    1eb4:	8d 83       	std	Y+5, r24	; 0x05
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	9a 83       	std	Y+2, r25	; 0x02
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <LCD_displayCharacter+0x3c4>
    1ec6:	9a 83       	std	Y+2, r25	; 0x02
    1ec8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1eca:	e9 96       	adiw	r28, 0x39	; 57
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <LCD_displayString+0x6>
    1ee2:	0f 92       	push	r0
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	9b 83       	std	Y+3, r25	; 0x03
    1eea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1eec:	19 82       	std	Y+1, r1	; 0x01
    1eee:	0e c0       	rjmp	.+28     	; 0x1f0c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	9b 81       	ldd	r25, Y+3	; 0x03
    1efa:	fc 01       	movw	r30, r24
    1efc:	e2 0f       	add	r30, r18
    1efe:	f3 1f       	adc	r31, r19
    1f00:	80 81       	ld	r24, Z
    1f02:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <LCD_displayCharacter>
		i++;
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	8f 5f       	subi	r24, 0xFF	; 255
    1f0a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	9b 81       	ldd	r25, Y+3	; 0x03
    1f16:	fc 01       	movw	r30, r24
    1f18:	e2 0f       	add	r30, r18
    1f1a:	f3 1f       	adc	r31, r19
    1f1c:	80 81       	ld	r24, Z
    1f1e:	88 23       	and	r24, r24
    1f20:	39 f7       	brne	.-50     	; 0x1ef0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <LCD_moveCursor+0x6>
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <LCD_moveCursor+0x8>
    1f36:	0f 92       	push	r0
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	8a 83       	std	Y+2, r24	; 0x02
    1f3e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	3d 83       	std	Y+5, r19	; 0x05
    1f48:	2c 83       	std	Y+4, r18	; 0x04
    1f4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4e:	81 30       	cpi	r24, 0x01	; 1
    1f50:	91 05       	cpc	r25, r1
    1f52:	c1 f0       	breq	.+48     	; 0x1f84 <LCD_moveCursor+0x56>
    1f54:	2c 81       	ldd	r18, Y+4	; 0x04
    1f56:	3d 81       	ldd	r19, Y+5	; 0x05
    1f58:	22 30       	cpi	r18, 0x02	; 2
    1f5a:	31 05       	cpc	r19, r1
    1f5c:	2c f4       	brge	.+10     	; 0x1f68 <LCD_moveCursor+0x3a>
    1f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f60:	9d 81       	ldd	r25, Y+5	; 0x05
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	61 f0       	breq	.+24     	; 0x1f7e <LCD_moveCursor+0x50>
    1f66:	19 c0       	rjmp	.+50     	; 0x1f9a <LCD_moveCursor+0x6c>
    1f68:	2c 81       	ldd	r18, Y+4	; 0x04
    1f6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f6c:	22 30       	cpi	r18, 0x02	; 2
    1f6e:	31 05       	cpc	r19, r1
    1f70:	69 f0       	breq	.+26     	; 0x1f8c <LCD_moveCursor+0x5e>
    1f72:	8c 81       	ldd	r24, Y+4	; 0x04
    1f74:	9d 81       	ldd	r25, Y+5	; 0x05
    1f76:	83 30       	cpi	r24, 0x03	; 3
    1f78:	91 05       	cpc	r25, r1
    1f7a:	61 f0       	breq	.+24     	; 0x1f94 <LCD_moveCursor+0x66>
    1f7c:	0e c0       	rjmp	.+28     	; 0x1f9a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	89 83       	std	Y+1, r24	; 0x01
    1f82:	0b c0       	rjmp	.+22     	; 0x1f9a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	80 5c       	subi	r24, 0xC0	; 192
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	07 c0       	rjmp	.+14     	; 0x1f9a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	80 5f       	subi	r24, 0xF0	; 240
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	03 c0       	rjmp	.+6      	; 0x1f9a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	80 5b       	subi	r24, 0xB0	; 176
    1f98:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	80 68       	ori	r24, 0x80	; 128
    1f9e:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_sendCommand>
}
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <LCD_displayStringRowColumn+0x6>
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <LCD_displayStringRowColumn+0x8>
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	6a 83       	std	Y+2, r22	; 0x02
    1fc2:	5c 83       	std	Y+4, r21	; 0x04
    1fc4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	6a 81       	ldd	r22, Y+2	; 0x02
    1fca:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <LCD_displayString>
}
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	62 97       	sbiw	r28, 0x12	; 18
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	9a 8b       	std	Y+18, r25	; 0x12
    1ffa:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1ffc:	89 89       	ldd	r24, Y+17	; 0x11
    1ffe:	9a 89       	ldd	r25, Y+18	; 0x12
    2000:	9e 01       	movw	r18, r28
    2002:	2f 5f       	subi	r18, 0xFF	; 255
    2004:	3f 4f       	sbci	r19, 0xFF	; 255
    2006:	b9 01       	movw	r22, r18
    2008:	4a e0       	ldi	r20, 0x0A	; 10
    200a:	50 e0       	ldi	r21, 0x00	; 0
    200c:	0e 94 29 18 	call	0x3052	; 0x3052 <itoa>
   LCD_displayString(buff); /* Display the string */
    2010:	ce 01       	movw	r24, r28
    2012:	01 96       	adiw	r24, 0x01	; 1
    2014:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <LCD_displayString>
}
    2018:	62 96       	adiw	r28, 0x12	; 18
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_sendCommand>
}
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	60 97       	sbiw	r28, 0x10	; 16
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	0e 94 b6 07 	call	0xf6c	; 0xf6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	61 e0       	ldi	r22, 0x01	; 1
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	0e 94 b6 07 	call	0xf6c	; 0xf6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	62 e0       	ldi	r22, 0x02	; 2
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	63 e0       	ldi	r22, 0x03	; 3
    2074:	40 e0       	ldi	r20, 0x00	; 0
    2076:	0e 94 b6 07 	call	0xf6c	; 0xf6c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	64 e0       	ldi	r22, 0x04	; 4
    207e:	40 e0       	ldi	r20, 0x00	; 0
    2080:	0e 94 b6 07 	call	0xf6c	; 0xf6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	65 e0       	ldi	r22, 0x05	; 5
    2088:	40 e0       	ldi	r20, 0x00	; 0
    208a:	0e 94 b6 07 	call	0xf6c	; 0xf6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	66 e0       	ldi	r22, 0x06	; 6
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	0e 94 b6 07 	call	0xf6c	; 0xf6c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	67 e0       	ldi	r22, 0x07	; 7
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    20a2:	1f 86       	std	Y+15, r1	; 0x0f
    20a4:	ab c0       	rjmp	.+342    	; 0x21fc <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	6f 85       	ldd	r22, Y+15	; 0x0f
    20aa:	41 e0       	ldi	r20, 0x01	; 1
    20ac:	0e 94 b6 07 	call	0xf6c	; 0xf6c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	6f 85       	ldd	r22, Y+15	; 0x0f
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	0e 94 a1 08 	call	0x1142	; 0x1142 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    20ba:	18 8a       	std	Y+16, r1	; 0x10
    20bc:	22 c0       	rjmp	.+68     	; 0x2102 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    20be:	88 89       	ldd	r24, Y+16	; 0x10
    20c0:	98 2f       	mov	r25, r24
    20c2:	9c 5f       	subi	r25, 0xFC	; 252
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	69 2f       	mov	r22, r25
    20c8:	0e 94 8c 09 	call	0x1318	; 0x1318 <GPIO_readPin>
    20cc:	88 23       	and	r24, r24
    20ce:	b1 f4       	brne	.+44     	; 0x20fc <KEYPAD_getPressedKey+0xbe>
#endif
#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
					return ((row*KEYPAD_NUM_COLS)+col+1);
#else
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    20d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d2:	88 2f       	mov	r24, r24
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	98 2f       	mov	r25, r24
    20e0:	88 89       	ldd	r24, Y+16	; 0x10
    20e2:	89 0f       	add	r24, r25
    20e4:	8f 5f       	subi	r24, 0xFF	; 255
    20e6:	0e 94 03 11 	call	0x2206	; 0x2206 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    20ea:	60 96       	adiw	r28, 0x10	; 16
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    20fc:	88 89       	ldd	r24, Y+16	; 0x10
    20fe:	8f 5f       	subi	r24, 0xFF	; 255
    2100:	88 8b       	std	Y+16, r24	; 0x10
    2102:	88 89       	ldd	r24, Y+16	; 0x10
    2104:	84 30       	cpi	r24, 0x04	; 4
    2106:	d8 f2       	brcs	.-74     	; 0x20be <KEYPAD_getPressedKey+0x80>
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#endif
#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	6f 85       	ldd	r22, Y+15	; 0x0f
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <GPIO_setupPinDirection>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	a0 ea       	ldi	r26, 0xA0	; 160
    2118:	b0 e4       	ldi	r27, 0x40	; 64
    211a:	8b 87       	std	Y+11, r24	; 0x0b
    211c:	9c 87       	std	Y+12, r25	; 0x0c
    211e:	ad 87       	std	Y+13, r26	; 0x0d
    2120:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2122:	6b 85       	ldd	r22, Y+11	; 0x0b
    2124:	7c 85       	ldd	r23, Y+12	; 0x0c
    2126:	8d 85       	ldd	r24, Y+13	; 0x0d
    2128:	9e 85       	ldd	r25, Y+14	; 0x0e
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a ef       	ldi	r20, 0xFA	; 250
    2130:	54 e4       	ldi	r21, 0x44	; 68
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8f 83       	std	Y+7, r24	; 0x07
    213c:	98 87       	std	Y+8, r25	; 0x08
    213e:	a9 87       	std	Y+9, r26	; 0x09
    2140:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2142:	6f 81       	ldd	r22, Y+7	; 0x07
    2144:	78 85       	ldd	r23, Y+8	; 0x08
    2146:	89 85       	ldd	r24, Y+9	; 0x09
    2148:	9a 85       	ldd	r25, Y+10	; 0x0a
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e8       	ldi	r20, 0x80	; 128
    2150:	5f e3       	ldi	r21, 0x3F	; 63
    2152:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2156:	88 23       	and	r24, r24
    2158:	2c f4       	brge	.+10     	; 0x2164 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9e 83       	std	Y+6, r25	; 0x06
    2160:	8d 83       	std	Y+5, r24	; 0x05
    2162:	3f c0       	rjmp	.+126    	; 0x21e2 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2164:	6f 81       	ldd	r22, Y+7	; 0x07
    2166:	78 85       	ldd	r23, Y+8	; 0x08
    2168:	89 85       	ldd	r24, Y+9	; 0x09
    216a:	9a 85       	ldd	r25, Y+10	; 0x0a
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	3f ef       	ldi	r19, 0xFF	; 255
    2170:	4f e7       	ldi	r20, 0x7F	; 127
    2172:	57 e4       	ldi	r21, 0x47	; 71
    2174:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2178:	18 16       	cp	r1, r24
    217a:	4c f5       	brge	.+82     	; 0x21ce <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217c:	6b 85       	ldd	r22, Y+11	; 0x0b
    217e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2180:	8d 85       	ldd	r24, Y+13	; 0x0d
    2182:	9e 85       	ldd	r25, Y+14	; 0x0e
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9e 83       	std	Y+6, r25	; 0x06
    21a2:	8d 83       	std	Y+5, r24	; 0x05
    21a4:	0f c0       	rjmp	.+30     	; 0x21c4 <KEYPAD_getPressedKey+0x186>
    21a6:	88 ec       	ldi	r24, 0xC8	; 200
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	9c 81       	ldd	r25, Y+4	; 0x04
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <KEYPAD_getPressedKey+0x174>
    21b6:	9c 83       	std	Y+4, r25	; 0x04
    21b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	9e 81       	ldd	r25, Y+6	; 0x06
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	9e 81       	ldd	r25, Y+6	; 0x06
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	69 f7       	brne	.-38     	; 0x21a6 <KEYPAD_getPressedKey+0x168>
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ce:	6f 81       	ldd	r22, Y+7	; 0x07
    21d0:	78 85       	ldd	r23, Y+8	; 0x08
    21d2:	89 85       	ldd	r24, Y+9	; 0x09
    21d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	9e 81       	ldd	r25, Y+6	; 0x06
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	9a 81       	ldd	r25, Y+2	; 0x02
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <KEYPAD_getPressedKey+0x1b0>
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    21f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f8:	8f 5f       	subi	r24, 0xFF	; 255
    21fa:	8f 87       	std	Y+15, r24	; 0x0f
    21fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21fe:	84 30       	cpi	r24, 0x04	; 4
    2200:	08 f4       	brcc	.+2      	; 0x2204 <KEYPAD_getPressedKey+0x1c6>
    2202:	51 cf       	rjmp	.-350    	; 0x20a6 <KEYPAD_getPressedKey+0x68>
    2204:	4e cf       	rjmp	.-356    	; 0x20a2 <KEYPAD_getPressedKey+0x64>

00002206 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	00 d0       	rcall	.+0      	; 0x220c <KEYPAD_4x4_adjustKeyNumber+0x6>
    220c:	00 d0       	rcall	.+0      	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x8>
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2214:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	3c 83       	std	Y+4, r19	; 0x04
    221e:	2b 83       	std	Y+3, r18	; 0x03
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	9c 81       	ldd	r25, Y+4	; 0x04
    2224:	88 30       	cpi	r24, 0x08	; 8
    2226:	91 05       	cpc	r25, r1
    2228:	09 f4       	brne	.+2      	; 0x222c <KEYPAD_4x4_adjustKeyNumber+0x26>
    222a:	70 c0       	rjmp	.+224    	; 0x230c <KEYPAD_4x4_adjustKeyNumber+0x106>
    222c:	2b 81       	ldd	r18, Y+3	; 0x03
    222e:	3c 81       	ldd	r19, Y+4	; 0x04
    2230:	29 30       	cpi	r18, 0x09	; 9
    2232:	31 05       	cpc	r19, r1
    2234:	5c f5       	brge	.+86     	; 0x228c <KEYPAD_4x4_adjustKeyNumber+0x86>
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	9c 81       	ldd	r25, Y+4	; 0x04
    223a:	84 30       	cpi	r24, 0x04	; 4
    223c:	91 05       	cpc	r25, r1
    223e:	09 f4       	brne	.+2      	; 0x2242 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2240:	59 c0       	rjmp	.+178    	; 0x22f4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2242:	2b 81       	ldd	r18, Y+3	; 0x03
    2244:	3c 81       	ldd	r19, Y+4	; 0x04
    2246:	25 30       	cpi	r18, 0x05	; 5
    2248:	31 05       	cpc	r19, r1
    224a:	9c f4       	brge	.+38     	; 0x2272 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
    2250:	82 30       	cpi	r24, 0x02	; 2
    2252:	91 05       	cpc	r25, r1
    2254:	09 f4       	brne	.+2      	; 0x2258 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2256:	48 c0       	rjmp	.+144    	; 0x22e8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2258:	2b 81       	ldd	r18, Y+3	; 0x03
    225a:	3c 81       	ldd	r19, Y+4	; 0x04
    225c:	23 30       	cpi	r18, 0x03	; 3
    225e:	31 05       	cpc	r19, r1
    2260:	0c f0       	brlt	.+2      	; 0x2264 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2262:	45 c0       	rjmp	.+138    	; 0x22ee <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	9c 81       	ldd	r25, Y+4	; 0x04
    2268:	81 30       	cpi	r24, 0x01	; 1
    226a:	91 05       	cpc	r25, r1
    226c:	09 f4       	brne	.+2      	; 0x2270 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    226e:	39 c0       	rjmp	.+114    	; 0x22e2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2270:	67 c0       	rjmp	.+206    	; 0x2340 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2272:	2b 81       	ldd	r18, Y+3	; 0x03
    2274:	3c 81       	ldd	r19, Y+4	; 0x04
    2276:	26 30       	cpi	r18, 0x06	; 6
    2278:	31 05       	cpc	r19, r1
    227a:	09 f4       	brne	.+2      	; 0x227e <KEYPAD_4x4_adjustKeyNumber+0x78>
    227c:	41 c0       	rjmp	.+130    	; 0x2300 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	87 30       	cpi	r24, 0x07	; 7
    2284:	91 05       	cpc	r25, r1
    2286:	0c f0       	brlt	.+2      	; 0x228a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2288:	3e c0       	rjmp	.+124    	; 0x2306 <KEYPAD_4x4_adjustKeyNumber+0x100>
    228a:	37 c0       	rjmp	.+110    	; 0x22fa <KEYPAD_4x4_adjustKeyNumber+0xf4>
    228c:	2b 81       	ldd	r18, Y+3	; 0x03
    228e:	3c 81       	ldd	r19, Y+4	; 0x04
    2290:	2c 30       	cpi	r18, 0x0C	; 12
    2292:	31 05       	cpc	r19, r1
    2294:	09 f4       	brne	.+2      	; 0x2298 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2296:	46 c0       	rjmp	.+140    	; 0x2324 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	9c 81       	ldd	r25, Y+4	; 0x04
    229c:	8d 30       	cpi	r24, 0x0D	; 13
    229e:	91 05       	cpc	r25, r1
    22a0:	5c f4       	brge	.+22     	; 0x22b8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    22a2:	2b 81       	ldd	r18, Y+3	; 0x03
    22a4:	3c 81       	ldd	r19, Y+4	; 0x04
    22a6:	2a 30       	cpi	r18, 0x0A	; 10
    22a8:	31 05       	cpc	r19, r1
    22aa:	b1 f1       	breq	.+108    	; 0x2318 <KEYPAD_4x4_adjustKeyNumber+0x112>
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	9c 81       	ldd	r25, Y+4	; 0x04
    22b0:	8b 30       	cpi	r24, 0x0B	; 11
    22b2:	91 05       	cpc	r25, r1
    22b4:	a4 f5       	brge	.+104    	; 0x231e <KEYPAD_4x4_adjustKeyNumber+0x118>
    22b6:	2d c0       	rjmp	.+90     	; 0x2312 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    22b8:	2b 81       	ldd	r18, Y+3	; 0x03
    22ba:	3c 81       	ldd	r19, Y+4	; 0x04
    22bc:	2e 30       	cpi	r18, 0x0E	; 14
    22be:	31 05       	cpc	r19, r1
    22c0:	b9 f1       	breq	.+110    	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	9c 81       	ldd	r25, Y+4	; 0x04
    22c6:	8e 30       	cpi	r24, 0x0E	; 14
    22c8:	91 05       	cpc	r25, r1
    22ca:	7c f1       	brlt	.+94     	; 0x232a <KEYPAD_4x4_adjustKeyNumber+0x124>
    22cc:	2b 81       	ldd	r18, Y+3	; 0x03
    22ce:	3c 81       	ldd	r19, Y+4	; 0x04
    22d0:	2f 30       	cpi	r18, 0x0F	; 15
    22d2:	31 05       	cpc	r19, r1
    22d4:	79 f1       	breq	.+94     	; 0x2334 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	9c 81       	ldd	r25, Y+4	; 0x04
    22da:	80 31       	cpi	r24, 0x10	; 16
    22dc:	91 05       	cpc	r25, r1
    22de:	69 f1       	breq	.+90     	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x134>
    22e0:	2f c0       	rjmp	.+94     	; 0x2340 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1: keypad_button = 7;
    22e2:	87 e0       	ldi	r24, 0x07	; 7
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	2e c0       	rjmp	.+92     	; 0x2344 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 2: keypad_button = 8;
    22e8:	88 e0       	ldi	r24, 0x08	; 8
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	2b c0       	rjmp	.+86     	; 0x2344 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 3: keypad_button = 9;
    22ee:	89 e0       	ldi	r24, 0x09	; 9
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	28 c0       	rjmp	.+80     	; 0x2344 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 4: keypad_button = '%'; // ASCII Code of %
    22f4:	85 e2       	ldi	r24, 0x25	; 37
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	25 c0       	rjmp	.+74     	; 0x2344 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 5: keypad_button = 4;
    22fa:	84 e0       	ldi	r24, 0x04	; 4
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	22 c0       	rjmp	.+68     	; 0x2344 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 6: keypad_button = 5;
    2300:	85 e0       	ldi	r24, 0x05	; 5
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	1f c0       	rjmp	.+62     	; 0x2344 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 7: keypad_button = 6;
    2306:	86 e0       	ldi	r24, 0x06	; 6
    2308:	89 83       	std	Y+1, r24	; 0x01
    230a:	1c c0       	rjmp	.+56     	; 0x2344 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 8: keypad_button = '*'; /* ASCII Code of '*' */
    230c:	8a e2       	ldi	r24, 0x2A	; 42
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	19 c0       	rjmp	.+50     	; 0x2344 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 9: keypad_button = 1;
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	89 83       	std	Y+1, r24	; 0x01
    2316:	16 c0       	rjmp	.+44     	; 0x2344 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 10: keypad_button = 2;
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	13 c0       	rjmp	.+38     	; 0x2344 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 11: keypad_button = 3;
    231e:	83 e0       	ldi	r24, 0x03	; 3
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	10 c0       	rjmp	.+32     	; 0x2344 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2324:	8d e2       	ldi	r24, 0x2D	; 45
    2326:	89 83       	std	Y+1, r24	; 0x01
    2328:	0d c0       	rjmp	.+26     	; 0x2344 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 13: keypad_button = 13;  /* ASCII of Enter */
    232a:	8d e0       	ldi	r24, 0x0D	; 13
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	0a c0       	rjmp	.+20     	; 0x2344 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 14: keypad_button = 0;
    2330:	19 82       	std	Y+1, r1	; 0x01
    2332:	08 c0       	rjmp	.+16     	; 0x2344 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 15: keypad_button = '='; /* ASCII Code of '=' */
    2334:	8d e3       	ldi	r24, 0x3D	; 61
    2336:	89 83       	std	Y+1, r24	; 0x01
    2338:	05 c0       	rjmp	.+10     	; 0x2344 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 16: keypad_button = '+'; /* ASCII Code of '+' */
    233a:	8b e2       	ldi	r24, 0x2B	; 43
    233c:	89 83       	std	Y+1, r24	; 0x01
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	default: keypad_button = button_number;
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return keypad_button;
    2344:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <main>:
uint16 g_tick=0;

UART_ConfigType uart_config={BIT_8,DISABLED,ONE_BIT,9600};
Timer1_ConfigType timer1_config= {OVERFLOW,0,0,F_CPU_8};
int main()
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	2e 97       	sbiw	r28, 0x0e	; 14
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    2368:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <LCD_init>
	UART_init(&uart_config);
    236c:	82 e4       	ldi	r24, 0x42	; 66
    236e:	91 e0       	ldi	r25, 0x01	; 1
    2370:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	LCD_clearScreen();
    2374:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"DOOR SECURITY");
    2378:	20 e6       	ldi	r18, 0x60	; 96
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	a9 01       	movw	r20, r18
    2382:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"SYSTEM");
    2386:	2e e6       	ldi	r18, 0x6E	; 110
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	60 e0       	ldi	r22, 0x00	; 0
    238e:	a9 01       	movw	r20, r18
    2390:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayStringRowColumn>
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	aa ef       	ldi	r26, 0xFA	; 250
    239a:	b4 e4       	ldi	r27, 0x44	; 68
    239c:	8b 87       	std	Y+11, r24	; 0x0b
    239e:	9c 87       	std	Y+12, r25	; 0x0c
    23a0:	ad 87       	std	Y+13, r26	; 0x0d
    23a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	4a ef       	ldi	r20, 0xFA	; 250
    23b2:	54 e4       	ldi	r21, 0x44	; 68
    23b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	8f 83       	std	Y+7, r24	; 0x07
    23be:	98 87       	std	Y+8, r25	; 0x08
    23c0:	a9 87       	std	Y+9, r26	; 0x09
    23c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23c4:	6f 81       	ldd	r22, Y+7	; 0x07
    23c6:	78 85       	ldd	r23, Y+8	; 0x08
    23c8:	89 85       	ldd	r24, Y+9	; 0x09
    23ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e8       	ldi	r20, 0x80	; 128
    23d2:	5f e3       	ldi	r21, 0x3F	; 63
    23d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23d8:	88 23       	and	r24, r24
    23da:	2c f4       	brge	.+10     	; 0x23e6 <main+0x92>
		__ticks = 1;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	9e 83       	std	Y+6, r25	; 0x06
    23e2:	8d 83       	std	Y+5, r24	; 0x05
    23e4:	3f c0       	rjmp	.+126    	; 0x2464 <main+0x110>
	else if (__tmp > 65535)
    23e6:	6f 81       	ldd	r22, Y+7	; 0x07
    23e8:	78 85       	ldd	r23, Y+8	; 0x08
    23ea:	89 85       	ldd	r24, Y+9	; 0x09
    23ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	3f ef       	ldi	r19, 0xFF	; 255
    23f2:	4f e7       	ldi	r20, 0x7F	; 127
    23f4:	57 e4       	ldi	r21, 0x47	; 71
    23f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23fa:	18 16       	cp	r1, r24
    23fc:	4c f5       	brge	.+82     	; 0x2450 <main+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2400:	7c 85       	ldd	r23, Y+12	; 0x0c
    2402:	8d 85       	ldd	r24, Y+13	; 0x0d
    2404:	9e 85       	ldd	r25, Y+14	; 0x0e
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e2       	ldi	r20, 0x20	; 32
    240c:	51 e4       	ldi	r21, 0x41	; 65
    240e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	bc 01       	movw	r22, r24
    2418:	cd 01       	movw	r24, r26
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	9e 83       	std	Y+6, r25	; 0x06
    2424:	8d 83       	std	Y+5, r24	; 0x05
    2426:	0f c0       	rjmp	.+30     	; 0x2446 <main+0xf2>
    2428:	88 ec       	ldi	r24, 0xC8	; 200
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	9c 83       	std	Y+4, r25	; 0x04
    242e:	8b 83       	std	Y+3, r24	; 0x03
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	9c 81       	ldd	r25, Y+4	; 0x04
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <main+0xe0>
    2438:	9c 83       	std	Y+4, r25	; 0x04
    243a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243c:	8d 81       	ldd	r24, Y+5	; 0x05
    243e:	9e 81       	ldd	r25, Y+6	; 0x06
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	9e 83       	std	Y+6, r25	; 0x06
    2444:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2446:	8d 81       	ldd	r24, Y+5	; 0x05
    2448:	9e 81       	ldd	r25, Y+6	; 0x06
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	69 f7       	brne	.-38     	; 0x2428 <main+0xd4>
    244e:	14 c0       	rjmp	.+40     	; 0x2478 <main+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2450:	6f 81       	ldd	r22, Y+7	; 0x07
    2452:	78 85       	ldd	r23, Y+8	; 0x08
    2454:	89 85       	ldd	r24, Y+9	; 0x09
    2456:	9a 85       	ldd	r25, Y+10	; 0x0a
    2458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	9e 83       	std	Y+6, r25	; 0x06
    2462:	8d 83       	std	Y+5, r24	; 0x05
    2464:	8d 81       	ldd	r24, Y+5	; 0x05
    2466:	9e 81       	ldd	r25, Y+6	; 0x06
    2468:	9a 83       	std	Y+2, r25	; 0x02
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	9a 81       	ldd	r25, Y+2	; 0x02
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <main+0x11c>
    2474:	9a 83       	std	Y+2, r25	; 0x02
    2476:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	createandStorePassword();
    2478:	0e 94 53 12 	call	0x24a6	; 0x24a6 <createandStorePassword>
	SREG |= (1<<7);
    247c:	af e5       	ldi	r26, 0x5F	; 95
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	ef e5       	ldi	r30, 0x5F	; 95
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	80 68       	ori	r24, 0x80	; 128
    2488:	8c 93       	st	X, r24
	while(1){
		(*ptr_states[g_stateNum])();
    248a:	80 91 5b 01 	lds	r24, 0x015B
    248e:	88 2f       	mov	r24, r24
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	88 0f       	add	r24, r24
    2494:	99 1f       	adc	r25, r25
    2496:	fc 01       	movw	r30, r24
    2498:	e4 5c       	subi	r30, 0xC4	; 196
    249a:	fe 4f       	sbci	r31, 0xFE	; 254
    249c:	01 90       	ld	r0, Z+
    249e:	f0 81       	ld	r31, Z
    24a0:	e0 2d       	mov	r30, r0
    24a2:	09 95       	icall
    24a4:	f2 cf       	rjmp	.-28     	; 0x248a <main+0x136>

000024a6 <createandStorePassword>:
	}
}

void createandStorePassword(void)
{
    24a6:	df 93       	push	r29
    24a8:	cf 93       	push	r28
    24aa:	00 d0       	rcall	.+0      	; 0x24ac <createandStorePassword+0x6>
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
	if(g_flag == 0){
    24b0:	80 91 52 01 	lds	r24, 0x0152
    24b4:	88 23       	and	r24, r24
    24b6:	d9 f4       	brne	.+54     	; 0x24ee <createandStorePassword+0x48>
		LCD_clearScreen();
    24b8:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"ENTER NEW PASS:");
    24bc:	25 e7       	ldi	r18, 0x75	; 117
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	60 e0       	ldi	r22, 0x00	; 0
    24c4:	a9 01       	movw	r20, r18
    24c6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayStringRowColumn>
		LCD_moveCursor(1,0);
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	60 e0       	ldi	r22, 0x00	; 0
    24ce:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <LCD_moveCursor>
		enterPassword(g_password);
    24d2:	83 e5       	ldi	r24, 0x53	; 83
    24d4:	91 e0       	ldi	r25, 0x01	; 1
    24d6:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <enterPassword>
		sendCommand(I_WILL_SEND_A_PASSWORD);
    24da:	83 e0       	ldi	r24, 0x03	; 3
    24dc:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <sendCommand>
		SendPassword(g_password);
    24e0:	83 e5       	ldi	r24, 0x53	; 83
    24e2:	91 e0       	ldi	r25, 0x01	; 1
    24e4:	0e 94 be 12 	call	0x257c	; 0x257c <SendPassword>
		g_flag = 1;
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	80 93 52 01 	sts	0x0152, r24
	}
	if(g_flag == 1)
    24ee:	80 91 52 01 	lds	r24, 0x0152
    24f2:	81 30       	cpi	r24, 0x01	; 1
    24f4:	f1 f4       	brne	.+60     	; 0x2532 <createandStorePassword+0x8c>
	{
		LCD_clearScreen();
    24f6:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"RE-ENTER PASS:");
    24fa:	25 e8       	ldi	r18, 0x85	; 133
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	a9 01       	movw	r20, r18
    2504:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayStringRowColumn>
		LCD_moveCursor(1,0);
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	60 e0       	ldi	r22, 0x00	; 0
    250c:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <LCD_moveCursor>
		g_password[4]=66;		/* any random number greater than 9 to change the original to avoid similarity if user enters same pass but not 5 num */
    2510:	82 e4       	ldi	r24, 0x42	; 66
    2512:	80 93 57 01 	sts	0x0157, r24
		enterPassword(g_password);
    2516:	83 e5       	ldi	r24, 0x53	; 83
    2518:	91 e0       	ldi	r25, 0x01	; 1
    251a:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <enterPassword>
		sendCommand(COMPARE_TWO_PASSWORDS);
    251e:	86 e0       	ldi	r24, 0x06	; 6
    2520:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <sendCommand>
		SendPassword(g_password);
    2524:	83 e5       	ldi	r24, 0x53	; 83
    2526:	91 e0       	ldi	r25, 0x01	; 1
    2528:	0e 94 be 12 	call	0x257c	; 0x257c <SendPassword>
		g_flag = 2;
    252c:	82 e0       	ldi	r24, 0x02	; 2
    252e:	80 93 52 01 	sts	0x0152, r24
	}
	if (g_flag == 2)
    2532:	80 91 52 01 	lds	r24, 0x0152
    2536:	82 30       	cpi	r24, 0x02	; 2
    2538:	e1 f4       	brne	.+56     	; 0x2572 <createandStorePassword+0xcc>
	{
		switch(recieveCommand())
    253a:	0e 94 02 13 	call	0x2604	; 0x2604 <recieveCommand>
    253e:	28 2f       	mov	r18, r24
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	3a 83       	std	Y+2, r19	; 0x02
    2544:	29 83       	std	Y+1, r18	; 0x01
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	9a 81       	ldd	r25, Y+2	; 0x02
    254a:	84 30       	cpi	r24, 0x04	; 4
    254c:	91 05       	cpc	r25, r1
    254e:	31 f0       	breq	.+12     	; 0x255c <createandStorePassword+0xb6>
    2550:	29 81       	ldd	r18, Y+1	; 0x01
    2552:	3a 81       	ldd	r19, Y+2	; 0x02
    2554:	25 30       	cpi	r18, 0x05	; 5
    2556:	31 05       	cpc	r19, r1
    2558:	41 f0       	breq	.+16     	; 0x256a <createandStorePassword+0xc4>
    255a:	0b c0       	rjmp	.+22     	; 0x2572 <createandStorePassword+0xcc>
		{
		case PASSWORDS_MATCH:
			g_flag =3 ;
    255c:	83 e0       	ldi	r24, 0x03	; 3
    255e:	80 93 52 01 	sts	0x0152, r24
			g_stateNum = 1;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	80 93 5b 01 	sts	0x015B, r24
    2568:	04 c0       	rjmp	.+8      	; 0x2572 <createandStorePassword+0xcc>
			break;

		case PASSWORDS_DONOT_MATCH:
			PasswordDONTMATCHScreen();
    256a:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <PasswordDONTMATCHScreen>
			g_flag = 0;
    256e:	10 92 52 01 	sts	0x0152, r1
			break;
		}
	}
}
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <SendPassword>:
void SendPassword(uint8 a_arr[])
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	00 d0       	rcall	.+0      	; 0x2582 <SendPassword+0x6>
    2582:	0f 92       	push	r0
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	9b 83       	std	Y+3, r25	; 0x03
    258a:	8a 83       	std	Y+2, r24	; 0x02
	UART_sendByte(READY);
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	0e 94 1e 06 	call	0xc3c	; 0xc3c <UART_sendByte>
	while(UART_recieveByte() != READY){};
    2592:	0e 94 35 06 	call	0xc6a	; 0xc6a <UART_recieveByte>
    2596:	81 30       	cpi	r24, 0x01	; 1
    2598:	e1 f7       	brne	.-8      	; 0x2592 <SendPassword+0x16>

	for(uint8 i = 0;i < PASSWORD_SIZE;i++)
    259a:	19 82       	std	Y+1, r1	; 0x01
    259c:	0e c0       	rjmp	.+28     	; 0x25ba <SendPassword+0x3e>
	{
		UART_sendByte(a_arr[i]);
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	9b 81       	ldd	r25, Y+3	; 0x03
    25a8:	fc 01       	movw	r30, r24
    25aa:	e2 0f       	add	r30, r18
    25ac:	f3 1f       	adc	r31, r19
    25ae:	80 81       	ld	r24, Z
    25b0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <UART_sendByte>
void SendPassword(uint8 a_arr[])
{
	UART_sendByte(READY);
	while(UART_recieveByte() != READY){};

	for(uint8 i = 0;i < PASSWORD_SIZE;i++)
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	8f 5f       	subi	r24, 0xFF	; 255
    25b8:	89 83       	std	Y+1, r24	; 0x01
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	85 30       	cpi	r24, 0x05	; 5
    25be:	78 f3       	brcs	.-34     	; 0x259e <SendPassword+0x22>
	{
		UART_sendByte(a_arr[i]);
	}
	while(UART_recieveByte() != DONE){};
    25c0:	0e 94 35 06 	call	0xc6a	; 0xc6a <UART_recieveByte>
    25c4:	82 30       	cpi	r24, 0x02	; 2
    25c6:	e1 f7       	brne	.-8      	; 0x25c0 <SendPassword+0x44>
}
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	08 95       	ret

000025d4 <sendCommand>:
void sendCommand(uint8 command)
{
    25d4:	df 93       	push	r29
    25d6:	cf 93       	push	r28
    25d8:	0f 92       	push	r0
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(READY);
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	0e 94 1e 06 	call	0xc3c	; 0xc3c <UART_sendByte>
	while(UART_recieveByte() != READY){};
    25e6:	0e 94 35 06 	call	0xc6a	; 0xc6a <UART_recieveByte>
    25ea:	81 30       	cpi	r24, 0x01	; 1
    25ec:	e1 f7       	brne	.-8      	; 0x25e6 <sendCommand+0x12>
	UART_sendByte(command);
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <UART_sendByte>
	while(UART_recieveByte() != DONE){};
    25f4:	0e 94 35 06 	call	0xc6a	; 0xc6a <UART_recieveByte>
    25f8:	82 30       	cpi	r24, 0x02	; 2
    25fa:	e1 f7       	brne	.-8      	; 0x25f4 <sendCommand+0x20>

}
    25fc:	0f 90       	pop	r0
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret

00002604 <recieveCommand>:
uint8 recieveCommand(void)
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte() != READY){};
    260c:	0e 94 35 06 	call	0xc6a	; 0xc6a <UART_recieveByte>
    2610:	81 30       	cpi	r24, 0x01	; 1
    2612:	e1 f7       	brne	.-8      	; 0x260c <recieveCommand+0x8>
	UART_sendByte(READY);
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	0e 94 1e 06 	call	0xc3c	; 0xc3c <UART_sendByte>
	command = UART_recieveByte();
    261a:	0e 94 35 06 	call	0xc6a	; 0xc6a <UART_recieveByte>
    261e:	80 93 5c 01 	sts	0x015C, r24
	UART_sendByte(DONE);
    2622:	82 e0       	ldi	r24, 0x02	; 2
    2624:	0e 94 1e 06 	call	0xc3c	; 0xc3c <UART_sendByte>
	return command;
    2628:	80 91 5c 01 	lds	r24, 0x015C
}
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	08 95       	ret

00002632 <mainFucntion>:
void mainFucntion(void)
{
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	a2 97       	sbiw	r28, 0x22	; 34
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	f8 94       	cli
    2640:	de bf       	out	0x3e, r29	; 62
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2646:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"(+):OPEN DOOR");
    264a:	24 e9       	ldi	r18, 0x94	; 148
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	60 e0       	ldi	r22, 0x00	; 0
    2652:	a9 01       	movw	r20, r18
    2654:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"(-):CHANGE PASS");
    2658:	22 ea       	ldi	r18, 0xA2	; 162
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	60 e0       	ldi	r22, 0x00	; 0
    2660:	a9 01       	movw	r20, r18
    2662:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayStringRowColumn>
	switch(KEYPAD_getPressedKey())
    2666:	0e 94 1f 10 	call	0x203e	; 0x203e <KEYPAD_getPressedKey>
    266a:	28 2f       	mov	r18, r24
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	3a a3       	std	Y+34, r19	; 0x22
    2670:	29 a3       	std	Y+33, r18	; 0x21
    2672:	89 a1       	ldd	r24, Y+33	; 0x21
    2674:	9a a1       	ldd	r25, Y+34	; 0x22
    2676:	8b 32       	cpi	r24, 0x2B	; 43
    2678:	91 05       	cpc	r25, r1
    267a:	39 f0       	breq	.+14     	; 0x268a <mainFucntion+0x58>
    267c:	29 a1       	ldd	r18, Y+33	; 0x21
    267e:	3a a1       	ldd	r19, Y+34	; 0x22
    2680:	2d 32       	cpi	r18, 0x2D	; 45
    2682:	31 05       	cpc	r19, r1
    2684:	09 f4       	brne	.+2      	; 0x2688 <mainFucntion+0x56>
    2686:	ab c0       	rjmp	.+342    	; 0x27de <mainFucntion+0x1ac>
    2688:	51 c1       	rjmp	.+674    	; 0x292c <mainFucntion+0x2fa>
	{

	case '+':
		LCD_clearScreen();
    268a:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"ENTER YOUR PASS");
    268e:	22 eb       	ldi	r18, 0xB2	; 178
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	60 e0       	ldi	r22, 0x00	; 0
    2696:	a9 01       	movw	r20, r18
    2698:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayStringRowColumn>
		LCD_moveCursor(1,0);
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <LCD_moveCursor>
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	aa ef       	ldi	r26, 0xFA	; 250
    26aa:	b3 e4       	ldi	r27, 0x43	; 67
    26ac:	89 8f       	std	Y+25, r24	; 0x19
    26ae:	9a 8f       	std	Y+26, r25	; 0x1a
    26b0:	ab 8f       	std	Y+27, r26	; 0x1b
    26b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b4:	69 8d       	ldd	r22, Y+25	; 0x19
    26b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	4a ef       	ldi	r20, 0xFA	; 250
    26c2:	54 e4       	ldi	r21, 0x44	; 68
    26c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	8d 8b       	std	Y+21, r24	; 0x15
    26ce:	9e 8b       	std	Y+22, r25	; 0x16
    26d0:	af 8b       	std	Y+23, r26	; 0x17
    26d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26d4:	6d 89       	ldd	r22, Y+21	; 0x15
    26d6:	7e 89       	ldd	r23, Y+22	; 0x16
    26d8:	8f 89       	ldd	r24, Y+23	; 0x17
    26da:	98 8d       	ldd	r25, Y+24	; 0x18
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e8       	ldi	r20, 0x80	; 128
    26e2:	5f e3       	ldi	r21, 0x3F	; 63
    26e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26e8:	88 23       	and	r24, r24
    26ea:	2c f4       	brge	.+10     	; 0x26f6 <mainFucntion+0xc4>
		__ticks = 1;
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	9c 8b       	std	Y+20, r25	; 0x14
    26f2:	8b 8b       	std	Y+19, r24	; 0x13
    26f4:	3f c0       	rjmp	.+126    	; 0x2774 <mainFucntion+0x142>
	else if (__tmp > 65535)
    26f6:	6d 89       	ldd	r22, Y+21	; 0x15
    26f8:	7e 89       	ldd	r23, Y+22	; 0x16
    26fa:	8f 89       	ldd	r24, Y+23	; 0x17
    26fc:	98 8d       	ldd	r25, Y+24	; 0x18
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	3f ef       	ldi	r19, 0xFF	; 255
    2702:	4f e7       	ldi	r20, 0x7F	; 127
    2704:	57 e4       	ldi	r21, 0x47	; 71
    2706:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    270a:	18 16       	cp	r1, r24
    270c:	4c f5       	brge	.+82     	; 0x2760 <mainFucntion+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    270e:	69 8d       	ldd	r22, Y+25	; 0x19
    2710:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2712:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2714:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	40 e2       	ldi	r20, 0x20	; 32
    271c:	51 e4       	ldi	r21, 0x41	; 65
    271e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	bc 01       	movw	r22, r24
    2728:	cd 01       	movw	r24, r26
    272a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	9c 8b       	std	Y+20, r25	; 0x14
    2734:	8b 8b       	std	Y+19, r24	; 0x13
    2736:	0f c0       	rjmp	.+30     	; 0x2756 <mainFucntion+0x124>
    2738:	88 ec       	ldi	r24, 0xC8	; 200
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	9a 8b       	std	Y+18, r25	; 0x12
    273e:	89 8b       	std	Y+17, r24	; 0x11
    2740:	89 89       	ldd	r24, Y+17	; 0x11
    2742:	9a 89       	ldd	r25, Y+18	; 0x12
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	f1 f7       	brne	.-4      	; 0x2744 <mainFucntion+0x112>
    2748:	9a 8b       	std	Y+18, r25	; 0x12
    274a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274c:	8b 89       	ldd	r24, Y+19	; 0x13
    274e:	9c 89       	ldd	r25, Y+20	; 0x14
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	9c 8b       	std	Y+20, r25	; 0x14
    2754:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2756:	8b 89       	ldd	r24, Y+19	; 0x13
    2758:	9c 89       	ldd	r25, Y+20	; 0x14
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	69 f7       	brne	.-38     	; 0x2738 <mainFucntion+0x106>
    275e:	14 c0       	rjmp	.+40     	; 0x2788 <mainFucntion+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2760:	6d 89       	ldd	r22, Y+21	; 0x15
    2762:	7e 89       	ldd	r23, Y+22	; 0x16
    2764:	8f 89       	ldd	r24, Y+23	; 0x17
    2766:	98 8d       	ldd	r25, Y+24	; 0x18
    2768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	9c 8b       	std	Y+20, r25	; 0x14
    2772:	8b 8b       	std	Y+19, r24	; 0x13
    2774:	8b 89       	ldd	r24, Y+19	; 0x13
    2776:	9c 89       	ldd	r25, Y+20	; 0x14
    2778:	98 8b       	std	Y+16, r25	; 0x10
    277a:	8f 87       	std	Y+15, r24	; 0x0f
    277c:	8f 85       	ldd	r24, Y+15	; 0x0f
    277e:	98 89       	ldd	r25, Y+16	; 0x10
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	f1 f7       	brne	.-4      	; 0x2780 <mainFucntion+0x14e>
    2784:	98 8b       	std	Y+16, r25	; 0x10
    2786:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		g_password[4]=50;
    2788:	82 e3       	ldi	r24, 0x32	; 50
    278a:	80 93 57 01 	sts	0x0157, r24
		enterPassword(g_password);
    278e:	83 e5       	ldi	r24, 0x53	; 83
    2790:	91 e0       	ldi	r25, 0x01	; 1
    2792:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <enterPassword>
		sendCommand(IS_PASSWORD_RIGHT);
    2796:	89 e0       	ldi	r24, 0x09	; 9
    2798:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <sendCommand>
		SendPassword(g_password);
    279c:	83 e5       	ldi	r24, 0x53	; 83
    279e:	91 e0       	ldi	r25, 0x01	; 1
    27a0:	0e 94 be 12 	call	0x257c	; 0x257c <SendPassword>
		switch (recieveCommand()){
    27a4:	0e 94 02 13 	call	0x2604	; 0x2604 <recieveCommand>
    27a8:	28 2f       	mov	r18, r24
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	38 a3       	std	Y+32, r19	; 0x20
    27ae:	2f 8f       	std	Y+31, r18	; 0x1f
    27b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27b2:	98 a1       	ldd	r25, Y+32	; 0x20
    27b4:	84 30       	cpi	r24, 0x04	; 4
    27b6:	91 05       	cpc	r25, r1
    27b8:	31 f0       	breq	.+12     	; 0x27c6 <mainFucntion+0x194>
    27ba:	2f 8d       	ldd	r18, Y+31	; 0x1f
    27bc:	38 a1       	ldd	r19, Y+32	; 0x20
    27be:	25 30       	cpi	r18, 0x05	; 5
    27c0:	31 05       	cpc	r19, r1
    27c2:	51 f0       	breq	.+20     	; 0x27d8 <mainFucntion+0x1a6>
    27c4:	b3 c0       	rjmp	.+358    	; 0x292c <mainFucntion+0x2fa>
		case PASSWORDS_MATCH:
			sendCommand(OPEN_DOOR);
    27c6:	88 e0       	ldi	r24, 0x08	; 8
    27c8:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <sendCommand>
			g_stateNum=2;
    27cc:	82 e0       	ldi	r24, 0x02	; 2
    27ce:	80 93 5b 01 	sts	0x015B, r24
			g_wrong=0;
    27d2:	10 92 58 01 	sts	0x0158, r1
    27d6:	aa c0       	rjmp	.+340    	; 0x292c <mainFucntion+0x2fa>
			break;
		case PASSWORDS_DONOT_MATCH:
			wrongPasswordScreen();
    27d8:	0e 94 9f 14 	call	0x293e	; 0x293e <wrongPasswordScreen>
    27dc:	a7 c0       	rjmp	.+334    	; 0x292c <mainFucntion+0x2fa>
			break;
		}
		break;
		case '-':
			LCD_clearScreen();
    27de:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"ENTER YOUR PASS");
    27e2:	22 eb       	ldi	r18, 0xB2	; 178
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	a9 01       	movw	r20, r18
    27ec:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayStringRowColumn>
			LCD_moveCursor(1,0);
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	60 e0       	ldi	r22, 0x00	; 0
    27f4:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <LCD_moveCursor>
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	aa ef       	ldi	r26, 0xFA	; 250
    27fe:	b3 e4       	ldi	r27, 0x43	; 67
    2800:	8b 87       	std	Y+11, r24	; 0x0b
    2802:	9c 87       	std	Y+12, r25	; 0x0c
    2804:	ad 87       	std	Y+13, r26	; 0x0d
    2806:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2808:	6b 85       	ldd	r22, Y+11	; 0x0b
    280a:	7c 85       	ldd	r23, Y+12	; 0x0c
    280c:	8d 85       	ldd	r24, Y+13	; 0x0d
    280e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	4a ef       	ldi	r20, 0xFA	; 250
    2816:	54 e4       	ldi	r21, 0x44	; 68
    2818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	8f 83       	std	Y+7, r24	; 0x07
    2822:	98 87       	std	Y+8, r25	; 0x08
    2824:	a9 87       	std	Y+9, r26	; 0x09
    2826:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2828:	6f 81       	ldd	r22, Y+7	; 0x07
    282a:	78 85       	ldd	r23, Y+8	; 0x08
    282c:	89 85       	ldd	r24, Y+9	; 0x09
    282e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e8       	ldi	r20, 0x80	; 128
    2836:	5f e3       	ldi	r21, 0x3F	; 63
    2838:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    283c:	88 23       	and	r24, r24
    283e:	2c f4       	brge	.+10     	; 0x284a <mainFucntion+0x218>
		__ticks = 1;
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	9e 83       	std	Y+6, r25	; 0x06
    2846:	8d 83       	std	Y+5, r24	; 0x05
    2848:	3f c0       	rjmp	.+126    	; 0x28c8 <mainFucntion+0x296>
	else if (__tmp > 65535)
    284a:	6f 81       	ldd	r22, Y+7	; 0x07
    284c:	78 85       	ldd	r23, Y+8	; 0x08
    284e:	89 85       	ldd	r24, Y+9	; 0x09
    2850:	9a 85       	ldd	r25, Y+10	; 0x0a
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	3f ef       	ldi	r19, 0xFF	; 255
    2856:	4f e7       	ldi	r20, 0x7F	; 127
    2858:	57 e4       	ldi	r21, 0x47	; 71
    285a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    285e:	18 16       	cp	r1, r24
    2860:	4c f5       	brge	.+82     	; 0x28b4 <mainFucntion+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2862:	6b 85       	ldd	r22, Y+11	; 0x0b
    2864:	7c 85       	ldd	r23, Y+12	; 0x0c
    2866:	8d 85       	ldd	r24, Y+13	; 0x0d
    2868:	9e 85       	ldd	r25, Y+14	; 0x0e
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e2       	ldi	r20, 0x20	; 32
    2870:	51 e4       	ldi	r21, 0x41	; 65
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	9e 83       	std	Y+6, r25	; 0x06
    2888:	8d 83       	std	Y+5, r24	; 0x05
    288a:	0f c0       	rjmp	.+30     	; 0x28aa <mainFucntion+0x278>
    288c:	88 ec       	ldi	r24, 0xC8	; 200
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	9c 83       	std	Y+4, r25	; 0x04
    2892:	8b 83       	std	Y+3, r24	; 0x03
    2894:	8b 81       	ldd	r24, Y+3	; 0x03
    2896:	9c 81       	ldd	r25, Y+4	; 0x04
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <mainFucntion+0x266>
    289c:	9c 83       	std	Y+4, r25	; 0x04
    289e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a0:	8d 81       	ldd	r24, Y+5	; 0x05
    28a2:	9e 81       	ldd	r25, Y+6	; 0x06
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	9e 83       	std	Y+6, r25	; 0x06
    28a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28aa:	8d 81       	ldd	r24, Y+5	; 0x05
    28ac:	9e 81       	ldd	r25, Y+6	; 0x06
    28ae:	00 97       	sbiw	r24, 0x00	; 0
    28b0:	69 f7       	brne	.-38     	; 0x288c <mainFucntion+0x25a>
    28b2:	14 c0       	rjmp	.+40     	; 0x28dc <mainFucntion+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b4:	6f 81       	ldd	r22, Y+7	; 0x07
    28b6:	78 85       	ldd	r23, Y+8	; 0x08
    28b8:	89 85       	ldd	r24, Y+9	; 0x09
    28ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    28bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
    28c8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ca:	9e 81       	ldd	r25, Y+6	; 0x06
    28cc:	9a 83       	std	Y+2, r25	; 0x02
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	9a 81       	ldd	r25, Y+2	; 0x02
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <mainFucntion+0x2a2>
    28d8:	9a 83       	std	Y+2, r25	; 0x02
    28da:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			g_password[4]=50;
    28dc:	82 e3       	ldi	r24, 0x32	; 50
    28de:	80 93 57 01 	sts	0x0157, r24
			enterPassword(g_password);
    28e2:	83 e5       	ldi	r24, 0x53	; 83
    28e4:	91 e0       	ldi	r25, 0x01	; 1
    28e6:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <enterPassword>
			sendCommand(IS_PASSWORD_RIGHT);
    28ea:	89 e0       	ldi	r24, 0x09	; 9
    28ec:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <sendCommand>
			SendPassword(g_password);
    28f0:	83 e5       	ldi	r24, 0x53	; 83
    28f2:	91 e0       	ldi	r25, 0x01	; 1
    28f4:	0e 94 be 12 	call	0x257c	; 0x257c <SendPassword>
			switch (recieveCommand())
    28f8:	0e 94 02 13 	call	0x2604	; 0x2604 <recieveCommand>
    28fc:	28 2f       	mov	r18, r24
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	3e 8f       	std	Y+30, r19	; 0x1e
    2902:	2d 8f       	std	Y+29, r18	; 0x1d
    2904:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2906:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2908:	84 30       	cpi	r24, 0x04	; 4
    290a:	91 05       	cpc	r25, r1
    290c:	31 f0       	breq	.+12     	; 0x291a <mainFucntion+0x2e8>
    290e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2910:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2912:	25 30       	cpi	r18, 0x05	; 5
    2914:	31 05       	cpc	r19, r1
    2916:	41 f0       	breq	.+16     	; 0x2928 <mainFucntion+0x2f6>
    2918:	09 c0       	rjmp	.+18     	; 0x292c <mainFucntion+0x2fa>
			{
			case PASSWORDS_MATCH:
				g_flag=0;
    291a:	10 92 52 01 	sts	0x0152, r1
				g_stateNum=0;
    291e:	10 92 5b 01 	sts	0x015B, r1
				g_wrong=0;
    2922:	10 92 58 01 	sts	0x0158, r1
    2926:	02 c0       	rjmp	.+4      	; 0x292c <mainFucntion+0x2fa>
				break;
			case PASSWORDS_DONOT_MATCH:
				wrongPasswordScreen();
    2928:	0e 94 9f 14 	call	0x293e	; 0x293e <wrongPasswordScreen>
				break;
			}
			break;
	}

}
    292c:	a2 96       	adiw	r28, 0x22	; 34
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	de bf       	out	0x3e, r29	; 62
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	cd bf       	out	0x3d, r28	; 61
    2938:	cf 91       	pop	r28
    293a:	df 91       	pop	r29
    293c:	08 95       	ret

0000293e <wrongPasswordScreen>:
void wrongPasswordScreen(void)
{
    293e:	df 93       	push	r29
    2940:	cf 93       	push	r28
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
    2946:	2e 97       	sbiw	r28, 0x0e	; 14
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2952:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_clearScreen>
	LCD_displayStringRowColumn(0,1,"WRONG PASS!!");
    2956:	22 ec       	ldi	r18, 0xC2	; 194
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	61 e0       	ldi	r22, 0x01	; 1
    295e:	a9 01       	movw	r20, r18
    2960:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayStringRowColumn>
	g_wrong++;
    2964:	80 91 58 01 	lds	r24, 0x0158
    2968:	8f 5f       	subi	r24, 0xFF	; 255
    296a:	80 93 58 01 	sts	0x0158, r24
	sendCommand(WRONG_PASSWORD);
    296e:	8a e0       	ldi	r24, 0x0A	; 10
    2970:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <sendCommand>
	if(g_wrong == MAX_WRONG_COUNTER)
    2974:	80 91 58 01 	lds	r24, 0x0158
    2978:	83 30       	cpi	r24, 0x03	; 3
    297a:	19 f5       	brne	.+70     	; 0x29c2 <wrongPasswordScreen+0x84>
	{
		LCD_clearScreen();
    297c:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_clearScreen>
		Timer1_init(&timer1_config);
    2980:	89 e4       	ldi	r24, 0x49	; 73
    2982:	91 e0       	ldi	r25, 0x01	; 1
    2984:	0e 94 16 07 	call	0xe2c	; 0xe2c <Timer1_init>
		Timer1_setCallBack(g_tickCounterAlarm);
    2988:	86 eb       	ldi	r24, 0xB6	; 182
    298a:	97 e1       	ldi	r25, 0x17	; 23
    298c:	0e 94 7e 07 	call	0xefc	; 0xefc <Timer1_setCallBack>
    2990:	07 c0       	rjmp	.+14     	; 0x29a0 <wrongPasswordScreen+0x62>
		while(g_tick<TIMER_TICKS_1MINUTE)
		{
			LCD_displayStringRowColumn(0,0,"SECURITY ALERT");
    2992:	2f ec       	ldi	r18, 0xCF	; 207
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	a9 01       	movw	r20, r18
    299c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayStringRowColumn>
	if(g_wrong == MAX_WRONG_COUNTER)
	{
		LCD_clearScreen();
		Timer1_init(&timer1_config);
		Timer1_setCallBack(g_tickCounterAlarm);
		while(g_tick<TIMER_TICKS_1MINUTE)
    29a0:	80 91 59 01 	lds	r24, 0x0159
    29a4:	90 91 5a 01 	lds	r25, 0x015A
    29a8:	23 e0       	ldi	r18, 0x03	; 3
    29aa:	83 39       	cpi	r24, 0x93	; 147
    29ac:	92 07       	cpc	r25, r18
    29ae:	88 f3       	brcs	.-30     	; 0x2992 <wrongPasswordScreen+0x54>
		{
			LCD_displayStringRowColumn(0,0,"SECURITY ALERT");
		}
		g_tick=0;
    29b0:	10 92 5a 01 	sts	0x015A, r1
    29b4:	10 92 59 01 	sts	0x0159, r1
		g_wrong=0;
    29b8:	10 92 58 01 	sts	0x0158, r1
		g_stateNum=1;
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	80 93 5b 01 	sts	0x015B, r24
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	aa ef       	ldi	r26, 0xFA	; 250
    29c8:	b4 e4       	ldi	r27, 0x44	; 68
    29ca:	8b 87       	std	Y+11, r24	; 0x0b
    29cc:	9c 87       	std	Y+12, r25	; 0x0c
    29ce:	ad 87       	std	Y+13, r26	; 0x0d
    29d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	4a ef       	ldi	r20, 0xFA	; 250
    29e0:	54 e4       	ldi	r21, 0x44	; 68
    29e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	8f 83       	std	Y+7, r24	; 0x07
    29ec:	98 87       	std	Y+8, r25	; 0x08
    29ee:	a9 87       	std	Y+9, r26	; 0x09
    29f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29f2:	6f 81       	ldd	r22, Y+7	; 0x07
    29f4:	78 85       	ldd	r23, Y+8	; 0x08
    29f6:	89 85       	ldd	r24, Y+9	; 0x09
    29f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	40 e8       	ldi	r20, 0x80	; 128
    2a00:	5f e3       	ldi	r21, 0x3F	; 63
    2a02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a06:	88 23       	and	r24, r24
    2a08:	2c f4       	brge	.+10     	; 0x2a14 <wrongPasswordScreen+0xd6>
		__ticks = 1;
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	9e 83       	std	Y+6, r25	; 0x06
    2a10:	8d 83       	std	Y+5, r24	; 0x05
    2a12:	3f c0       	rjmp	.+126    	; 0x2a92 <wrongPasswordScreen+0x154>
	else if (__tmp > 65535)
    2a14:	6f 81       	ldd	r22, Y+7	; 0x07
    2a16:	78 85       	ldd	r23, Y+8	; 0x08
    2a18:	89 85       	ldd	r24, Y+9	; 0x09
    2a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	3f ef       	ldi	r19, 0xFF	; 255
    2a20:	4f e7       	ldi	r20, 0x7F	; 127
    2a22:	57 e4       	ldi	r21, 0x47	; 71
    2a24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a28:	18 16       	cp	r1, r24
    2a2a:	4c f5       	brge	.+82     	; 0x2a7e <wrongPasswordScreen+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e2       	ldi	r20, 0x20	; 32
    2a3a:	51 e4       	ldi	r21, 0x41	; 65
    2a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	bc 01       	movw	r22, r24
    2a46:	cd 01       	movw	r24, r26
    2a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	9e 83       	std	Y+6, r25	; 0x06
    2a52:	8d 83       	std	Y+5, r24	; 0x05
    2a54:	0f c0       	rjmp	.+30     	; 0x2a74 <wrongPasswordScreen+0x136>
    2a56:	88 ec       	ldi	r24, 0xC8	; 200
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	9c 83       	std	Y+4, r25	; 0x04
    2a5c:	8b 83       	std	Y+3, r24	; 0x03
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	9c 81       	ldd	r25, Y+4	; 0x04
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	f1 f7       	brne	.-4      	; 0x2a62 <wrongPasswordScreen+0x124>
    2a66:	9c 83       	std	Y+4, r25	; 0x04
    2a68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	9e 83       	std	Y+6, r25	; 0x06
    2a72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	9e 81       	ldd	r25, Y+6	; 0x06
    2a78:	00 97       	sbiw	r24, 0x00	; 0
    2a7a:	69 f7       	brne	.-38     	; 0x2a56 <wrongPasswordScreen+0x118>
    2a7c:	14 c0       	rjmp	.+40     	; 0x2aa6 <wrongPasswordScreen+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a80:	78 85       	ldd	r23, Y+8	; 0x08
    2a82:	89 85       	ldd	r24, Y+9	; 0x09
    2a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	9e 83       	std	Y+6, r25	; 0x06
    2a90:	8d 83       	std	Y+5, r24	; 0x05
    2a92:	8d 81       	ldd	r24, Y+5	; 0x05
    2a94:	9e 81       	ldd	r25, Y+6	; 0x06
    2a96:	9a 83       	std	Y+2, r25	; 0x02
    2a98:	89 83       	std	Y+1, r24	; 0x01
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <wrongPasswordScreen+0x160>
    2aa2:	9a 83       	std	Y+2, r25	; 0x02
    2aa4:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(2000);

}
    2aa6:	2e 96       	adiw	r28, 0x0e	; 14
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <enterPassword>:
void enterPassword(uint8 x[])
{
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	6f 97       	sbiw	r28, 0x1f	; 31
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	de bf       	out	0x3e, r29	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	cd bf       	out	0x3d, r28	; 61
    2acc:	9f 8f       	std	Y+31, r25	; 0x1f
    2ace:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 i=0;
    2ad0:	1d 8e       	std	Y+29, r1	; 0x1d
	while (1)
	{
		g_key=KEYPAD_getPressedKey();
    2ad2:	0e 94 1f 10 	call	0x203e	; 0x203e <KEYPAD_getPressedKey>
    2ad6:	80 93 5d 01 	sts	0x015D, r24
    2ada:	8e c0       	rjmp	.+284    	; 0x2bf8 <enterPassword+0x140>
		while(g_key != '=')
		{
			g_key=KEYPAD_getPressedKey();
    2adc:	0e 94 1f 10 	call	0x203e	; 0x203e <KEYPAD_getPressedKey>
    2ae0:	80 93 5d 01 	sts	0x015D, r24
			if(g_key>= 0 && g_key<= 9)
    2ae4:	80 91 5d 01 	lds	r24, 0x015D
    2ae8:	8a 30       	cpi	r24, 0x0A	; 10
    2aea:	a0 f4       	brcc	.+40     	; 0x2b14 <enterPassword+0x5c>
			{
				if(i < PASSWORD_SIZE)
    2aec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aee:	85 30       	cpi	r24, 0x05	; 5
    2af0:	88 f4       	brcc	.+34     	; 0x2b14 <enterPassword+0x5c>
				{
					x[i]=g_key;
    2af2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2af4:	28 2f       	mov	r18, r24
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2afa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2afc:	fc 01       	movw	r30, r24
    2afe:	e2 0f       	add	r30, r18
    2b00:	f3 1f       	adc	r31, r19
    2b02:	80 91 5d 01 	lds	r24, 0x015D
    2b06:	80 83       	st	Z, r24
					LCD_displayCharacter('*');
    2b08:	8a e2       	ldi	r24, 0x2A	; 42
    2b0a:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <LCD_displayCharacter>
					i++;
    2b0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b10:	8f 5f       	subi	r24, 0xFF	; 255
    2b12:	8d 8f       	std	Y+29, r24	; 0x1d
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	aa ef       	ldi	r26, 0xFA	; 250
    2b1a:	b3 e4       	ldi	r27, 0x43	; 67
    2b1c:	89 8f       	std	Y+25, r24	; 0x19
    2b1e:	9a 8f       	std	Y+26, r25	; 0x1a
    2b20:	ab 8f       	std	Y+27, r26	; 0x1b
    2b22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b24:	69 8d       	ldd	r22, Y+25	; 0x19
    2b26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	4a ef       	ldi	r20, 0xFA	; 250
    2b32:	54 e4       	ldi	r21, 0x44	; 68
    2b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	8d 8b       	std	Y+21, r24	; 0x15
    2b3e:	9e 8b       	std	Y+22, r25	; 0x16
    2b40:	af 8b       	std	Y+23, r26	; 0x17
    2b42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b44:	6d 89       	ldd	r22, Y+21	; 0x15
    2b46:	7e 89       	ldd	r23, Y+22	; 0x16
    2b48:	8f 89       	ldd	r24, Y+23	; 0x17
    2b4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	40 e8       	ldi	r20, 0x80	; 128
    2b52:	5f e3       	ldi	r21, 0x3F	; 63
    2b54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b58:	88 23       	and	r24, r24
    2b5a:	2c f4       	brge	.+10     	; 0x2b66 <enterPassword+0xae>
		__ticks = 1;
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	9c 8b       	std	Y+20, r25	; 0x14
    2b62:	8b 8b       	std	Y+19, r24	; 0x13
    2b64:	3f c0       	rjmp	.+126    	; 0x2be4 <enterPassword+0x12c>
	else if (__tmp > 65535)
    2b66:	6d 89       	ldd	r22, Y+21	; 0x15
    2b68:	7e 89       	ldd	r23, Y+22	; 0x16
    2b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	3f ef       	ldi	r19, 0xFF	; 255
    2b72:	4f e7       	ldi	r20, 0x7F	; 127
    2b74:	57 e4       	ldi	r21, 0x47	; 71
    2b76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b7a:	18 16       	cp	r1, r24
    2b7c:	4c f5       	brge	.+82     	; 0x2bd0 <enterPassword+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b7e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	40 e2       	ldi	r20, 0x20	; 32
    2b8c:	51 e4       	ldi	r21, 0x41	; 65
    2b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	bc 01       	movw	r22, r24
    2b98:	cd 01       	movw	r24, r26
    2b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	9c 8b       	std	Y+20, r25	; 0x14
    2ba4:	8b 8b       	std	Y+19, r24	; 0x13
    2ba6:	0f c0       	rjmp	.+30     	; 0x2bc6 <enterPassword+0x10e>
    2ba8:	88 ec       	ldi	r24, 0xC8	; 200
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	9a 8b       	std	Y+18, r25	; 0x12
    2bae:	89 8b       	std	Y+17, r24	; 0x11
    2bb0:	89 89       	ldd	r24, Y+17	; 0x11
    2bb2:	9a 89       	ldd	r25, Y+18	; 0x12
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	f1 f7       	brne	.-4      	; 0x2bb4 <enterPassword+0xfc>
    2bb8:	9a 8b       	std	Y+18, r25	; 0x12
    2bba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bbc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bbe:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc0:	01 97       	sbiw	r24, 0x01	; 1
    2bc2:	9c 8b       	std	Y+20, r25	; 0x14
    2bc4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bca:	00 97       	sbiw	r24, 0x00	; 0
    2bcc:	69 f7       	brne	.-38     	; 0x2ba8 <enterPassword+0xf0>
    2bce:	14 c0       	rjmp	.+40     	; 0x2bf8 <enterPassword+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd0:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd2:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd4:	8f 89       	ldd	r24, Y+23	; 0x17
    2bd6:	98 8d       	ldd	r25, Y+24	; 0x18
    2bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	9c 8b       	std	Y+20, r25	; 0x14
    2be2:	8b 8b       	std	Y+19, r24	; 0x13
    2be4:	8b 89       	ldd	r24, Y+19	; 0x13
    2be6:	9c 89       	ldd	r25, Y+20	; 0x14
    2be8:	98 8b       	std	Y+16, r25	; 0x10
    2bea:	8f 87       	std	Y+15, r24	; 0x0f
    2bec:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bee:	98 89       	ldd	r25, Y+16	; 0x10
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	f1 f7       	brne	.-4      	; 0x2bf0 <enterPassword+0x138>
    2bf4:	98 8b       	std	Y+16, r25	; 0x10
    2bf6:	8f 87       	std	Y+15, r24	; 0x0f
{
	uint8 i=0;
	while (1)
	{
		g_key=KEYPAD_getPressedKey();
		while(g_key != '=')
    2bf8:	80 91 5d 01 	lds	r24, 0x015D
    2bfc:	8d 33       	cpi	r24, 0x3D	; 61
    2bfe:	09 f0       	breq	.+2      	; 0x2c02 <enterPassword+0x14a>
    2c00:	6d cf       	rjmp	.-294    	; 0x2adc <enterPassword+0x24>
					i++;
				}
			}
			_delay_ms(500);
		}
		if (i < PASSWORD_SIZE  && g_flag == 0)
    2c02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c04:	85 30       	cpi	r24, 0x05	; 5
    2c06:	08 f0       	brcs	.+2      	; 0x2c0a <enterPassword+0x152>
    2c08:	96 c0       	rjmp	.+300    	; 0x2d36 <enterPassword+0x27e>
    2c0a:	80 91 52 01 	lds	r24, 0x0152
    2c0e:	88 23       	and	r24, r24
    2c10:	09 f0       	breq	.+2      	; 0x2c14 <enterPassword+0x15c>
    2c12:	91 c0       	rjmp	.+290    	; 0x2d36 <enterPassword+0x27e>
		{
			LCD_clearScreen();
    2c14:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "plz enter FIVE ");
    2c18:	2e ed       	ldi	r18, 0xDE	; 222
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	60 e0       	ldi	r22, 0x00	; 0
    2c20:	a9 01       	movw	r20, r18
    2c22:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "numbers");
    2c26:	2e ee       	ldi	r18, 0xEE	; 238
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	60 e0       	ldi	r22, 0x00	; 0
    2c2e:	a9 01       	movw	r20, r18
    2c30:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayStringRowColumn>
			i=0;
    2c34:	1d 8e       	std	Y+29, r1	; 0x1d
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	90 e8       	ldi	r25, 0x80	; 128
    2c3a:	ab e3       	ldi	r26, 0x3B	; 59
    2c3c:	b5 e4       	ldi	r27, 0x45	; 69
    2c3e:	8b 87       	std	Y+11, r24	; 0x0b
    2c40:	9c 87       	std	Y+12, r25	; 0x0c
    2c42:	ad 87       	std	Y+13, r26	; 0x0d
    2c44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	4a ef       	ldi	r20, 0xFA	; 250
    2c54:	54 e4       	ldi	r21, 0x44	; 68
    2c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	8f 83       	std	Y+7, r24	; 0x07
    2c60:	98 87       	std	Y+8, r25	; 0x08
    2c62:	a9 87       	std	Y+9, r26	; 0x09
    2c64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c66:	6f 81       	ldd	r22, Y+7	; 0x07
    2c68:	78 85       	ldd	r23, Y+8	; 0x08
    2c6a:	89 85       	ldd	r24, Y+9	; 0x09
    2c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	40 e8       	ldi	r20, 0x80	; 128
    2c74:	5f e3       	ldi	r21, 0x3F	; 63
    2c76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c7a:	88 23       	and	r24, r24
    2c7c:	2c f4       	brge	.+10     	; 0x2c88 <enterPassword+0x1d0>
		__ticks = 1;
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	9e 83       	std	Y+6, r25	; 0x06
    2c84:	8d 83       	std	Y+5, r24	; 0x05
    2c86:	3f c0       	rjmp	.+126    	; 0x2d06 <enterPassword+0x24e>
	else if (__tmp > 65535)
    2c88:	6f 81       	ldd	r22, Y+7	; 0x07
    2c8a:	78 85       	ldd	r23, Y+8	; 0x08
    2c8c:	89 85       	ldd	r24, Y+9	; 0x09
    2c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	3f ef       	ldi	r19, 0xFF	; 255
    2c94:	4f e7       	ldi	r20, 0x7F	; 127
    2c96:	57 e4       	ldi	r21, 0x47	; 71
    2c98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c9c:	18 16       	cp	r1, r24
    2c9e:	4c f5       	brge	.+82     	; 0x2cf2 <enterPassword+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e2       	ldi	r20, 0x20	; 32
    2cae:	51 e4       	ldi	r21, 0x41	; 65
    2cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	bc 01       	movw	r22, r24
    2cba:	cd 01       	movw	r24, r26
    2cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	9e 83       	std	Y+6, r25	; 0x06
    2cc6:	8d 83       	std	Y+5, r24	; 0x05
    2cc8:	0f c0       	rjmp	.+30     	; 0x2ce8 <enterPassword+0x230>
    2cca:	88 ec       	ldi	r24, 0xC8	; 200
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	9c 83       	std	Y+4, r25	; 0x04
    2cd0:	8b 83       	std	Y+3, r24	; 0x03
    2cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <enterPassword+0x21e>
    2cda:	9c 83       	std	Y+4, r25	; 0x04
    2cdc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cde:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	9e 83       	std	Y+6, r25	; 0x06
    2ce6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cea:	9e 81       	ldd	r25, Y+6	; 0x06
    2cec:	00 97       	sbiw	r24, 0x00	; 0
    2cee:	69 f7       	brne	.-38     	; 0x2cca <enterPassword+0x212>
    2cf0:	14 c0       	rjmp	.+40     	; 0x2d1a <enterPassword+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf4:	78 85       	ldd	r23, Y+8	; 0x08
    2cf6:	89 85       	ldd	r24, Y+9	; 0x09
    2cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	9e 83       	std	Y+6, r25	; 0x06
    2d04:	8d 83       	std	Y+5, r24	; 0x05
    2d06:	8d 81       	ldd	r24, Y+5	; 0x05
    2d08:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0a:	9a 83       	std	Y+2, r25	; 0x02
    2d0c:	89 83       	std	Y+1, r24	; 0x01
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	9a 81       	ldd	r25, Y+2	; 0x02
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	f1 f7       	brne	.-4      	; 0x2d12 <enterPassword+0x25a>
    2d16:	9a 83       	std	Y+2, r25	; 0x02
    2d18:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(3000);
			LCD_clearScreen();
    2d1a:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "ENTER NEW PASS:");
    2d1e:	25 e7       	ldi	r18, 0x75	; 117
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	60 e0       	ldi	r22, 0x00	; 0
    2d26:	a9 01       	movw	r20, r18
    2d28:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 0);
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	60 e0       	ldi	r22, 0x00	; 0
    2d30:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <LCD_moveCursor>
    2d34:	ce ce       	rjmp	.-612    	; 0x2ad2 <enterPassword+0x1a>
		}
		else
			break;
	}

}
    2d36:	6f 96       	adiw	r28, 0x1f	; 31
    2d38:	0f b6       	in	r0, 0x3f	; 63
    2d3a:	f8 94       	cli
    2d3c:	de bf       	out	0x3e, r29	; 62
    2d3e:	0f be       	out	0x3f, r0	; 63
    2d40:	cd bf       	out	0x3d, r28	; 61
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	08 95       	ret

00002d48 <PasswordDONTMATCHScreen>:
void PasswordDONTMATCHScreen(void)
{
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    2d50:	2e 97       	sbiw	r28, 0x0e	; 14
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	f8 94       	cli
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2d5c:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"PASS DONT MATCH..");
    2d60:	26 ef       	ldi	r18, 0xF6	; 246
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	60 e0       	ldi	r22, 0x00	; 0
    2d68:	a9 01       	movw	r20, r18
    2d6a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayStringRowColumn>
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	90 e8       	ldi	r25, 0x80	; 128
    2d72:	ab e3       	ldi	r26, 0x3B	; 59
    2d74:	b5 e4       	ldi	r27, 0x45	; 69
    2d76:	8b 87       	std	Y+11, r24	; 0x0b
    2d78:	9c 87       	std	Y+12, r25	; 0x0c
    2d7a:	ad 87       	std	Y+13, r26	; 0x0d
    2d7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	4a ef       	ldi	r20, 0xFA	; 250
    2d8c:	54 e4       	ldi	r21, 0x44	; 68
    2d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	8f 83       	std	Y+7, r24	; 0x07
    2d98:	98 87       	std	Y+8, r25	; 0x08
    2d9a:	a9 87       	std	Y+9, r26	; 0x09
    2d9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2da0:	78 85       	ldd	r23, Y+8	; 0x08
    2da2:	89 85       	ldd	r24, Y+9	; 0x09
    2da4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	40 e8       	ldi	r20, 0x80	; 128
    2dac:	5f e3       	ldi	r21, 0x3F	; 63
    2dae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2db2:	88 23       	and	r24, r24
    2db4:	2c f4       	brge	.+10     	; 0x2dc0 <PasswordDONTMATCHScreen+0x78>
		__ticks = 1;
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	9e 83       	std	Y+6, r25	; 0x06
    2dbc:	8d 83       	std	Y+5, r24	; 0x05
    2dbe:	3f c0       	rjmp	.+126    	; 0x2e3e <PasswordDONTMATCHScreen+0xf6>
	else if (__tmp > 65535)
    2dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc2:	78 85       	ldd	r23, Y+8	; 0x08
    2dc4:	89 85       	ldd	r24, Y+9	; 0x09
    2dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	3f ef       	ldi	r19, 0xFF	; 255
    2dcc:	4f e7       	ldi	r20, 0x7F	; 127
    2dce:	57 e4       	ldi	r21, 0x47	; 71
    2dd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dd4:	18 16       	cp	r1, r24
    2dd6:	4c f5       	brge	.+82     	; 0x2e2a <PasswordDONTMATCHScreen+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	40 e2       	ldi	r20, 0x20	; 32
    2de6:	51 e4       	ldi	r21, 0x41	; 65
    2de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	bc 01       	movw	r22, r24
    2df2:	cd 01       	movw	r24, r26
    2df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	9e 83       	std	Y+6, r25	; 0x06
    2dfe:	8d 83       	std	Y+5, r24	; 0x05
    2e00:	0f c0       	rjmp	.+30     	; 0x2e20 <PasswordDONTMATCHScreen+0xd8>
    2e02:	88 ec       	ldi	r24, 0xC8	; 200
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	9c 83       	std	Y+4, r25	; 0x04
    2e08:	8b 83       	std	Y+3, r24	; 0x03
    2e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	f1 f7       	brne	.-4      	; 0x2e0e <PasswordDONTMATCHScreen+0xc6>
    2e12:	9c 83       	std	Y+4, r25	; 0x04
    2e14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e16:	8d 81       	ldd	r24, Y+5	; 0x05
    2e18:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	9e 83       	std	Y+6, r25	; 0x06
    2e1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e20:	8d 81       	ldd	r24, Y+5	; 0x05
    2e22:	9e 81       	ldd	r25, Y+6	; 0x06
    2e24:	00 97       	sbiw	r24, 0x00	; 0
    2e26:	69 f7       	brne	.-38     	; 0x2e02 <PasswordDONTMATCHScreen+0xba>
    2e28:	14 c0       	rjmp	.+40     	; 0x2e52 <PasswordDONTMATCHScreen+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e2c:	78 85       	ldd	r23, Y+8	; 0x08
    2e2e:	89 85       	ldd	r24, Y+9	; 0x09
    2e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	9e 83       	std	Y+6, r25	; 0x06
    2e3c:	8d 83       	std	Y+5, r24	; 0x05
    2e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e40:	9e 81       	ldd	r25, Y+6	; 0x06
    2e42:	9a 83       	std	Y+2, r25	; 0x02
    2e44:	89 83       	std	Y+1, r24	; 0x01
    2e46:	89 81       	ldd	r24, Y+1	; 0x01
    2e48:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4a:	01 97       	sbiw	r24, 0x01	; 1
    2e4c:	f1 f7       	brne	.-4      	; 0x2e4a <PasswordDONTMATCHScreen+0x102>
    2e4e:	9a 83       	std	Y+2, r25	; 0x02
    2e50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);

}
    2e52:	2e 96       	adiw	r28, 0x0e	; 14
    2e54:	0f b6       	in	r0, 0x3f	; 63
    2e56:	f8 94       	cli
    2e58:	de bf       	out	0x3e, r29	; 62
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	cd bf       	out	0x3d, r28	; 61
    2e5e:	cf 91       	pop	r28
    2e60:	df 91       	pop	r29
    2e62:	08 95       	ret

00002e64 <lockingUnlockingScreen>:
void lockingUnlockingScreen(void)
{
    2e64:	df 93       	push	r29
    2e66:	cf 93       	push	r28
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2e6c:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_clearScreen>
	Timer1_init(&timer1_config);
    2e70:	89 e4       	ldi	r24, 0x49	; 73
    2e72:	91 e0       	ldi	r25, 0x01	; 1
    2e74:	0e 94 16 07 	call	0xe2c	; 0xe2c <Timer1_init>
	Timer1_setCallBack(g_tickCounterMotor);
    2e78:	8c e9       	ldi	r24, 0x9C	; 156
    2e7a:	97 e1       	ldi	r25, 0x17	; 23
    2e7c:	0e 94 7e 07 	call	0xefc	; 0xefc <Timer1_setCallBack>
    2e80:	07 c0       	rjmp	.+14     	; 0x2e90 <lockingUnlockingScreen+0x2c>
	while(g_tick < TICKS_15SECS)
	{
		LCD_displayStringRowColumn(0,0,"DOOR UNLOCKING..");
    2e82:	28 e0       	ldi	r18, 0x08	; 8
    2e84:	31 e0       	ldi	r19, 0x01	; 1
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	60 e0       	ldi	r22, 0x00	; 0
    2e8a:	a9 01       	movw	r20, r18
    2e8c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayStringRowColumn>
void lockingUnlockingScreen(void)
{
	LCD_clearScreen();
	Timer1_init(&timer1_config);
	Timer1_setCallBack(g_tickCounterMotor);
	while(g_tick < TICKS_15SECS)
    2e90:	80 91 59 01 	lds	r24, 0x0159
    2e94:	90 91 5a 01 	lds	r25, 0x015A
    2e98:	85 3e       	cpi	r24, 0xE5	; 229
    2e9a:	91 05       	cpc	r25, r1
    2e9c:	90 f3       	brcs	.-28     	; 0x2e82 <lockingUnlockingScreen+0x1e>
	{
		LCD_displayStringRowColumn(0,0,"DOOR UNLOCKING..");
	}
	LCD_clearScreen();
    2e9e:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_clearScreen>
	while(g_tick>=TICKS_15SECS && g_tick<TIMER_TICKS_15SEC_STOP)////delay 3 seconds
    2ea2:	80 91 59 01 	lds	r24, 0x0159
    2ea6:	90 91 5a 01 	lds	r25, 0x015A
    2eaa:	85 3e       	cpi	r24, 0xE5	; 229
    2eac:	91 05       	cpc	r25, r1
    2eae:	40 f0       	brcs	.+16     	; 0x2ec0 <lockingUnlockingScreen+0x5c>
    2eb0:	80 91 59 01 	lds	r24, 0x0159
    2eb4:	90 91 5a 01 	lds	r25, 0x015A
    2eb8:	21 e0       	ldi	r18, 0x01	; 1
    2eba:	82 31       	cpi	r24, 0x12	; 18
    2ebc:	92 07       	cpc	r25, r18
    2ebe:	88 f3       	brcs	.-30     	; 0x2ea2 <lockingUnlockingScreen+0x3e>
	{
	}
	g_tick=0;
    2ec0:	10 92 5a 01 	sts	0x015A, r1
    2ec4:	10 92 59 01 	sts	0x0159, r1
	Timer1_deinit();
    2ec8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <Timer1_deinit>
	Timer1_init(&timer1_config);
    2ecc:	89 e4       	ldi	r24, 0x49	; 73
    2ece:	91 e0       	ldi	r25, 0x01	; 1
    2ed0:	0e 94 16 07 	call	0xe2c	; 0xe2c <Timer1_init>
    2ed4:	07 c0       	rjmp	.+14     	; 0x2ee4 <lockingUnlockingScreen+0x80>
	while(g_tick<TICKS_15SECS)
	{
		LCD_displayStringRowColumn(0,0,"DOOR LOCKING..");
    2ed6:	29 e1       	ldi	r18, 0x19	; 25
    2ed8:	31 e0       	ldi	r19, 0x01	; 1
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	60 e0       	ldi	r22, 0x00	; 0
    2ede:	a9 01       	movw	r20, r18
    2ee0:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayStringRowColumn>
	{
	}
	g_tick=0;
	Timer1_deinit();
	Timer1_init(&timer1_config);
	while(g_tick<TICKS_15SECS)
    2ee4:	80 91 59 01 	lds	r24, 0x0159
    2ee8:	90 91 5a 01 	lds	r25, 0x015A
    2eec:	85 3e       	cpi	r24, 0xE5	; 229
    2eee:	91 05       	cpc	r25, r1
    2ef0:	90 f3       	brcs	.-28     	; 0x2ed6 <lockingUnlockingScreen+0x72>
	{
		LCD_displayStringRowColumn(0,0,"DOOR LOCKING..");
	}
	LCD_clearScreen();
    2ef2:	0e 94 15 10 	call	0x202a	; 0x202a <LCD_clearScreen>
    2ef6:	07 c0       	rjmp	.+14     	; 0x2f06 <lockingUnlockingScreen+0xa2>
	while(g_tick>=TICKS_15SECS && g_tick<TIMER_TICKS_15SEC_STOP)
	{
		LCD_displayStringRowColumn(0,0,"DOOR ClOSED");
    2ef8:	28 e2       	ldi	r18, 0x28	; 40
    2efa:	31 e0       	ldi	r19, 0x01	; 1
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	60 e0       	ldi	r22, 0x00	; 0
    2f00:	a9 01       	movw	r20, r18
    2f02:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayStringRowColumn>
	while(g_tick<TICKS_15SECS)
	{
		LCD_displayStringRowColumn(0,0,"DOOR LOCKING..");
	}
	LCD_clearScreen();
	while(g_tick>=TICKS_15SECS && g_tick<TIMER_TICKS_15SEC_STOP)
    2f06:	80 91 59 01 	lds	r24, 0x0159
    2f0a:	90 91 5a 01 	lds	r25, 0x015A
    2f0e:	85 3e       	cpi	r24, 0xE5	; 229
    2f10:	91 05       	cpc	r25, r1
    2f12:	40 f0       	brcs	.+16     	; 0x2f24 <lockingUnlockingScreen+0xc0>
    2f14:	80 91 59 01 	lds	r24, 0x0159
    2f18:	90 91 5a 01 	lds	r25, 0x015A
    2f1c:	21 e0       	ldi	r18, 0x01	; 1
    2f1e:	82 31       	cpi	r24, 0x12	; 18
    2f20:	92 07       	cpc	r25, r18
    2f22:	50 f3       	brcs	.-44     	; 0x2ef8 <lockingUnlockingScreen+0x94>
	{
		LCD_displayStringRowColumn(0,0,"DOOR ClOSED");
	}
	g_tick=0;
    2f24:	10 92 5a 01 	sts	0x015A, r1
    2f28:	10 92 59 01 	sts	0x0159, r1
	g_stateNum=1;
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	80 93 5b 01 	sts	0x015B, r24
}
    2f32:	cf 91       	pop	r28
    2f34:	df 91       	pop	r29
    2f36:	08 95       	ret

00002f38 <g_tickCounterMotor>:
void g_tickCounterMotor(void)
{
    2f38:	df 93       	push	r29
    2f3a:	cf 93       	push	r28
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    2f40:	80 91 59 01 	lds	r24, 0x0159
    2f44:	90 91 5a 01 	lds	r25, 0x015A
    2f48:	01 96       	adiw	r24, 0x01	; 1
    2f4a:	90 93 5a 01 	sts	0x015A, r25
    2f4e:	80 93 59 01 	sts	0x0159, r24
	if(g_tick==TIMER_TICKS_15SEC_STOP)
    2f52:	80 91 59 01 	lds	r24, 0x0159
    2f56:	90 91 5a 01 	lds	r25, 0x015A
    2f5a:	21 e0       	ldi	r18, 0x01	; 1
    2f5c:	82 31       	cpi	r24, 0x12	; 18
    2f5e:	92 07       	cpc	r25, r18
    2f60:	11 f4       	brne	.+4      	; 0x2f66 <g_tickCounterMotor+0x2e>
	{
		Timer1_deinit();
    2f62:	0e 94 9e 07 	call	0xf3c	; 0xf3c <Timer1_deinit>
	}
}
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	08 95       	ret

00002f6c <g_tickCounterAlarm>:
void g_tickCounterAlarm(void)
{
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    2f74:	80 91 59 01 	lds	r24, 0x0159
    2f78:	90 91 5a 01 	lds	r25, 0x015A
    2f7c:	01 96       	adiw	r24, 0x01	; 1
    2f7e:	90 93 5a 01 	sts	0x015A, r25
    2f82:	80 93 59 01 	sts	0x0159, r24
	if(g_tick==TIMER_TICKS_1MINUTE)
    2f86:	80 91 59 01 	lds	r24, 0x0159
    2f8a:	90 91 5a 01 	lds	r25, 0x015A
    2f8e:	23 e0       	ldi	r18, 0x03	; 3
    2f90:	83 39       	cpi	r24, 0x93	; 147
    2f92:	92 07       	cpc	r25, r18
    2f94:	11 f4       	brne	.+4      	; 0x2f9a <g_tickCounterAlarm+0x2e>
	{
		Timer1_deinit();
    2f96:	0e 94 9e 07 	call	0xf3c	; 0xf3c <Timer1_deinit>
	}
}
    2f9a:	cf 91       	pop	r28
    2f9c:	df 91       	pop	r29
    2f9e:	08 95       	ret

00002fa0 <__udivmodsi4>:
    2fa0:	a1 e2       	ldi	r26, 0x21	; 33
    2fa2:	1a 2e       	mov	r1, r26
    2fa4:	aa 1b       	sub	r26, r26
    2fa6:	bb 1b       	sub	r27, r27
    2fa8:	fd 01       	movw	r30, r26
    2faa:	0d c0       	rjmp	.+26     	; 0x2fc6 <__udivmodsi4_ep>

00002fac <__udivmodsi4_loop>:
    2fac:	aa 1f       	adc	r26, r26
    2fae:	bb 1f       	adc	r27, r27
    2fb0:	ee 1f       	adc	r30, r30
    2fb2:	ff 1f       	adc	r31, r31
    2fb4:	a2 17       	cp	r26, r18
    2fb6:	b3 07       	cpc	r27, r19
    2fb8:	e4 07       	cpc	r30, r20
    2fba:	f5 07       	cpc	r31, r21
    2fbc:	20 f0       	brcs	.+8      	; 0x2fc6 <__udivmodsi4_ep>
    2fbe:	a2 1b       	sub	r26, r18
    2fc0:	b3 0b       	sbc	r27, r19
    2fc2:	e4 0b       	sbc	r30, r20
    2fc4:	f5 0b       	sbc	r31, r21

00002fc6 <__udivmodsi4_ep>:
    2fc6:	66 1f       	adc	r22, r22
    2fc8:	77 1f       	adc	r23, r23
    2fca:	88 1f       	adc	r24, r24
    2fcc:	99 1f       	adc	r25, r25
    2fce:	1a 94       	dec	r1
    2fd0:	69 f7       	brne	.-38     	; 0x2fac <__udivmodsi4_loop>
    2fd2:	60 95       	com	r22
    2fd4:	70 95       	com	r23
    2fd6:	80 95       	com	r24
    2fd8:	90 95       	com	r25
    2fda:	9b 01       	movw	r18, r22
    2fdc:	ac 01       	movw	r20, r24
    2fde:	bd 01       	movw	r22, r26
    2fe0:	cf 01       	movw	r24, r30
    2fe2:	08 95       	ret

00002fe4 <__prologue_saves__>:
    2fe4:	2f 92       	push	r2
    2fe6:	3f 92       	push	r3
    2fe8:	4f 92       	push	r4
    2fea:	5f 92       	push	r5
    2fec:	6f 92       	push	r6
    2fee:	7f 92       	push	r7
    2ff0:	8f 92       	push	r8
    2ff2:	9f 92       	push	r9
    2ff4:	af 92       	push	r10
    2ff6:	bf 92       	push	r11
    2ff8:	cf 92       	push	r12
    2ffa:	df 92       	push	r13
    2ffc:	ef 92       	push	r14
    2ffe:	ff 92       	push	r15
    3000:	0f 93       	push	r16
    3002:	1f 93       	push	r17
    3004:	cf 93       	push	r28
    3006:	df 93       	push	r29
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
    300c:	ca 1b       	sub	r28, r26
    300e:	db 0b       	sbc	r29, r27
    3010:	0f b6       	in	r0, 0x3f	; 63
    3012:	f8 94       	cli
    3014:	de bf       	out	0x3e, r29	; 62
    3016:	0f be       	out	0x3f, r0	; 63
    3018:	cd bf       	out	0x3d, r28	; 61
    301a:	09 94       	ijmp

0000301c <__epilogue_restores__>:
    301c:	2a 88       	ldd	r2, Y+18	; 0x12
    301e:	39 88       	ldd	r3, Y+17	; 0x11
    3020:	48 88       	ldd	r4, Y+16	; 0x10
    3022:	5f 84       	ldd	r5, Y+15	; 0x0f
    3024:	6e 84       	ldd	r6, Y+14	; 0x0e
    3026:	7d 84       	ldd	r7, Y+13	; 0x0d
    3028:	8c 84       	ldd	r8, Y+12	; 0x0c
    302a:	9b 84       	ldd	r9, Y+11	; 0x0b
    302c:	aa 84       	ldd	r10, Y+10	; 0x0a
    302e:	b9 84       	ldd	r11, Y+9	; 0x09
    3030:	c8 84       	ldd	r12, Y+8	; 0x08
    3032:	df 80       	ldd	r13, Y+7	; 0x07
    3034:	ee 80       	ldd	r14, Y+6	; 0x06
    3036:	fd 80       	ldd	r15, Y+5	; 0x05
    3038:	0c 81       	ldd	r16, Y+4	; 0x04
    303a:	1b 81       	ldd	r17, Y+3	; 0x03
    303c:	aa 81       	ldd	r26, Y+2	; 0x02
    303e:	b9 81       	ldd	r27, Y+1	; 0x01
    3040:	ce 0f       	add	r28, r30
    3042:	d1 1d       	adc	r29, r1
    3044:	0f b6       	in	r0, 0x3f	; 63
    3046:	f8 94       	cli
    3048:	de bf       	out	0x3e, r29	; 62
    304a:	0f be       	out	0x3f, r0	; 63
    304c:	cd bf       	out	0x3d, r28	; 61
    304e:	ed 01       	movw	r28, r26
    3050:	08 95       	ret

00003052 <itoa>:
    3052:	fb 01       	movw	r30, r22
    3054:	9f 01       	movw	r18, r30
    3056:	e8 94       	clt
    3058:	42 30       	cpi	r20, 0x02	; 2
    305a:	c4 f0       	brlt	.+48     	; 0x308c <itoa+0x3a>
    305c:	45 32       	cpi	r20, 0x25	; 37
    305e:	b4 f4       	brge	.+44     	; 0x308c <itoa+0x3a>
    3060:	4a 30       	cpi	r20, 0x0A	; 10
    3062:	29 f4       	brne	.+10     	; 0x306e <itoa+0x1c>
    3064:	97 fb       	bst	r25, 7
    3066:	1e f4       	brtc	.+6      	; 0x306e <itoa+0x1c>
    3068:	90 95       	com	r25
    306a:	81 95       	neg	r24
    306c:	9f 4f       	sbci	r25, 0xFF	; 255
    306e:	64 2f       	mov	r22, r20
    3070:	77 27       	eor	r23, r23
    3072:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <__udivmodhi4>
    3076:	80 5d       	subi	r24, 0xD0	; 208
    3078:	8a 33       	cpi	r24, 0x3A	; 58
    307a:	0c f0       	brlt	.+2      	; 0x307e <itoa+0x2c>
    307c:	89 5d       	subi	r24, 0xD9	; 217
    307e:	81 93       	st	Z+, r24
    3080:	cb 01       	movw	r24, r22
    3082:	00 97       	sbiw	r24, 0x00	; 0
    3084:	a1 f7       	brne	.-24     	; 0x306e <itoa+0x1c>
    3086:	16 f4       	brtc	.+4      	; 0x308c <itoa+0x3a>
    3088:	5d e2       	ldi	r21, 0x2D	; 45
    308a:	51 93       	st	Z+, r21
    308c:	10 82       	st	Z, r1
    308e:	c9 01       	movw	r24, r18
    3090:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <strrev>

00003094 <strrev>:
    3094:	dc 01       	movw	r26, r24
    3096:	fc 01       	movw	r30, r24
    3098:	67 2f       	mov	r22, r23
    309a:	71 91       	ld	r23, Z+
    309c:	77 23       	and	r23, r23
    309e:	e1 f7       	brne	.-8      	; 0x3098 <strrev+0x4>
    30a0:	32 97       	sbiw	r30, 0x02	; 2
    30a2:	04 c0       	rjmp	.+8      	; 0x30ac <strrev+0x18>
    30a4:	7c 91       	ld	r23, X
    30a6:	6d 93       	st	X+, r22
    30a8:	70 83       	st	Z, r23
    30aa:	62 91       	ld	r22, -Z
    30ac:	ae 17       	cp	r26, r30
    30ae:	bf 07       	cpc	r27, r31
    30b0:	c8 f3       	brcs	.-14     	; 0x30a4 <strrev+0x10>
    30b2:	08 95       	ret

000030b4 <__udivmodhi4>:
    30b4:	aa 1b       	sub	r26, r26
    30b6:	bb 1b       	sub	r27, r27
    30b8:	51 e1       	ldi	r21, 0x11	; 17
    30ba:	07 c0       	rjmp	.+14     	; 0x30ca <__udivmodhi4_ep>

000030bc <__udivmodhi4_loop>:
    30bc:	aa 1f       	adc	r26, r26
    30be:	bb 1f       	adc	r27, r27
    30c0:	a6 17       	cp	r26, r22
    30c2:	b7 07       	cpc	r27, r23
    30c4:	10 f0       	brcs	.+4      	; 0x30ca <__udivmodhi4_ep>
    30c6:	a6 1b       	sub	r26, r22
    30c8:	b7 0b       	sbc	r27, r23

000030ca <__udivmodhi4_ep>:
    30ca:	88 1f       	adc	r24, r24
    30cc:	99 1f       	adc	r25, r25
    30ce:	5a 95       	dec	r21
    30d0:	a9 f7       	brne	.-22     	; 0x30bc <__udivmodhi4_loop>
    30d2:	80 95       	com	r24
    30d4:	90 95       	com	r25
    30d6:	bc 01       	movw	r22, r24
    30d8:	cd 01       	movw	r24, r26
    30da:	08 95       	ret

000030dc <_exit>:
    30dc:	f8 94       	cli

000030de <__stop_program>:
    30de:	ff cf       	rjmp	.-2      	; 0x30de <__stop_program>
