
mc_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  000022ee  00002382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800178  00800178  0000249a  2**0
                  ALLOC
  3 .stab         00002b44  00000000  00000000  0000249c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f0d  00000000  00000000  00004fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00006eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000706d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000723e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000924e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000a3af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000b3b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000b554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000b812  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c120  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <main>
      8a:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 47 11 	jmp	0x228e	; 0x228e <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <UART_init+0x6>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <UART_init+0x8>
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	9c 83       	std	Y+4, r25	; 0x04
     cae:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     cb0:	1a 82       	std	Y+2, r1	; 0x02
     cb2:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     cb4:	eb e2       	ldi	r30, 0x2B	; 43
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = (0 OR 1 )to select data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
     cbc:	ea e2       	ldi	r30, 0x2A	; 42
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	88 e1       	ldi	r24, 0x18	; 24
     cc2:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0xFB) | ((Config_Ptr->bit_data) & 0x04);
     cc4:	aa e2       	ldi	r26, 0x2A	; 42
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	ea e2       	ldi	r30, 0x2A	; 42
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	98 2f       	mov	r25, r24
     cd0:	9b 7f       	andi	r25, 0xFB	; 251
     cd2:	eb 81       	ldd	r30, Y+3	; 0x03
     cd4:	fc 81       	ldd	r31, Y+4	; 0x04
     cd6:	80 81       	ld	r24, Z
     cd8:	84 70       	andi	r24, 0x04	; 4
     cda:	89 2b       	or	r24, r25
     cdc:	8c 93       	st	X, r24
	 * UPM1:0  = (0 or 1) For select parity mode
	 * USBS    = (0 or 1) For select stop_bit mode
	 * UCSZ1:0 = (0 or 1) For select data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
     cde:	e0 e4       	ldi	r30, 0x40	; 64
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 e8       	ldi	r24, 0x80	; 128
     ce4:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) | (Config_Ptr->parity);
     ce6:	a0 e4       	ldi	r26, 0x40	; 64
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e0 e4       	ldi	r30, 0x40	; 64
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	98 2f       	mov	r25, r24
     cf2:	9f 7c       	andi	r25, 0xCF	; 207
     cf4:	eb 81       	ldd	r30, Y+3	; 0x03
     cf6:	fc 81       	ldd	r31, Y+4	; 0x04
     cf8:	81 81       	ldd	r24, Z+1	; 0x01
     cfa:	89 2b       	or	r24, r25
     cfc:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | (Config_Ptr->stop_bit);
     cfe:	a0 e4       	ldi	r26, 0x40	; 64
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e0 e4       	ldi	r30, 0x40	; 64
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	98 2f       	mov	r25, r24
     d0a:	97 7f       	andi	r25, 0xF7	; 247
     d0c:	eb 81       	ldd	r30, Y+3	; 0x03
     d0e:	fc 81       	ldd	r31, Y+4	; 0x04
     d10:	82 81       	ldd	r24, Z+2	; 0x02
     d12:	89 2b       	or	r24, r25
     d14:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data) & 0X03);
     d16:	a0 e4       	ldi	r26, 0x40	; 64
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e0 e4       	ldi	r30, 0x40	; 64
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	98 2f       	mov	r25, r24
     d22:	99 7f       	andi	r25, 0xF9	; 249
     d24:	eb 81       	ldd	r30, Y+3	; 0x03
     d26:	fc 81       	ldd	r31, Y+4	; 0x04
     d28:	80 81       	ld	r24, Z
     d2a:	83 70       	andi	r24, 0x03	; 3
     d2c:	89 2b       	or	r24, r25
     d2e:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
     d30:	eb 81       	ldd	r30, Y+3	; 0x03
     d32:	fc 81       	ldd	r31, Y+4	; 0x04
     d34:	83 81       	ldd	r24, Z+3	; 0x03
     d36:	94 81       	ldd	r25, Z+4	; 0x04
     d38:	a5 81       	ldd	r26, Z+5	; 0x05
     d3a:	b6 81       	ldd	r27, Z+6	; 0x06
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	aa 1f       	adc	r26, r26
     d42:	bb 1f       	adc	r27, r27
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	aa 1f       	adc	r26, r26
     d4a:	bb 1f       	adc	r27, r27
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	aa 1f       	adc	r26, r26
     d52:	bb 1f       	adc	r27, r27
     d54:	9c 01       	movw	r18, r24
     d56:	ad 01       	movw	r20, r26
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	92 e1       	ldi	r25, 0x12	; 18
     d5c:	aa e7       	ldi	r26, 0x7A	; 122
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	bc 01       	movw	r22, r24
     d62:	cd 01       	movw	r24, r26
     d64:	0e 94 1c 11 	call	0x2238	; 0x2238 <__udivmodsi4>
     d68:	da 01       	movw	r26, r20
     d6a:	c9 01       	movw	r24, r18
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	9a 83       	std	Y+2, r25	; 0x02
     d70:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     d72:	e0 e4       	ldi	r30, 0x40	; 64
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	89 2f       	mov	r24, r25
     d7c:	99 27       	eor	r25, r25
     d7e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     d80:	e9 e2       	ldi	r30, 0x29	; 41
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	80 83       	st	Z, r24
}
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	0f 92       	push	r0
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     da2:	eb e2       	ldi	r30, 0x2B	; 43
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	80 72       	andi	r24, 0x20	; 32
     dae:	90 70       	andi	r25, 0x00	; 0
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	b9 f3       	breq	.-18     	; 0xda2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     db4:	ec e2       	ldi	r30, 0x2C	; 44
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     dbc:	0f 90       	pop	r0
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     dcc:	eb e2       	ldi	r30, 0x2B	; 43
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	88 23       	and	r24, r24
     dd4:	dc f7       	brge	.-10     	; 0xdcc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     dd6:	ec e2       	ldi	r30, 0x2C	; 44
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
}
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	00 d0       	rcall	.+0      	; 0xde8 <UART_sendString+0x6>
     de8:	0f 92       	push	r0
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	9b 83       	std	Y+3, r25	; 0x03
     df0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     df2:	19 82       	std	Y+1, r1	; 0x01
     df4:	0e c0       	rjmp	.+28     	; 0xe12 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	9b 81       	ldd	r25, Y+3	; 0x03
     e00:	fc 01       	movw	r30, r24
     e02:	e2 0f       	add	r30, r18
     e04:	f3 1f       	adc	r31, r19
     e06:	80 81       	ld	r24, Z
     e08:	0e 94 cb 06 	call	0xd96	; 0xd96 <UART_sendByte>
		i++;
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	8f 5f       	subi	r24, 0xFF	; 255
     e10:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	9b 81       	ldd	r25, Y+3	; 0x03
     e1c:	fc 01       	movw	r30, r24
     e1e:	e2 0f       	add	r30, r18
     e20:	f3 1f       	adc	r31, r19
     e22:	80 81       	ld	r24, Z
     e24:	88 23       	and	r24, r24
     e26:	39 f7       	brne	.-50     	; 0xdf6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     e34:	0f 93       	push	r16
     e36:	1f 93       	push	r17
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <UART_receiveString+0xa>
     e3e:	0f 92       	push	r0
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	9b 83       	std	Y+3, r25	; 0x03
     e46:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     e48:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	9b 81       	ldd	r25, Y+3	; 0x03
     e54:	8c 01       	movw	r16, r24
     e56:	02 0f       	add	r16, r18
     e58:	13 1f       	adc	r17, r19
     e5a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <UART_recieveByte>
     e5e:	f8 01       	movw	r30, r16
     e60:	80 83       	st	Z, r24
     e62:	0f c0       	rjmp	.+30     	; 0xe82 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	8f 5f       	subi	r24, 0xFF	; 255
     e68:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	9b 81       	ldd	r25, Y+3	; 0x03
     e74:	8c 01       	movw	r16, r24
     e76:	02 0f       	add	r16, r18
     e78:	13 1f       	adc	r17, r19
     e7a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <UART_recieveByte>
     e7e:	f8 01       	movw	r30, r16
     e80:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	9b 81       	ldd	r25, Y+3	; 0x03
     e8c:	fc 01       	movw	r30, r24
     e8e:	e2 0f       	add	r30, r18
     e90:	f3 1f       	adc	r31, r19
     e92:	80 81       	ld	r24, Z
     e94:	83 32       	cpi	r24, 0x23	; 35
     e96:	31 f7       	brne	.-52     	; 0xe64 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	9b 81       	ldd	r25, Y+3	; 0x03
     ea2:	fc 01       	movw	r30, r24
     ea4:	e2 0f       	add	r30, r18
     ea6:	f3 1f       	adc	r31, r19
     ea8:	10 82       	st	Z, r1
}
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	08 95       	ret

00000eba <__vector_9>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
/* Interrupt Service Routine for timer1 overflow mode */

ISR(TIMER1_OVF_vect)
{
     eba:	1f 92       	push	r1
     ebc:	0f 92       	push	r0
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	0f 92       	push	r0
     ec2:	11 24       	eor	r1, r1
     ec4:	2f 93       	push	r18
     ec6:	3f 93       	push	r19
     ec8:	4f 93       	push	r20
     eca:	5f 93       	push	r21
     ecc:	6f 93       	push	r22
     ece:	7f 93       	push	r23
     ed0:	8f 93       	push	r24
     ed2:	9f 93       	push	r25
     ed4:	af 93       	push	r26
     ed6:	bf 93       	push	r27
     ed8:	ef 93       	push	r30
     eda:	ff 93       	push	r31
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     ee4:	80 91 78 01 	lds	r24, 0x0178
     ee8:	90 91 79 01 	lds	r25, 0x0179
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	29 f0       	breq	.+10     	; 0xefa <__vector_9+0x40>
	{
		(*g_callBackPtr)();
     ef0:	e0 91 78 01 	lds	r30, 0x0178
     ef4:	f0 91 79 01 	lds	r31, 0x0179
     ef8:	09 95       	icall
	}
}
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	ff 91       	pop	r31
     f00:	ef 91       	pop	r30
     f02:	bf 91       	pop	r27
     f04:	af 91       	pop	r26
     f06:	9f 91       	pop	r25
     f08:	8f 91       	pop	r24
     f0a:	7f 91       	pop	r23
     f0c:	6f 91       	pop	r22
     f0e:	5f 91       	pop	r21
     f10:	4f 91       	pop	r20
     f12:	3f 91       	pop	r19
     f14:	2f 91       	pop	r18
     f16:	0f 90       	pop	r0
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	0f 90       	pop	r0
     f1c:	1f 90       	pop	r1
     f1e:	18 95       	reti

00000f20 <__vector_7>:

/* Interrupt Service Routine for timer1 compare mode */

ISR(TIMER1_COMPA_vect)
{
     f20:	1f 92       	push	r1
     f22:	0f 92       	push	r0
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	0f 92       	push	r0
     f28:	11 24       	eor	r1, r1
     f2a:	2f 93       	push	r18
     f2c:	3f 93       	push	r19
     f2e:	4f 93       	push	r20
     f30:	5f 93       	push	r21
     f32:	6f 93       	push	r22
     f34:	7f 93       	push	r23
     f36:	8f 93       	push	r24
     f38:	9f 93       	push	r25
     f3a:	af 93       	push	r26
     f3c:	bf 93       	push	r27
     f3e:	ef 93       	push	r30
     f40:	ff 93       	push	r31
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     f4a:	80 91 78 01 	lds	r24, 0x0178
     f4e:	90 91 79 01 	lds	r25, 0x0179
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	29 f0       	breq	.+10     	; 0xf60 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
     f56:	e0 91 78 01 	lds	r30, 0x0178
     f5a:	f0 91 79 01 	lds	r31, 0x0179
     f5e:	09 95       	icall
	}
}
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	ff 91       	pop	r31
     f66:	ef 91       	pop	r30
     f68:	bf 91       	pop	r27
     f6a:	af 91       	pop	r26
     f6c:	9f 91       	pop	r25
     f6e:	8f 91       	pop	r24
     f70:	7f 91       	pop	r23
     f72:	6f 91       	pop	r22
     f74:	5f 91       	pop	r21
     f76:	4f 91       	pop	r20
     f78:	3f 91       	pop	r19
     f7a:	2f 91       	pop	r18
     f7c:	0f 90       	pop	r0
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	0f 90       	pop	r0
     f82:	1f 90       	pop	r1
     f84:	18 95       	reti

00000f86 <Timer1_init>:
 * 2. Adjusting the TIMER_1 registers for the required mode and prescaler
 * 3. Enabling the interrupt
 */

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <Timer1_init+0x6>
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <Timer1_init+0x8>
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	9a 83       	std	Y+2, r25	; 0x02
     f94:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = (Config_Ptr->timer1_initialvalue) & 0XFFFF; /* set initial value */
     f96:	ac e4       	ldi	r26, 0x4C	; 76
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e9 81       	ldd	r30, Y+1	; 0x01
     f9c:	fa 81       	ldd	r31, Y+2	; 0x02
     f9e:	81 81       	ldd	r24, Z+1	; 0x01
     fa0:	92 81       	ldd	r25, Z+2	; 0x02
     fa2:	11 96       	adiw	r26, 0x01	; 1
     fa4:	9c 93       	st	X, r25
     fa6:	8e 93       	st	-X, r24
	TCCR1A =0;
     fa8:	ef e4       	ldi	r30, 0x4F	; 79
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	10 82       	st	Z, r1
	TCCR1B =0;
     fae:	ee e4       	ldi	r30, 0x4E	; 78
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	10 82       	st	Z, r1
	TCCR1B = (TCCR1B  & 0XF8) | (Config_Ptr->timer1_prescaler); /* set the prescaler */
     fb4:	ae e4       	ldi	r26, 0x4E	; 78
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	ee e4       	ldi	r30, 0x4E	; 78
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	98 2f       	mov	r25, r24
     fc0:	98 7f       	andi	r25, 0xF8	; 248
     fc2:	e9 81       	ldd	r30, Y+1	; 0x01
     fc4:	fa 81       	ldd	r31, Y+2	; 0x02
     fc6:	85 81       	ldd	r24, Z+5	; 0x05
     fc8:	89 2b       	or	r24, r25
     fca:	8c 93       	st	X, r24
	switch(Config_Ptr->mode)
     fcc:	e9 81       	ldd	r30, Y+1	; 0x01
     fce:	fa 81       	ldd	r31, Y+2	; 0x02
     fd0:	80 81       	ld	r24, Z
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	3c 83       	std	Y+4, r19	; 0x04
     fd8:	2b 83       	std	Y+3, r18	; 0x03
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	9c 81       	ldd	r25, Y+4	; 0x04
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	31 f0       	breq	.+12     	; 0xfee <Timer1_init+0x68>
     fe2:	2b 81       	ldd	r18, Y+3	; 0x03
     fe4:	3c 81       	ldd	r19, Y+4	; 0x04
     fe6:	21 30       	cpi	r18, 0x01	; 1
     fe8:	31 05       	cpc	r19, r1
     fea:	81 f0       	breq	.+32     	; 0x100c <Timer1_init+0x86>
     fec:	2d c0       	rjmp	.+90     	; 0x1048 <Timer1_init+0xc2>
	{
	case OVERFLOW:
		TCCR1A |= (1<<FOC1A); /* Adjust for overflow mode */
     fee:	af e4       	ldi	r26, 0x4F	; 79
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	ef e4       	ldi	r30, 0x4F	; 79
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	88 60       	ori	r24, 0x08	; 8
     ffa:	8c 93       	st	X, r24
		TIMSK |= (1<<TOIE1); /* Enable Timer1 Compare A Interrupt */
     ffc:	a9 e5       	ldi	r26, 0x59	; 89
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e9 e5       	ldi	r30, 0x59	; 89
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	84 60       	ori	r24, 0x04	; 4
    1008:	8c 93       	st	X, r24
    100a:	1e c0       	rjmp	.+60     	; 0x1048 <Timer1_init+0xc2>
		break;
	case COMPARE:
		OCR1A = (Config_Ptr->timer1_comparevalue)& 0XFFFF; // Set Compare Value
    100c:	aa e4       	ldi	r26, 0x4A	; 74
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e9 81       	ldd	r30, Y+1	; 0x01
    1012:	fa 81       	ldd	r31, Y+2	; 0x02
    1014:	83 81       	ldd	r24, Z+3	; 0x03
    1016:	94 81       	ldd	r25, Z+4	; 0x04
    1018:	11 96       	adiw	r26, 0x01	; 1
    101a:	9c 93       	st	X, r25
    101c:	8e 93       	st	-X, r24
		TCCR1A |= (1<<FOC1A) | (1<<WGM01); /* Adjust for compare mode */
    101e:	af e4       	ldi	r26, 0x4F	; 79
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	ef e4       	ldi	r30, 0x4F	; 79
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	88 60       	ori	r24, 0x08	; 8
    102a:	8c 93       	st	X, r24
		TCCR1B |= (1<<WGM12);
    102c:	ae e4       	ldi	r26, 0x4E	; 78
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	ee e4       	ldi	r30, 0x4E	; 78
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	88 60       	ori	r24, 0x08	; 8
    1038:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
    103a:	a9 e5       	ldi	r26, 0x59	; 89
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e9 e5       	ldi	r30, 0x59	; 89
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	80 61       	ori	r24, 0x10	; 16
    1046:	8c 93       	st	X, r24
		break;
	}
}
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <Timer1_setCallBack>:


void Timer1_setCallBack(void(*a_ptr)(void))
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <Timer1_setCallBack+0x6>
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	9a 83       	std	Y+2, r25	; 0x02
    1062:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	9a 81       	ldd	r25, Y+2	; 0x02
    1068:	90 93 79 01 	sts	0x0179, r25
    106c:	80 93 78 01 	sts	0x0178, r24
}
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <Timer1_stop>:
/*
 * Description :
 * Function responsible to stop the timer */

void Timer1_stop(void)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (TCCR1B & 0XF8);
    1082:	ae e4       	ldi	r26, 0x4E	; 78
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	ee e4       	ldi	r30, 0x4E	; 78
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	88 7f       	andi	r24, 0xF8	; 248
    108e:	8c 93       	st	X, r24
}
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <Timer1_deinit>:
/*
 * Description :
 * Function responsible to shut down the timer by clearing all the registers of the module */

void Timer1_deinit(void)
{
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
	TCCR1A= 0;
    109e:	ef e4       	ldi	r30, 0x4F	; 79
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	10 82       	st	Z, r1
	TCCR1B=0;
    10a4:	ee e4       	ldi	r30, 0x4E	; 78
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	10 82       	st	Z, r1
	TCNT1= 0;
    10aa:	ec e4       	ldi	r30, 0x4C	; 76
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	11 82       	std	Z+1, r1	; 0x01
    10b0:	10 82       	st	Z, r1
	OCR1A= 0;
    10b2:	ea e4       	ldi	r30, 0x4A	; 74
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	11 82       	std	Z+1, r1	; 0x01
    10b8:	10 82       	st	Z, r1
	TIMSK= 0;
    10ba:	e9 e5       	ldi	r30, 0x59	; 89
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	10 82       	st	Z, r1
}
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <TWI_init>:
 *******************************************************************************/
 
#include "twi.h"
#include <avr/io.h>
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <TWI_init+0x6>
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	9a 83       	std	Y+2, r25	; 0x02
    10d2:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    10d4:	e0 e2       	ldi	r30, 0x20	; 32
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	82 e0       	ldi	r24, 0x02	; 2
    10da:	80 83       	st	Z, r24
	TWSR = Config_Ptr->bit_rate;
    10dc:	a1 e2       	ldi	r26, 0x21	; 33
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e9 81       	ldd	r30, Y+1	; 0x01
    10e2:	fa 81       	ldd	r31, Y+2	; 0x02
    10e4:	81 81       	ldd	r24, Z+1	; 0x01
    10e6:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	CLEAR_BIT(TWAR,TWGCE);
    10e8:	a2 e2       	ldi	r26, 0x22	; 34
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e2 e2       	ldi	r30, 0x22	; 34
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	8e 7f       	andi	r24, 0xFE	; 254
    10f4:	8c 93       	st	X, r24
	TWAR = ( (TWAR & 0X01)|((Config_Ptr->address)& 0XFE) ); // my address = 0x01 :)
    10f6:	a2 e2       	ldi	r26, 0x22	; 34
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e2 e2       	ldi	r30, 0x22	; 34
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	98 2f       	mov	r25, r24
    1102:	91 70       	andi	r25, 0x01	; 1
    1104:	e9 81       	ldd	r30, Y+1	; 0x01
    1106:	fa 81       	ldd	r31, Y+2	; 0x02
    1108:	80 81       	ld	r24, Z
    110a:	8e 7f       	andi	r24, 0xFE	; 254
    110c:	89 2b       	or	r24, r25
    110e:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1110:	e6 e5       	ldi	r30, 0x56	; 86
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	84 e0       	ldi	r24, 0x04	; 4
    1116:	80 83       	st	Z, r24
}
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <TWI_start>:

void TWI_start(void)
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    112a:	e6 e5       	ldi	r30, 0x56	; 86
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	84 ea       	ldi	r24, 0xA4	; 164
    1130:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1132:	e6 e5       	ldi	r30, 0x56	; 86
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	88 23       	and	r24, r24
    113a:	dc f7       	brge	.-10     	; 0x1132 <TWI_start+0x10>
}
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <TWI_stop>:

void TWI_stop(void)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    114a:	e6 e5       	ldi	r30, 0x56	; 86
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	84 e9       	ldi	r24, 0x94	; 148
    1150:	80 83       	st	Z, r24
}
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	0f 92       	push	r0
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1164:	e3 e2       	ldi	r30, 0x23	; 35
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    116c:	e6 e5       	ldi	r30, 0x56	; 86
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	84 e8       	ldi	r24, 0x84	; 132
    1172:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1174:	e6 e5       	ldi	r30, 0x56	; 86
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	88 23       	and	r24, r24
    117c:	dc f7       	brge	.-10     	; 0x1174 <TWI_writeByte+0x1c>
}
    117e:	0f 90       	pop	r0
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    118e:	e6 e5       	ldi	r30, 0x56	; 86
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	84 ec       	ldi	r24, 0xC4	; 196
    1194:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1196:	e6 e5       	ldi	r30, 0x56	; 86
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	88 23       	and	r24, r24
    119e:	dc f7       	brge	.-10     	; 0x1196 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    11a0:	e3 e2       	ldi	r30, 0x23	; 35
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
}
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    11b4:	e6 e5       	ldi	r30, 0x56	; 86
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	84 e8       	ldi	r24, 0x84	; 132
    11ba:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    11bc:	e6 e5       	ldi	r30, 0x56	; 86
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	88 23       	and	r24, r24
    11c4:	dc f7       	brge	.-10     	; 0x11bc <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    11c6:	e3 e2       	ldi	r30, 0x23	; 35
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
}
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	0f 92       	push	r0
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    11dc:	e1 e2       	ldi	r30, 0x21	; 33
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	88 7f       	andi	r24, 0xF8	; 248
    11e4:	89 83       	std	Y+1, r24	; 0x01
    return status;
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e8:	0f 90       	pop	r0
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <GPIO_setupPinDirection+0x6>
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <GPIO_setupPinDirection+0x8>
    11f8:	0f 92       	push	r0
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	6a 83       	std	Y+2, r22	; 0x02
    1202:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	88 30       	cpi	r24, 0x08	; 8
    1208:	08 f0       	brcs	.+2      	; 0x120c <GPIO_setupPinDirection+0x1c>
    120a:	d5 c0       	rjmp	.+426    	; 0x13b6 <GPIO_setupPinDirection+0x1c6>
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	84 30       	cpi	r24, 0x04	; 4
    1210:	08 f0       	brcs	.+2      	; 0x1214 <GPIO_setupPinDirection+0x24>
    1212:	d1 c0       	rjmp	.+418    	; 0x13b6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	3d 83       	std	Y+5, r19	; 0x05
    121c:	2c 83       	std	Y+4, r18	; 0x04
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	9d 81       	ldd	r25, Y+5	; 0x05
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	91 05       	cpc	r25, r1
    1226:	09 f4       	brne	.+2      	; 0x122a <GPIO_setupPinDirection+0x3a>
    1228:	43 c0       	rjmp	.+134    	; 0x12b0 <GPIO_setupPinDirection+0xc0>
    122a:	2c 81       	ldd	r18, Y+4	; 0x04
    122c:	3d 81       	ldd	r19, Y+5	; 0x05
    122e:	22 30       	cpi	r18, 0x02	; 2
    1230:	31 05       	cpc	r19, r1
    1232:	2c f4       	brge	.+10     	; 0x123e <GPIO_setupPinDirection+0x4e>
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	9d 81       	ldd	r25, Y+5	; 0x05
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	71 f0       	breq	.+28     	; 0x1258 <GPIO_setupPinDirection+0x68>
    123c:	bc c0       	rjmp	.+376    	; 0x13b6 <GPIO_setupPinDirection+0x1c6>
    123e:	2c 81       	ldd	r18, Y+4	; 0x04
    1240:	3d 81       	ldd	r19, Y+5	; 0x05
    1242:	22 30       	cpi	r18, 0x02	; 2
    1244:	31 05       	cpc	r19, r1
    1246:	09 f4       	brne	.+2      	; 0x124a <GPIO_setupPinDirection+0x5a>
    1248:	5f c0       	rjmp	.+190    	; 0x1308 <GPIO_setupPinDirection+0x118>
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	9d 81       	ldd	r25, Y+5	; 0x05
    124e:	83 30       	cpi	r24, 0x03	; 3
    1250:	91 05       	cpc	r25, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <GPIO_setupPinDirection+0x66>
    1254:	85 c0       	rjmp	.+266    	; 0x1360 <GPIO_setupPinDirection+0x170>
    1256:	af c0       	rjmp	.+350    	; 0x13b6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	a1 f4       	brne	.+40     	; 0x1286 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    125e:	aa e3       	ldi	r26, 0x3A	; 58
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	ea e3       	ldi	r30, 0x3A	; 58
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <GPIO_setupPinDirection+0x8c>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <GPIO_setupPinDirection+0x88>
    1280:	84 2b       	or	r24, r20
    1282:	8c 93       	st	X, r24
    1284:	98 c0       	rjmp	.+304    	; 0x13b6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1286:	aa e3       	ldi	r26, 0x3A	; 58
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	ea e3       	ldi	r30, 0x3A	; 58
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <GPIO_setupPinDirection+0xb4>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <GPIO_setupPinDirection+0xb0>
    12a8:	80 95       	com	r24
    12aa:	84 23       	and	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	83 c0       	rjmp	.+262    	; 0x13b6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	a1 f4       	brne	.+40     	; 0x12de <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    12b6:	a7 e3       	ldi	r26, 0x37	; 55
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e7 e3       	ldi	r30, 0x37	; 55
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	48 2f       	mov	r20, r24
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 2e       	mov	r0, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <GPIO_setupPinDirection+0xe4>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <GPIO_setupPinDirection+0xe0>
    12d8:	84 2b       	or	r24, r20
    12da:	8c 93       	st	X, r24
    12dc:	6c c0       	rjmp	.+216    	; 0x13b6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    12de:	a7 e3       	ldi	r26, 0x37	; 55
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e7 e3       	ldi	r30, 0x37	; 55
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	48 2f       	mov	r20, r24
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 2e       	mov	r0, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <GPIO_setupPinDirection+0x10c>
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	0a 94       	dec	r0
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <GPIO_setupPinDirection+0x108>
    1300:	80 95       	com	r24
    1302:	84 23       	and	r24, r20
    1304:	8c 93       	st	X, r24
    1306:	57 c0       	rjmp	.+174    	; 0x13b6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	a1 f4       	brne	.+40     	; 0x1336 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    130e:	a4 e3       	ldi	r26, 0x34	; 52
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e4 e3       	ldi	r30, 0x34	; 52
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <GPIO_setupPinDirection+0x13c>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <GPIO_setupPinDirection+0x138>
    1330:	84 2b       	or	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	40 c0       	rjmp	.+128    	; 0x13b6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1336:	a4 e3       	ldi	r26, 0x34	; 52
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e4 e3       	ldi	r30, 0x34	; 52
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <GPIO_setupPinDirection+0x164>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <GPIO_setupPinDirection+0x160>
    1358:	80 95       	com	r24
    135a:	84 23       	and	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	2b c0       	rjmp	.+86     	; 0x13b6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	a1 f4       	brne	.+40     	; 0x138e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1366:	a1 e3       	ldi	r26, 0x31	; 49
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e1 e3       	ldi	r30, 0x31	; 49
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	48 2f       	mov	r20, r24
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 2e       	mov	r0, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <GPIO_setupPinDirection+0x194>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <GPIO_setupPinDirection+0x190>
    1388:	84 2b       	or	r24, r20
    138a:	8c 93       	st	X, r24
    138c:	14 c0       	rjmp	.+40     	; 0x13b6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    138e:	a1 e3       	ldi	r26, 0x31	; 49
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e1 e3       	ldi	r30, 0x31	; 49
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 2e       	mov	r0, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <GPIO_setupPinDirection+0x1bc>
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	0a 94       	dec	r0
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <GPIO_setupPinDirection+0x1b8>
    13b0:	80 95       	com	r24
    13b2:	84 23       	and	r24, r20
    13b4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <GPIO_writePin+0x6>
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <GPIO_writePin+0x8>
    13ce:	0f 92       	push	r0
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	6a 83       	std	Y+2, r22	; 0x02
    13d8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	88 30       	cpi	r24, 0x08	; 8
    13de:	08 f0       	brcs	.+2      	; 0x13e2 <GPIO_writePin+0x1c>
    13e0:	d5 c0       	rjmp	.+426    	; 0x158c <GPIO_writePin+0x1c6>
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	84 30       	cpi	r24, 0x04	; 4
    13e6:	08 f0       	brcs	.+2      	; 0x13ea <GPIO_writePin+0x24>
    13e8:	d1 c0       	rjmp	.+418    	; 0x158c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	3d 83       	std	Y+5, r19	; 0x05
    13f2:	2c 83       	std	Y+4, r18	; 0x04
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	9d 81       	ldd	r25, Y+5	; 0x05
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	91 05       	cpc	r25, r1
    13fc:	09 f4       	brne	.+2      	; 0x1400 <GPIO_writePin+0x3a>
    13fe:	43 c0       	rjmp	.+134    	; 0x1486 <GPIO_writePin+0xc0>
    1400:	2c 81       	ldd	r18, Y+4	; 0x04
    1402:	3d 81       	ldd	r19, Y+5	; 0x05
    1404:	22 30       	cpi	r18, 0x02	; 2
    1406:	31 05       	cpc	r19, r1
    1408:	2c f4       	brge	.+10     	; 0x1414 <GPIO_writePin+0x4e>
    140a:	8c 81       	ldd	r24, Y+4	; 0x04
    140c:	9d 81       	ldd	r25, Y+5	; 0x05
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	71 f0       	breq	.+28     	; 0x142e <GPIO_writePin+0x68>
    1412:	bc c0       	rjmp	.+376    	; 0x158c <GPIO_writePin+0x1c6>
    1414:	2c 81       	ldd	r18, Y+4	; 0x04
    1416:	3d 81       	ldd	r19, Y+5	; 0x05
    1418:	22 30       	cpi	r18, 0x02	; 2
    141a:	31 05       	cpc	r19, r1
    141c:	09 f4       	brne	.+2      	; 0x1420 <GPIO_writePin+0x5a>
    141e:	5f c0       	rjmp	.+190    	; 0x14de <GPIO_writePin+0x118>
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	9d 81       	ldd	r25, Y+5	; 0x05
    1424:	83 30       	cpi	r24, 0x03	; 3
    1426:	91 05       	cpc	r25, r1
    1428:	09 f4       	brne	.+2      	; 0x142c <GPIO_writePin+0x66>
    142a:	85 c0       	rjmp	.+266    	; 0x1536 <GPIO_writePin+0x170>
    142c:	af c0       	rjmp	.+350    	; 0x158c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	a1 f4       	brne	.+40     	; 0x145c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1434:	ab e3       	ldi	r26, 0x3B	; 59
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	eb e3       	ldi	r30, 0x3B	; 59
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <GPIO_writePin+0x8c>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <GPIO_writePin+0x88>
    1456:	84 2b       	or	r24, r20
    1458:	8c 93       	st	X, r24
    145a:	98 c0       	rjmp	.+304    	; 0x158c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    145c:	ab e3       	ldi	r26, 0x3B	; 59
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	eb e3       	ldi	r30, 0x3B	; 59
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <GPIO_writePin+0xb4>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <GPIO_writePin+0xb0>
    147e:	80 95       	com	r24
    1480:	84 23       	and	r24, r20
    1482:	8c 93       	st	X, r24
    1484:	83 c0       	rjmp	.+262    	; 0x158c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	a1 f4       	brne	.+40     	; 0x14b4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    148c:	a8 e3       	ldi	r26, 0x38	; 56
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e8 e3       	ldi	r30, 0x38	; 56
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <GPIO_writePin+0xe4>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <GPIO_writePin+0xe0>
    14ae:	84 2b       	or	r24, r20
    14b0:	8c 93       	st	X, r24
    14b2:	6c c0       	rjmp	.+216    	; 0x158c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    14b4:	a8 e3       	ldi	r26, 0x38	; 56
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e8 e3       	ldi	r30, 0x38	; 56
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	48 2f       	mov	r20, r24
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 2e       	mov	r0, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <GPIO_writePin+0x10c>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	0a 94       	dec	r0
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <GPIO_writePin+0x108>
    14d6:	80 95       	com	r24
    14d8:	84 23       	and	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	57 c0       	rjmp	.+174    	; 0x158c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	a1 f4       	brne	.+40     	; 0x150c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    14e4:	a5 e3       	ldi	r26, 0x35	; 53
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e3       	ldi	r30, 0x35	; 53
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <GPIO_writePin+0x13c>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <GPIO_writePin+0x138>
    1506:	84 2b       	or	r24, r20
    1508:	8c 93       	st	X, r24
    150a:	40 c0       	rjmp	.+128    	; 0x158c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    150c:	a5 e3       	ldi	r26, 0x35	; 53
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e5 e3       	ldi	r30, 0x35	; 53
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <GPIO_writePin+0x164>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <GPIO_writePin+0x160>
    152e:	80 95       	com	r24
    1530:	84 23       	and	r24, r20
    1532:	8c 93       	st	X, r24
    1534:	2b c0       	rjmp	.+86     	; 0x158c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	a1 f4       	brne	.+40     	; 0x1564 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    153c:	a2 e3       	ldi	r26, 0x32	; 50
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e2 e3       	ldi	r30, 0x32	; 50
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	48 2f       	mov	r20, r24
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 2e       	mov	r0, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <GPIO_writePin+0x194>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	0a 94       	dec	r0
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <GPIO_writePin+0x190>
    155e:	84 2b       	or	r24, r20
    1560:	8c 93       	st	X, r24
    1562:	14 c0       	rjmp	.+40     	; 0x158c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1564:	a2 e3       	ldi	r26, 0x32	; 50
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e2 e3       	ldi	r30, 0x32	; 50
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	02 2e       	mov	r0, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <GPIO_writePin+0x1bc>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	0a 94       	dec	r0
    1584:	e2 f7       	brpl	.-8      	; 0x157e <GPIO_writePin+0x1b8>
    1586:	80 95       	com	r24
    1588:	84 23       	and	r24, r20
    158a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <GPIO_readPin+0x6>
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <GPIO_readPin+0x8>
    15a4:	0f 92       	push	r0
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	8a 83       	std	Y+2, r24	; 0x02
    15ac:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    15ae:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	88 30       	cpi	r24, 0x08	; 8
    15b4:	08 f0       	brcs	.+2      	; 0x15b8 <GPIO_readPin+0x1c>
    15b6:	84 c0       	rjmp	.+264    	; 0x16c0 <GPIO_readPin+0x124>
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	84 30       	cpi	r24, 0x04	; 4
    15bc:	08 f0       	brcs	.+2      	; 0x15c0 <GPIO_readPin+0x24>
    15be:	80 c0       	rjmp	.+256    	; 0x16c0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	3d 83       	std	Y+5, r19	; 0x05
    15c8:	2c 83       	std	Y+4, r18	; 0x04
    15ca:	4c 81       	ldd	r20, Y+4	; 0x04
    15cc:	5d 81       	ldd	r21, Y+5	; 0x05
    15ce:	41 30       	cpi	r20, 0x01	; 1
    15d0:	51 05       	cpc	r21, r1
    15d2:	79 f1       	breq	.+94     	; 0x1632 <GPIO_readPin+0x96>
    15d4:	8c 81       	ldd	r24, Y+4	; 0x04
    15d6:	9d 81       	ldd	r25, Y+5	; 0x05
    15d8:	82 30       	cpi	r24, 0x02	; 2
    15da:	91 05       	cpc	r25, r1
    15dc:	34 f4       	brge	.+12     	; 0x15ea <GPIO_readPin+0x4e>
    15de:	2c 81       	ldd	r18, Y+4	; 0x04
    15e0:	3d 81       	ldd	r19, Y+5	; 0x05
    15e2:	21 15       	cp	r18, r1
    15e4:	31 05       	cpc	r19, r1
    15e6:	69 f0       	breq	.+26     	; 0x1602 <GPIO_readPin+0x66>
    15e8:	6b c0       	rjmp	.+214    	; 0x16c0 <GPIO_readPin+0x124>
    15ea:	4c 81       	ldd	r20, Y+4	; 0x04
    15ec:	5d 81       	ldd	r21, Y+5	; 0x05
    15ee:	42 30       	cpi	r20, 0x02	; 2
    15f0:	51 05       	cpc	r21, r1
    15f2:	b9 f1       	breq	.+110    	; 0x1662 <GPIO_readPin+0xc6>
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	9d 81       	ldd	r25, Y+5	; 0x05
    15f8:	83 30       	cpi	r24, 0x03	; 3
    15fa:	91 05       	cpc	r25, r1
    15fc:	09 f4       	brne	.+2      	; 0x1600 <GPIO_readPin+0x64>
    15fe:	49 c0       	rjmp	.+146    	; 0x1692 <GPIO_readPin+0xf6>
    1600:	5f c0       	rjmp	.+190    	; 0x16c0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1602:	e9 e3       	ldi	r30, 0x39	; 57
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	88 2f       	mov	r24, r24
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	a9 01       	movw	r20, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <GPIO_readPin+0x7e>
    1616:	55 95       	asr	r21
    1618:	47 95       	ror	r20
    161a:	8a 95       	dec	r24
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <GPIO_readPin+0x7a>
    161e:	ca 01       	movw	r24, r20
    1620:	81 70       	andi	r24, 0x01	; 1
    1622:	90 70       	andi	r25, 0x00	; 0
    1624:	88 23       	and	r24, r24
    1626:	19 f0       	breq	.+6      	; 0x162e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	49 c0       	rjmp	.+146    	; 0x16c0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    162e:	19 82       	std	Y+1, r1	; 0x01
    1630:	47 c0       	rjmp	.+142    	; 0x16c0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1632:	e6 e3       	ldi	r30, 0x36	; 54
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	88 2f       	mov	r24, r24
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	a9 01       	movw	r20, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <GPIO_readPin+0xae>
    1646:	55 95       	asr	r21
    1648:	47 95       	ror	r20
    164a:	8a 95       	dec	r24
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <GPIO_readPin+0xaa>
    164e:	ca 01       	movw	r24, r20
    1650:	81 70       	andi	r24, 0x01	; 1
    1652:	90 70       	andi	r25, 0x00	; 0
    1654:	88 23       	and	r24, r24
    1656:	19 f0       	breq	.+6      	; 0x165e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	31 c0       	rjmp	.+98     	; 0x16c0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    165e:	19 82       	std	Y+1, r1	; 0x01
    1660:	2f c0       	rjmp	.+94     	; 0x16c0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1662:	e3 e3       	ldi	r30, 0x33	; 51
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	88 2f       	mov	r24, r24
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a9 01       	movw	r20, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <GPIO_readPin+0xde>
    1676:	55 95       	asr	r21
    1678:	47 95       	ror	r20
    167a:	8a 95       	dec	r24
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <GPIO_readPin+0xda>
    167e:	ca 01       	movw	r24, r20
    1680:	81 70       	andi	r24, 0x01	; 1
    1682:	90 70       	andi	r25, 0x00	; 0
    1684:	88 23       	and	r24, r24
    1686:	19 f0       	breq	.+6      	; 0x168e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	19 c0       	rjmp	.+50     	; 0x16c0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    168e:	19 82       	std	Y+1, r1	; 0x01
    1690:	17 c0       	rjmp	.+46     	; 0x16c0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1692:	e0 e3       	ldi	r30, 0x30	; 48
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	88 2f       	mov	r24, r24
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	a9 01       	movw	r20, r18
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <GPIO_readPin+0x10e>
    16a6:	55 95       	asr	r21
    16a8:	47 95       	ror	r20
    16aa:	8a 95       	dec	r24
    16ac:	e2 f7       	brpl	.-8      	; 0x16a6 <GPIO_readPin+0x10a>
    16ae:	ca 01       	movw	r24, r20
    16b0:	81 70       	andi	r24, 0x01	; 1
    16b2:	90 70       	andi	r25, 0x00	; 0
    16b4:	88 23       	and	r24, r24
    16b6:	19 f0       	breq	.+6      	; 0x16be <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16be:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <GPIO_setupPortDirection+0x6>
    16d8:	00 d0       	rcall	.+0      	; 0x16da <GPIO_setupPortDirection+0x8>
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	84 30       	cpi	r24, 0x04	; 4
    16e6:	90 f5       	brcc	.+100    	; 0x174c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	3c 83       	std	Y+4, r19	; 0x04
    16f0:	2b 83       	std	Y+3, r18	; 0x03
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	91 05       	cpc	r25, r1
    16fa:	d1 f0       	breq	.+52     	; 0x1730 <GPIO_setupPortDirection+0x5e>
    16fc:	2b 81       	ldd	r18, Y+3	; 0x03
    16fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1700:	22 30       	cpi	r18, 0x02	; 2
    1702:	31 05       	cpc	r19, r1
    1704:	2c f4       	brge	.+10     	; 0x1710 <GPIO_setupPortDirection+0x3e>
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	61 f0       	breq	.+24     	; 0x1726 <GPIO_setupPortDirection+0x54>
    170e:	1e c0       	rjmp	.+60     	; 0x174c <GPIO_setupPortDirection+0x7a>
    1710:	2b 81       	ldd	r18, Y+3	; 0x03
    1712:	3c 81       	ldd	r19, Y+4	; 0x04
    1714:	22 30       	cpi	r18, 0x02	; 2
    1716:	31 05       	cpc	r19, r1
    1718:	81 f0       	breq	.+32     	; 0x173a <GPIO_setupPortDirection+0x68>
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	9c 81       	ldd	r25, Y+4	; 0x04
    171e:	83 30       	cpi	r24, 0x03	; 3
    1720:	91 05       	cpc	r25, r1
    1722:	81 f0       	breq	.+32     	; 0x1744 <GPIO_setupPortDirection+0x72>
    1724:	13 c0       	rjmp	.+38     	; 0x174c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1726:	ea e3       	ldi	r30, 0x3A	; 58
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	80 83       	st	Z, r24
    172e:	0e c0       	rjmp	.+28     	; 0x174c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1730:	e7 e3       	ldi	r30, 0x37	; 55
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	80 83       	st	Z, r24
    1738:	09 c0       	rjmp	.+18     	; 0x174c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    173a:	e4 e3       	ldi	r30, 0x34	; 52
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	80 83       	st	Z, r24
    1742:	04 c0       	rjmp	.+8      	; 0x174c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1744:	e1 e3       	ldi	r30, 0x31	; 49
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	80 83       	st	Z, r24
			break;
		}
	}
}
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	00 d0       	rcall	.+0      	; 0x1760 <GPIO_writePort+0x6>
    1760:	00 d0       	rcall	.+0      	; 0x1762 <GPIO_writePort+0x8>
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	84 30       	cpi	r24, 0x04	; 4
    176e:	90 f5       	brcc	.+100    	; 0x17d4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	3c 83       	std	Y+4, r19	; 0x04
    1778:	2b 83       	std	Y+3, r18	; 0x03
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	9c 81       	ldd	r25, Y+4	; 0x04
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	91 05       	cpc	r25, r1
    1782:	d1 f0       	breq	.+52     	; 0x17b8 <GPIO_writePort+0x5e>
    1784:	2b 81       	ldd	r18, Y+3	; 0x03
    1786:	3c 81       	ldd	r19, Y+4	; 0x04
    1788:	22 30       	cpi	r18, 0x02	; 2
    178a:	31 05       	cpc	r19, r1
    178c:	2c f4       	brge	.+10     	; 0x1798 <GPIO_writePort+0x3e>
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	61 f0       	breq	.+24     	; 0x17ae <GPIO_writePort+0x54>
    1796:	1e c0       	rjmp	.+60     	; 0x17d4 <GPIO_writePort+0x7a>
    1798:	2b 81       	ldd	r18, Y+3	; 0x03
    179a:	3c 81       	ldd	r19, Y+4	; 0x04
    179c:	22 30       	cpi	r18, 0x02	; 2
    179e:	31 05       	cpc	r19, r1
    17a0:	81 f0       	breq	.+32     	; 0x17c2 <GPIO_writePort+0x68>
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	9c 81       	ldd	r25, Y+4	; 0x04
    17a6:	83 30       	cpi	r24, 0x03	; 3
    17a8:	91 05       	cpc	r25, r1
    17aa:	81 f0       	breq	.+32     	; 0x17cc <GPIO_writePort+0x72>
    17ac:	13 c0       	rjmp	.+38     	; 0x17d4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    17ae:	eb e3       	ldi	r30, 0x3B	; 59
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	80 83       	st	Z, r24
    17b6:	0e c0       	rjmp	.+28     	; 0x17d4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    17b8:	e8 e3       	ldi	r30, 0x38	; 56
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	80 83       	st	Z, r24
    17c0:	09 c0       	rjmp	.+18     	; 0x17d4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    17c2:	e5 e3       	ldi	r30, 0x35	; 53
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	80 83       	st	Z, r24
    17ca:	04 c0       	rjmp	.+8      	; 0x17d4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    17cc:	e2 e3       	ldi	r30, 0x32	; 50
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	80 83       	st	Z, r24
			break;
		}
	}
}
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <GPIO_readPort+0x6>
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <GPIO_readPort+0x8>
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    17f0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	84 30       	cpi	r24, 0x04	; 4
    17f6:	90 f5       	brcc	.+100    	; 0x185c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	3c 83       	std	Y+4, r19	; 0x04
    1800:	2b 83       	std	Y+3, r18	; 0x03
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	9c 81       	ldd	r25, Y+4	; 0x04
    1806:	81 30       	cpi	r24, 0x01	; 1
    1808:	91 05       	cpc	r25, r1
    180a:	d1 f0       	breq	.+52     	; 0x1840 <GPIO_readPort+0x5e>
    180c:	2b 81       	ldd	r18, Y+3	; 0x03
    180e:	3c 81       	ldd	r19, Y+4	; 0x04
    1810:	22 30       	cpi	r18, 0x02	; 2
    1812:	31 05       	cpc	r19, r1
    1814:	2c f4       	brge	.+10     	; 0x1820 <GPIO_readPort+0x3e>
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	9c 81       	ldd	r25, Y+4	; 0x04
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	61 f0       	breq	.+24     	; 0x1836 <GPIO_readPort+0x54>
    181e:	1e c0       	rjmp	.+60     	; 0x185c <GPIO_readPort+0x7a>
    1820:	2b 81       	ldd	r18, Y+3	; 0x03
    1822:	3c 81       	ldd	r19, Y+4	; 0x04
    1824:	22 30       	cpi	r18, 0x02	; 2
    1826:	31 05       	cpc	r19, r1
    1828:	81 f0       	breq	.+32     	; 0x184a <GPIO_readPort+0x68>
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	9c 81       	ldd	r25, Y+4	; 0x04
    182e:	83 30       	cpi	r24, 0x03	; 3
    1830:	91 05       	cpc	r25, r1
    1832:	81 f0       	breq	.+32     	; 0x1854 <GPIO_readPort+0x72>
    1834:	13 c0       	rjmp	.+38     	; 0x185c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1836:	e9 e3       	ldi	r30, 0x39	; 57
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	89 83       	std	Y+1, r24	; 0x01
    183e:	0e c0       	rjmp	.+28     	; 0x185c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1840:	e6 e3       	ldi	r30, 0x36	; 54
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	09 c0       	rjmp	.+18     	; 0x185c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    184a:	e3 e3       	ldi	r30, 0x33	; 51
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	04 c0       	rjmp	.+8      	; 0x185c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1854:	e0 e3       	ldi	r30, 0x30	; 48
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    185c:	89 81       	ldd	r24, Y+1	; 0x01
}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <EEPROM_init>:
#include "../../MCAL/I2C/twi.h"

TWI_ConfigType twi_config={0x01,No_PRESCALER};

void EEPROM_init(void)
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init(&twi_config);
    1874:	88 e6       	ldi	r24, 0x68	; 104
    1876:	91 e0       	ldi	r25, 0x01	; 1
    1878:	0e 94 63 08 	call	0x10c6	; 0x10c6 <TWI_init>
}
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <EEPROM_writeByte>:
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	00 d0       	rcall	.+0      	; 0x1888 <EEPROM_writeByte+0x6>
    1888:	00 d0       	rcall	.+0      	; 0x188a <EEPROM_writeByte+0x8>
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	9a 83       	std	Y+2, r25	; 0x02
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1894:	0e 94 91 08 	call	0x1122	; 0x1122 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1898:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <TWI_getStatus>
    189c:	88 30       	cpi	r24, 0x08	; 8
    189e:	11 f0       	breq	.+4      	; 0x18a4 <EEPROM_writeByte+0x22>
        return ERROR;
    18a0:	1c 82       	std	Y+4, r1	; 0x04
    18a2:	28 c0       	rjmp	.+80     	; 0x18f4 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	9a 81       	ldd	r25, Y+2	; 0x02
    18a8:	80 70       	andi	r24, 0x00	; 0
    18aa:	97 70       	andi	r25, 0x07	; 7
    18ac:	88 0f       	add	r24, r24
    18ae:	89 2f       	mov	r24, r25
    18b0:	88 1f       	adc	r24, r24
    18b2:	99 0b       	sbc	r25, r25
    18b4:	91 95       	neg	r25
    18b6:	80 6a       	ori	r24, 0xA0	; 160
    18b8:	0e 94 ac 08 	call	0x1158	; 0x1158 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    18bc:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <TWI_getStatus>
    18c0:	88 31       	cpi	r24, 0x18	; 24
    18c2:	11 f0       	breq	.+4      	; 0x18c8 <EEPROM_writeByte+0x46>
        return ERROR; 
    18c4:	1c 82       	std	Y+4, r1	; 0x04
    18c6:	16 c0       	rjmp	.+44     	; 0x18f4 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	0e 94 ac 08 	call	0x1158	; 0x1158 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    18ce:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <TWI_getStatus>
    18d2:	88 32       	cpi	r24, 0x28	; 40
    18d4:	11 f0       	breq	.+4      	; 0x18da <EEPROM_writeByte+0x58>
        return ERROR;
    18d6:	1c 82       	std	Y+4, r1	; 0x04
    18d8:	0d c0       	rjmp	.+26     	; 0x18f4 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	0e 94 ac 08 	call	0x1158	; 0x1158 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    18e0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <TWI_getStatus>
    18e4:	88 32       	cpi	r24, 0x28	; 40
    18e6:	11 f0       	breq	.+4      	; 0x18ec <EEPROM_writeByte+0x6a>
        return ERROR;
    18e8:	1c 82       	std	Y+4, r1	; 0x04
    18ea:	04 c0       	rjmp	.+8      	; 0x18f4 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    18ec:	0e 94 a1 08 	call	0x1142	; 0x1142 <TWI_stop>
	
    return SUCCESS;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	8c 83       	std	Y+4, r24	; 0x04
    18f4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	00 d0       	rcall	.+0      	; 0x190a <EEPROM_readByte+0x6>
    190a:	00 d0       	rcall	.+0      	; 0x190c <EEPROM_readByte+0x8>
    190c:	0f 92       	push	r0
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	9a 83       	std	Y+2, r25	; 0x02
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	7c 83       	std	Y+4, r23	; 0x04
    1918:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    191a:	0e 94 91 08 	call	0x1122	; 0x1122 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    191e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <TWI_getStatus>
    1922:	88 30       	cpi	r24, 0x08	; 8
    1924:	11 f0       	breq	.+4      	; 0x192a <EEPROM_readByte+0x26>
        return ERROR;
    1926:	1d 82       	std	Y+5, r1	; 0x05
    1928:	44 c0       	rjmp	.+136    	; 0x19b2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	9a 81       	ldd	r25, Y+2	; 0x02
    192e:	80 70       	andi	r24, 0x00	; 0
    1930:	97 70       	andi	r25, 0x07	; 7
    1932:	88 0f       	add	r24, r24
    1934:	89 2f       	mov	r24, r25
    1936:	88 1f       	adc	r24, r24
    1938:	99 0b       	sbc	r25, r25
    193a:	91 95       	neg	r25
    193c:	80 6a       	ori	r24, 0xA0	; 160
    193e:	0e 94 ac 08 	call	0x1158	; 0x1158 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1942:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <TWI_getStatus>
    1946:	88 31       	cpi	r24, 0x18	; 24
    1948:	11 f0       	breq	.+4      	; 0x194e <EEPROM_readByte+0x4a>
        return ERROR;
    194a:	1d 82       	std	Y+5, r1	; 0x05
    194c:	32 c0       	rjmp	.+100    	; 0x19b2 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	0e 94 ac 08 	call	0x1158	; 0x1158 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1954:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <TWI_getStatus>
    1958:	88 32       	cpi	r24, 0x28	; 40
    195a:	11 f0       	breq	.+4      	; 0x1960 <EEPROM_readByte+0x5c>
        return ERROR;
    195c:	1d 82       	std	Y+5, r1	; 0x05
    195e:	29 c0       	rjmp	.+82     	; 0x19b2 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1960:	0e 94 91 08 	call	0x1122	; 0x1122 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1964:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <TWI_getStatus>
    1968:	80 31       	cpi	r24, 0x10	; 16
    196a:	11 f0       	breq	.+4      	; 0x1970 <EEPROM_readByte+0x6c>
        return ERROR;
    196c:	1d 82       	std	Y+5, r1	; 0x05
    196e:	21 c0       	rjmp	.+66     	; 0x19b2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	9a 81       	ldd	r25, Y+2	; 0x02
    1974:	80 70       	andi	r24, 0x00	; 0
    1976:	97 70       	andi	r25, 0x07	; 7
    1978:	88 0f       	add	r24, r24
    197a:	89 2f       	mov	r24, r25
    197c:	88 1f       	adc	r24, r24
    197e:	99 0b       	sbc	r25, r25
    1980:	91 95       	neg	r25
    1982:	81 6a       	ori	r24, 0xA1	; 161
    1984:	0e 94 ac 08 	call	0x1158	; 0x1158 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1988:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <TWI_getStatus>
    198c:	80 34       	cpi	r24, 0x40	; 64
    198e:	11 f0       	breq	.+4      	; 0x1994 <EEPROM_readByte+0x90>
        return ERROR;
    1990:	1d 82       	std	Y+5, r1	; 0x05
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1994:	0e 94 d6 08 	call	0x11ac	; 0x11ac <TWI_readByteWithNACK>
    1998:	eb 81       	ldd	r30, Y+3	; 0x03
    199a:	fc 81       	ldd	r31, Y+4	; 0x04
    199c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    199e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <TWI_getStatus>
    19a2:	88 35       	cpi	r24, 0x58	; 88
    19a4:	11 f0       	breq	.+4      	; 0x19aa <EEPROM_readByte+0xa6>
        return ERROR;
    19a6:	1d 82       	std	Y+5, r1	; 0x05
    19a8:	04 c0       	rjmp	.+8      	; 0x19b2 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    19aa:	0e 94 a1 08 	call	0x1142	; 0x1142 <TWI_stop>

    return SUCCESS;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	8d 83       	std	Y+5, r24	; 0x05
    19b2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <DcMotor_Init>:
 * Description
 * The Function responsible for setup the direction for the two motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_OPUT_PORT_ID, DC_MOTOR_OPUT_A_PIN_ID, PIN_OUTPUT);
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	65 e0       	ldi	r22, 0x05	; 5
    19d0:	41 e0       	ldi	r20, 0x01	; 1
    19d2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_OPUT_PORT_ID, DC_MOTOR_OPUT_B_PIN_ID, PIN_OUTPUT);
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	66 e0       	ldi	r22, 0x06	; 6
    19da:	41 e0       	ldi	r20, 0x01	; 1
    19dc:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <GPIO_setupPinDirection>

	/* Motor is stop at the beginning */
	GPIO_writePin(DC_MOTOR_OPUT_PORT_ID, DC_MOTOR_OPUT_A_PIN_ID, LOGIC_LOW);
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	65 e0       	ldi	r22, 0x05	; 5
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_OPUT_PORT_ID, DC_MOTOR_OPUT_B_PIN_ID, LOGIC_LOW);
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	66 e0       	ldi	r22, 0x06	; 6
    19ee:	40 e0       	ldi	r20, 0x00	; 0
    19f0:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <GPIO_writePin>
}
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <DcMotor_Rotate>:
 * or A-CW or stop the motor based on the state input state value.
 * Send the required duty cycle to the PWM driver based on
 * the required speed value
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <DcMotor_Rotate+0x6>
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <DcMotor_Rotate+0x8>
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	6a 83       	std	Y+2, r22	; 0x02
	/* check the speed in range of 0 :100
	 * and convert it to duty cycle and send it to PWM driver
	 * */
	if((speed >= 0) && (speed <= 100))
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	85 36       	cpi	r24, 0x65	; 101
    1a0e:	f8 f4       	brcc	.+62     	; 0x1a4e <DcMotor_Rotate+0x54>
	{
		PWM_Timer0_Start((uint8)(speed*2.55));
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	88 2f       	mov	r24, r24
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	aa 27       	eor	r26, r26
    1a18:	97 fd       	sbrc	r25, 7
    1a1a:	a0 95       	com	r26
    1a1c:	ba 2f       	mov	r27, r26
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	bc 01       	movw	r22, r24
    1a2c:	cd 01       	movw	r24, r26
    1a2e:	23 e3       	ldi	r18, 0x33	; 51
    1a30:	33 e3       	ldi	r19, 0x33	; 51
    1a32:	43 e2       	ldi	r20, 0x23	; 35
    1a34:	50 e4       	ldi	r21, 0x40	; 64
    1a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	bc 01       	movw	r22, r24
    1a40:	cd 01       	movw	r24, r26
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <PWM_Timer0_Start>
	}
	/* check the motor direction and set the pins as required in data sheet */
	switch (state)
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	3c 83       	std	Y+4, r19	; 0x04
    1a56:	2b 83       	std	Y+3, r18	; 0x03
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5c:	81 30       	cpi	r24, 0x01	; 1
    1a5e:	91 05       	cpc	r25, r1
    1a60:	a1 f0       	breq	.+40     	; 0x1a8a <DcMotor_Rotate+0x90>
    1a62:	2b 81       	ldd	r18, Y+3	; 0x03
    1a64:	3c 81       	ldd	r19, Y+4	; 0x04
    1a66:	22 30       	cpi	r18, 0x02	; 2
    1a68:	31 05       	cpc	r19, r1
    1a6a:	d1 f0       	breq	.+52     	; 0x1aa0 <DcMotor_Rotate+0xa6>
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	01 f5       	brne	.+64     	; 0x1ab4 <DcMotor_Rotate+0xba>
	{
	case STOP :
		GPIO_writePin(DC_MOTOR_OPUT_PORT_ID, DC_MOTOR_OPUT_A_PIN_ID, LOGIC_LOW);
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	65 e0       	ldi	r22, 0x05	; 5
    1a78:	40 e0       	ldi	r20, 0x00	; 0
    1a7a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_OPUT_PORT_ID, DC_MOTOR_OPUT_B_PIN_ID, LOGIC_LOW);
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	66 e0       	ldi	r22, 0x06	; 6
    1a82:	40 e0       	ldi	r20, 0x00	; 0
    1a84:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <GPIO_writePin>
    1a88:	15 c0       	rjmp	.+42     	; 0x1ab4 <DcMotor_Rotate+0xba>
		break;
	case CW :

		GPIO_writePin(DC_MOTOR_OPUT_PORT_ID, DC_MOTOR_OPUT_A_PIN_ID, LOGIC_HIGH);
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	65 e0       	ldi	r22, 0x05	; 5
    1a8e:	41 e0       	ldi	r20, 0x01	; 1
    1a90:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_OPUT_PORT_ID, DC_MOTOR_OPUT_B_PIN_ID, LOGIC_LOW);
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	66 e0       	ldi	r22, 0x06	; 6
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <GPIO_writePin>
    1a9e:	0a c0       	rjmp	.+20     	; 0x1ab4 <DcMotor_Rotate+0xba>
		break ;
	case A_CW :

		GPIO_writePin(DC_MOTOR_OPUT_PORT_ID, DC_MOTOR_OPUT_A_PIN_ID, LOGIC_LOW);
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	65 e0       	ldi	r22, 0x05	; 5
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_OPUT_PORT_ID, DC_MOTOR_OPUT_B_PIN_ID, LOGIC_HIGH);
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	66 e0       	ldi	r22, 0x06	; 6
    1aae:	41 e0       	ldi	r20, 0x01	; 1
    1ab0:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <GPIO_writePin>
		break ;
	}

}
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <PWM_Timer0_Start>:

void PWM_Timer0_Start(uint8 duty_cycle)

{
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	0f 92       	push	r0
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; //Set Timer Initial value
    1ace:	e2 e5       	ldi	r30, 0x52	; 82
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	10 82       	st	Z, r1

	OCR0  = duty_cycle; // Set Compare Value
    1ad4:	ec e5       	ldi	r30, 0x5C	; 92
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	80 83       	st	Z, r24

	//set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	63 e0       	ldi	r22, 0x03	; 3
    1ae0:	41 e0       	ldi	r20, 0x01	; 1
    1ae2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1ae6:	e3 e5       	ldi	r30, 0x53	; 83
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	8a e6       	ldi	r24, 0x6A	; 106
    1aec:	80 83       	st	Z, r24
}
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <Buzzer_init>:
 * Description :
 * Function to enable the Buzzer through the GPIO.
 */

void Buzzer_init(void)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID,PIN_OUTPUT);
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	62 e0       	ldi	r22, 0x02	; 2
    1b02:	41 e0       	ldi	r20, 0x01	; 1
    1b04:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	62 e0       	ldi	r22, 0x02	; 2
    1b0c:	40 e0       	ldi	r20, 0x00	; 0
    1b0e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <GPIO_writePin>

}
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <Buzzer_on>:
 * Description :
 * Function to enable the Buzzer through the GPIO.
 */

void Buzzer_on(void)
{
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	62 e0       	ldi	r22, 0x02	; 2
    1b24:	41 e0       	ldi	r20, 0x01	; 1
    1b26:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <GPIO_writePin>
}
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <Buzzer_off>:
 * Description :
 * Function to disable the Buzzer through the GPIO.
 */

void Buzzer_off(void)
{
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	62 e0       	ldi	r22, 0x02	; 2
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <GPIO_writePin>
}
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <main>:

UART_ConfigType uart_config={BIT_8,DISABLED,ONE_BIT,9600};
Timer1_ConfigType timer1_config= {OVERFLOW,0,0,F_CPU_8};

int main()
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	60 97       	sbiw	r28, 0x10	; 16
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
	UART_init(&uart_config);
    1b5c:	8a e6       	ldi	r24, 0x6A	; 106
    1b5e:	91 e0       	ldi	r25, 0x01	; 1
    1b60:	0e 94 50 06 	call	0xca0	; 0xca0 <UART_init>
	SREG |= (1<<7);
    1b64:	af e5       	ldi	r26, 0x5F	; 95
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	ef e5       	ldi	r30, 0x5F	; 95
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	80 68       	ori	r24, 0x80	; 128
    1b70:	8c 93       	st	X, r24
	while(1){
		switch(recieveCommand())
    1b72:	0e 94 16 10 	call	0x202c	; 0x202c <recieveCommand>
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	38 8b       	std	Y+16, r19	; 0x10
    1b7c:	2f 87       	std	Y+15, r18	; 0x0f
    1b7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b80:	98 89       	ldd	r25, Y+16	; 0x10
    1b82:	88 30       	cpi	r24, 0x08	; 8
    1b84:	91 05       	cpc	r25, r1
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <main+0x42>
    1b88:	57 c0       	rjmp	.+174    	; 0x1c38 <main+0xf0>
    1b8a:	2f 85       	ldd	r18, Y+15	; 0x0f
    1b8c:	38 89       	ldd	r19, Y+16	; 0x10
    1b8e:	29 30       	cpi	r18, 0x09	; 9
    1b90:	31 05       	cpc	r19, r1
    1b92:	5c f4       	brge	.+22     	; 0x1baa <main+0x62>
    1b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b96:	98 89       	ldd	r25, Y+16	; 0x10
    1b98:	83 30       	cpi	r24, 0x03	; 3
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	91 f0       	breq	.+36     	; 0x1bc2 <main+0x7a>
    1b9e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1ba0:	38 89       	ldd	r19, Y+16	; 0x10
    1ba2:	26 30       	cpi	r18, 0x06	; 6
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	91 f0       	breq	.+36     	; 0x1bcc <main+0x84>
    1ba8:	e4 cf       	rjmp	.-56     	; 0x1b72 <main+0x2a>
    1baa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bac:	98 89       	ldd	r25, Y+16	; 0x10
    1bae:	89 30       	cpi	r24, 0x09	; 9
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	39 f1       	breq	.+78     	; 0x1c02 <main+0xba>
    1bb4:	2f 85       	ldd	r18, Y+15	; 0x0f
    1bb6:	38 89       	ldd	r19, Y+16	; 0x10
    1bb8:	2a 30       	cpi	r18, 0x0A	; 10
    1bba:	31 05       	cpc	r19, r1
    1bbc:	09 f4       	brne	.+2      	; 0x1bc0 <main+0x78>
    1bbe:	84 c0       	rjmp	.+264    	; 0x1cc8 <main+0x180>
    1bc0:	d8 cf       	rjmp	.-80     	; 0x1b72 <main+0x2a>
		{
		case I_WILL_SEND_A_PASSWORD:
			recievePassword(g_password);
    1bc2:	8e e7       	ldi	r24, 0x7E	; 126
    1bc4:	91 e0       	ldi	r25, 0x01	; 1
    1bc6:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <recievePassword>
    1bca:	d3 cf       	rjmp	.-90     	; 0x1b72 <main+0x2a>
			break;
		case COMPARE_TWO_PASSWORDS:
			recievePassword(g_pass2);
    1bcc:	88 e8       	ldi	r24, 0x88	; 136
    1bce:	91 e0       	ldi	r25, 0x01	; 1
    1bd0:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <recievePassword>
			if(checkMatching(g_password,g_pass2)){
    1bd4:	8e e7       	ldi	r24, 0x7E	; 126
    1bd6:	91 e0       	ldi	r25, 0x01	; 1
    1bd8:	28 e8       	ldi	r18, 0x88	; 136
    1bda:	31 e0       	ldi	r19, 0x01	; 1
    1bdc:	b9 01       	movw	r22, r18
    1bde:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <checkMatching>
    1be2:	88 23       	and	r24, r24
    1be4:	51 f0       	breq	.+20     	; 0x1bfa <main+0xb2>
				storePassword();
    1be6:	0e 94 75 0f 	call	0x1eea	; 0x1eea <storePassword>
				getSavedPassword(savedpass);
    1bea:	83 e8       	ldi	r24, 0x83	; 131
    1bec:	91 e0       	ldi	r25, 0x01	; 1
    1bee:	0e 94 45 10 	call	0x208a	; 0x208a <getSavedPassword>
				sendCommand(PASSWORDS_MATCH);
    1bf2:	84 e0       	ldi	r24, 0x04	; 4
    1bf4:	0e 94 2d 10 	call	0x205a	; 0x205a <sendCommand>
    1bf8:	bc cf       	rjmp	.-136    	; 0x1b72 <main+0x2a>
			}
			else
			{
				sendCommand(PASSWORDS_DONOT_MATCH);
    1bfa:	85 e0       	ldi	r24, 0x05	; 5
    1bfc:	0e 94 2d 10 	call	0x205a	; 0x205a <sendCommand>
    1c00:	b8 cf       	rjmp	.-144    	; 0x1b72 <main+0x2a>
			}
			break;
		case IS_PASSWORD_RIGHT:
			recievePassword(g_password);
    1c02:	8e e7       	ldi	r24, 0x7E	; 126
    1c04:	91 e0       	ldi	r25, 0x01	; 1
    1c06:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <recievePassword>
			getSavedPassword(savedpass);
    1c0a:	83 e8       	ldi	r24, 0x83	; 131
    1c0c:	91 e0       	ldi	r25, 0x01	; 1
    1c0e:	0e 94 45 10 	call	0x208a	; 0x208a <getSavedPassword>
			if(checkMatching(g_password,savedpass))
    1c12:	8e e7       	ldi	r24, 0x7E	; 126
    1c14:	91 e0       	ldi	r25, 0x01	; 1
    1c16:	23 e8       	ldi	r18, 0x83	; 131
    1c18:	31 e0       	ldi	r19, 0x01	; 1
    1c1a:	b9 01       	movw	r22, r18
    1c1c:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <checkMatching>
    1c20:	88 23       	and	r24, r24
    1c22:	31 f0       	breq	.+12     	; 0x1c30 <main+0xe8>
			{
				sendCommand(PASSWORDS_MATCH);
    1c24:	84 e0       	ldi	r24, 0x04	; 4
    1c26:	0e 94 2d 10 	call	0x205a	; 0x205a <sendCommand>
				g_wrong=0;
    1c2a:	10 92 7c 01 	sts	0x017C, r1
    1c2e:	a1 cf       	rjmp	.-190    	; 0x1b72 <main+0x2a>
			}
			else
			{
				sendCommand(PASSWORDS_DONOT_MATCH);
    1c30:	85 e0       	ldi	r24, 0x05	; 5
    1c32:	0e 94 2d 10 	call	0x205a	; 0x205a <sendCommand>
    1c36:	9d cf       	rjmp	.-198    	; 0x1b72 <main+0x2a>
			}
			break;
		case OPEN_DOOR:
			DcMotor_Init();
    1c38:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <DcMotor_Init>
			Timer1_init(&timer1_config);
    1c3c:	81 e7       	ldi	r24, 0x71	; 113
    1c3e:	91 e0       	ldi	r25, 0x01	; 1
    1c40:	0e 94 c3 07 	call	0xf86	; 0xf86 <Timer1_init>
			Timer1_setCallBack(g_tickCounterMotor);
    1c44:	88 ee       	ldi	r24, 0xE8	; 232
    1c46:	90 e1       	ldi	r25, 0x10	; 16
    1c48:	0e 94 2b 08 	call	0x1056	; 0x1056 <Timer1_setCallBack>
    1c4c:	04 c0       	rjmp	.+8      	; 0x1c56 <main+0x10e>
			while(g_tick < TICKS_15SECS)
			{
				DcMotor_Rotate(CW, 100);
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	64 e6       	ldi	r22, 0x64	; 100
    1c52:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <DcMotor_Rotate>
			break;
		case OPEN_DOOR:
			DcMotor_Init();
			Timer1_init(&timer1_config);
			Timer1_setCallBack(g_tickCounterMotor);
			while(g_tick < TICKS_15SECS)
    1c56:	80 91 7a 01 	lds	r24, 0x017A
    1c5a:	90 91 7b 01 	lds	r25, 0x017B
    1c5e:	85 3e       	cpi	r24, 0xE5	; 229
    1c60:	91 05       	cpc	r25, r1
    1c62:	a8 f3       	brcs	.-22     	; 0x1c4e <main+0x106>
			{
				DcMotor_Rotate(CW, 100);
			}
			DcMotor_Rotate(STOP, 0);
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <DcMotor_Rotate>
			while(g_tick>=TICKS_15SECS && g_tick<TIMER_TICKS_15SEC_STOP)
    1c6c:	80 91 7a 01 	lds	r24, 0x017A
    1c70:	90 91 7b 01 	lds	r25, 0x017B
    1c74:	85 3e       	cpi	r24, 0xE5	; 229
    1c76:	91 05       	cpc	r25, r1
    1c78:	40 f0       	brcs	.+16     	; 0x1c8a <main+0x142>
    1c7a:	80 91 7a 01 	lds	r24, 0x017A
    1c7e:	90 91 7b 01 	lds	r25, 0x017B
    1c82:	31 e0       	ldi	r19, 0x01	; 1
    1c84:	82 31       	cpi	r24, 0x12	; 18
    1c86:	93 07       	cpc	r25, r19
    1c88:	88 f3       	brcs	.-30     	; 0x1c6c <main+0x124>
			{
			}
			g_tick=0;
    1c8a:	10 92 7b 01 	sts	0x017B, r1
    1c8e:	10 92 7a 01 	sts	0x017A, r1
			Timer1_deinit();
    1c92:	0e 94 4b 08 	call	0x1096	; 0x1096 <Timer1_deinit>
			Timer1_init(&timer1_config);
    1c96:	81 e7       	ldi	r24, 0x71	; 113
    1c98:	91 e0       	ldi	r25, 0x01	; 1
    1c9a:	0e 94 c3 07 	call	0xf86	; 0xf86 <Timer1_init>
    1c9e:	04 c0       	rjmp	.+8      	; 0x1ca8 <main+0x160>
			while(g_tick<TICKS_15SECS)
			{
				DcMotor_Rotate(A_CW, 100);
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	64 e6       	ldi	r22, 0x64	; 100
    1ca4:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <DcMotor_Rotate>
			{
			}
			g_tick=0;
			Timer1_deinit();
			Timer1_init(&timer1_config);
			while(g_tick<TICKS_15SECS)
    1ca8:	80 91 7a 01 	lds	r24, 0x017A
    1cac:	90 91 7b 01 	lds	r25, 0x017B
    1cb0:	85 3e       	cpi	r24, 0xE5	; 229
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	a8 f3       	brcs	.-22     	; 0x1ca0 <main+0x158>
			{
				DcMotor_Rotate(A_CW, 100);
			}
			DcMotor_Rotate(STOP, 0);
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	60 e0       	ldi	r22, 0x00	; 0
    1cba:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <DcMotor_Rotate>
			g_tick=0;
    1cbe:	10 92 7b 01 	sts	0x017B, r1
    1cc2:	10 92 7a 01 	sts	0x017A, r1
    1cc6:	55 cf       	rjmp	.-342    	; 0x1b72 <main+0x2a>
			break;
		case WRONG_PASSWORD:
			g_wrong++;
    1cc8:	80 91 7c 01 	lds	r24, 0x017C
    1ccc:	8f 5f       	subi	r24, 0xFF	; 255
    1cce:	80 93 7c 01 	sts	0x017C, r24
			if(g_wrong==MAX_WRONG_COUNTER)
    1cd2:	80 91 7c 01 	lds	r24, 0x017C
    1cd6:	83 30       	cpi	r24, 0x03	; 3
    1cd8:	09 f0       	breq	.+2      	; 0x1cdc <main+0x194>
    1cda:	4b cf       	rjmp	.-362    	; 0x1b72 <main+0x2a>
			{
				Buzzer_init();
    1cdc:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Buzzer_init>
				Timer1_init(&timer1_config);
    1ce0:	81 e7       	ldi	r24, 0x71	; 113
    1ce2:	91 e0       	ldi	r25, 0x01	; 1
    1ce4:	0e 94 c3 07 	call	0xf86	; 0xf86 <Timer1_init>
				Timer1_setCallBack(g_tickCounterBuzzer);
    1ce8:	82 e0       	ldi	r24, 0x02	; 2
    1cea:	91 e1       	ldi	r25, 0x11	; 17
    1cec:	0e 94 2b 08 	call	0x1056	; 0x1056 <Timer1_setCallBack>
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <main+0x1ae>
				while(g_tick<TIMER_TICKS_1MINUTE)
				{
					Buzzer_on();
    1cf2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <Buzzer_on>
			if(g_wrong==MAX_WRONG_COUNTER)
			{
				Buzzer_init();
				Timer1_init(&timer1_config);
				Timer1_setCallBack(g_tickCounterBuzzer);
				while(g_tick<TIMER_TICKS_1MINUTE)
    1cf6:	80 91 7a 01 	lds	r24, 0x017A
    1cfa:	90 91 7b 01 	lds	r25, 0x017B
    1cfe:	23 e0       	ldi	r18, 0x03	; 3
    1d00:	83 39       	cpi	r24, 0x93	; 147
    1d02:	92 07       	cpc	r25, r18
    1d04:	b0 f3       	brcs	.-20     	; 0x1cf2 <main+0x1aa>
				{
					Buzzer_on();
				}
				Buzzer_off();
    1d06:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <Buzzer_off>
				g_tick=0;
    1d0a:	10 92 7b 01 	sts	0x017B, r1
    1d0e:	10 92 7a 01 	sts	0x017A, r1
				g_wrong=0;
    1d12:	10 92 7c 01 	sts	0x017C, r1
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	aa ef       	ldi	r26, 0xFA	; 250
    1d1c:	b4 e4       	ldi	r27, 0x44	; 68
    1d1e:	8b 87       	std	Y+11, r24	; 0x0b
    1d20:	9c 87       	std	Y+12, r25	; 0x0c
    1d22:	ad 87       	std	Y+13, r26	; 0x0d
    1d24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	4a ef       	ldi	r20, 0xFA	; 250
    1d34:	54 e4       	ldi	r21, 0x44	; 68
    1d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	8f 83       	std	Y+7, r24	; 0x07
    1d40:	98 87       	std	Y+8, r25	; 0x08
    1d42:	a9 87       	std	Y+9, r26	; 0x09
    1d44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d46:	6f 81       	ldd	r22, Y+7	; 0x07
    1d48:	78 85       	ldd	r23, Y+8	; 0x08
    1d4a:	89 85       	ldd	r24, Y+9	; 0x09
    1d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e8       	ldi	r20, 0x80	; 128
    1d54:	5f e3       	ldi	r21, 0x3F	; 63
    1d56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d5a:	88 23       	and	r24, r24
    1d5c:	2c f4       	brge	.+10     	; 0x1d68 <main+0x220>
		__ticks = 1;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	3f c0       	rjmp	.+126    	; 0x1de6 <main+0x29e>
	else if (__tmp > 65535)
    1d68:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6a:	78 85       	ldd	r23, Y+8	; 0x08
    1d6c:	89 85       	ldd	r24, Y+9	; 0x09
    1d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	3f ef       	ldi	r19, 0xFF	; 255
    1d74:	4f e7       	ldi	r20, 0x7F	; 127
    1d76:	57 e4       	ldi	r21, 0x47	; 71
    1d78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d7c:	18 16       	cp	r1, r24
    1d7e:	4c f5       	brge	.+82     	; 0x1dd2 <main+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e2       	ldi	r20, 0x20	; 32
    1d8e:	51 e4       	ldi	r21, 0x41	; 65
    1d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	bc 01       	movw	r22, r24
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9e 83       	std	Y+6, r25	; 0x06
    1da6:	8d 83       	std	Y+5, r24	; 0x05
    1da8:	0f c0       	rjmp	.+30     	; 0x1dc8 <main+0x280>
    1daa:	88 ec       	ldi	r24, 0xC8	; 200
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9c 83       	std	Y+4, r25	; 0x04
    1db0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	9c 81       	ldd	r25, Y+4	; 0x04
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <main+0x26e>
    1dba:	9c 83       	std	Y+4, r25	; 0x04
    1dbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	9e 83       	std	Y+6, r25	; 0x06
    1dc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dca:	9e 81       	ldd	r25, Y+6	; 0x06
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	69 f7       	brne	.-38     	; 0x1daa <main+0x262>
    1dd0:	d0 ce       	rjmp	.-608    	; 0x1b72 <main+0x2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd4:	78 85       	ldd	r23, Y+8	; 0x08
    1dd6:	89 85       	ldd	r24, Y+9	; 0x09
    1dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9e 83       	std	Y+6, r25	; 0x06
    1de4:	8d 83       	std	Y+5, r24	; 0x05
    1de6:	8d 81       	ldd	r24, Y+5	; 0x05
    1de8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dea:	9a 83       	std	Y+2, r25	; 0x02
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	9a 81       	ldd	r25, Y+2	; 0x02
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <main+0x2aa>
    1df6:	9a 83       	std	Y+2, r25	; 0x02
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	bb ce       	rjmp	.-650    	; 0x1b72 <main+0x2a>

00001dfc <recievePassword>:
			break;
		}
	}
}
void recievePassword(uint8 a_arr[])
{
    1dfc:	0f 93       	push	r16
    1dfe:	1f 93       	push	r17
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <recievePassword+0xa>
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <recievePassword+0xc>
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	9c 83       	std	Y+4, r25	; 0x04
    1e0e:	8b 83       	std	Y+3, r24	; 0x03
	while(UART_recieveByte() != READY){};
    1e10:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <UART_recieveByte>
    1e14:	81 30       	cpi	r24, 0x01	; 1
    1e16:	e1 f7       	brne	.-8      	; 0x1e10 <recievePassword+0x14>
	UART_sendByte(READY);
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	0e 94 cb 06 	call	0xd96	; 0xd96 <UART_sendByte>
	for(int i=0 ; i<PASSWORD_SIZE ; i++){
    1e1e:	1a 82       	std	Y+2, r1	; 0x02
    1e20:	19 82       	std	Y+1, r1	; 0x01
    1e22:	10 c0       	rjmp	.+32     	; 0x1e44 <recievePassword+0x48>
		a_arr[i]=UART_recieveByte();
    1e24:	29 81       	ldd	r18, Y+1	; 0x01
    1e26:	3a 81       	ldd	r19, Y+2	; 0x02
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	8c 01       	movw	r16, r24
    1e2e:	02 0f       	add	r16, r18
    1e30:	13 1f       	adc	r17, r19
    1e32:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <UART_recieveByte>
    1e36:	f8 01       	movw	r30, r16
    1e38:	80 83       	st	Z, r24
}
void recievePassword(uint8 a_arr[])
{
	while(UART_recieveByte() != READY){};
	UART_sendByte(READY);
	for(int i=0 ; i<PASSWORD_SIZE ; i++){
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3e:	01 96       	adiw	r24, 0x01	; 1
    1e40:	9a 83       	std	Y+2, r25	; 0x02
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	85 30       	cpi	r24, 0x05	; 5
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	5c f3       	brlt	.-42     	; 0x1e24 <recievePassword+0x28>
		a_arr[i]=UART_recieveByte();
	}
	UART_sendByte(DONE);
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
    1e50:	0e 94 cb 06 	call	0xd96	; 0xd96 <UART_sendByte>
}
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	1f 91       	pop	r17
    1e62:	0f 91       	pop	r16
    1e64:	08 95       	ret

00001e66 <checkMatching>:
uint8 checkMatching(uint8 a_arr1[],uint8 a_arr2[])
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	27 97       	sbiw	r28, 0x07	; 7
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	9c 83       	std	Y+4, r25	; 0x04
    1e7c:	8b 83       	std	Y+3, r24	; 0x03
    1e7e:	7e 83       	std	Y+6, r23	; 0x06
    1e80:	6d 83       	std	Y+5, r22	; 0x05
	uint8 count=0;
    1e82:	1a 82       	std	Y+2, r1	; 0x02
	for(uint8 i=0 ; i<PASSWORD_SIZE ; i++)
    1e84:	19 82       	std	Y+1, r1	; 0x01
    1e86:	1d c0       	rjmp	.+58     	; 0x1ec2 <checkMatching+0x5c>
	{
		if(a_arr1[i]==a_arr2[i])
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	9c 81       	ldd	r25, Y+4	; 0x04
    1e92:	fc 01       	movw	r30, r24
    1e94:	e2 0f       	add	r30, r18
    1e96:	f3 1f       	adc	r31, r19
    1e98:	40 81       	ld	r20, Z
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	e2 0f       	add	r30, r18
    1ea8:	f3 1f       	adc	r31, r19
    1eaa:	80 81       	ld	r24, Z
    1eac:	48 17       	cp	r20, r24
    1eae:	39 f4       	brne	.+14     	; 0x1ebe <checkMatching+0x58>
		{
			count++;
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	8f 5f       	subi	r24, 0xFF	; 255
    1eb4:	8a 83       	std	Y+2, r24	; 0x02
	UART_sendByte(DONE);
}
uint8 checkMatching(uint8 a_arr1[],uint8 a_arr2[])
{
	uint8 count=0;
	for(uint8 i=0 ; i<PASSWORD_SIZE ; i++)
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	8f 5f       	subi	r24, 0xFF	; 255
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <checkMatching+0x5c>
		if(a_arr1[i]==a_arr2[i])
		{
			count++;
		}
		else
			return 0;
    1ebe:	1f 82       	std	Y+7, r1	; 0x07
    1ec0:	0a c0       	rjmp	.+20     	; 0x1ed6 <checkMatching+0x70>
	UART_sendByte(DONE);
}
uint8 checkMatching(uint8 a_arr1[],uint8 a_arr2[])
{
	uint8 count=0;
	for(uint8 i=0 ; i<PASSWORD_SIZE ; i++)
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	85 30       	cpi	r24, 0x05	; 5
    1ec6:	00 f3       	brcs	.-64     	; 0x1e88 <checkMatching+0x22>
			count++;
		}
		else
			return 0;
	}
	if(count==PASSWORD_SIZE){
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	85 30       	cpi	r24, 0x05	; 5
    1ecc:	19 f4       	brne	.+6      	; 0x1ed4 <checkMatching+0x6e>
		return 1;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	8f 83       	std	Y+7, r24	; 0x07
    1ed2:	01 c0       	rjmp	.+2      	; 0x1ed6 <checkMatching+0x70>
	}
	return 0;
    1ed4:	1f 82       	std	Y+7, r1	; 0x07
    1ed6:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1ed8:	27 96       	adiw	r28, 0x07	; 7
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret

00001eea <storePassword>:
void storePassword(void)
{
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	2f 97       	sbiw	r28, 0x0f	; 15
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
	EEPROM_init();
    1efe:	0e 94 36 0c 	call	0x186c	; 0x186c <EEPROM_init>
	for(uint8 i=0;i<PASSWORD_SIZE;i++){
    1f02:	1f 86       	std	Y+15, r1	; 0x0f
    1f04:	86 c0       	rjmp	.+268    	; 0x2012 <storePassword+0x128>
		EEPROM_writeByte(0x0311+i,g_password[i]);
    1f06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f08:	88 2f       	mov	r24, r24
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	8f 5e       	subi	r24, 0xEF	; 239
    1f0e:	9c 4f       	sbci	r25, 0xFC	; 252
    1f10:	ac 01       	movw	r20, r24
    1f12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f14:	88 2f       	mov	r24, r24
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	fc 01       	movw	r30, r24
    1f1a:	e2 58       	subi	r30, 0x82	; 130
    1f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f1e:	20 81       	ld	r18, Z
    1f20:	ca 01       	movw	r24, r20
    1f22:	62 2f       	mov	r22, r18
    1f24:	0e 94 41 0c 	call	0x1882	; 0x1882 <EEPROM_writeByte>
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	a0 ea       	ldi	r26, 0xA0	; 160
    1f2e:	b1 e4       	ldi	r27, 0x41	; 65
    1f30:	8b 87       	std	Y+11, r24	; 0x0b
    1f32:	9c 87       	std	Y+12, r25	; 0x0c
    1f34:	ad 87       	std	Y+13, r26	; 0x0d
    1f36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	4a ef       	ldi	r20, 0xFA	; 250
    1f46:	54 e4       	ldi	r21, 0x44	; 68
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	8f 83       	std	Y+7, r24	; 0x07
    1f52:	98 87       	std	Y+8, r25	; 0x08
    1f54:	a9 87       	std	Y+9, r26	; 0x09
    1f56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f58:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5a:	78 85       	ldd	r23, Y+8	; 0x08
    1f5c:	89 85       	ldd	r24, Y+9	; 0x09
    1f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e8       	ldi	r20, 0x80	; 128
    1f66:	5f e3       	ldi	r21, 0x3F	; 63
    1f68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f6c:	88 23       	and	r24, r24
    1f6e:	2c f4       	brge	.+10     	; 0x1f7a <storePassword+0x90>
		__ticks = 1;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	9e 83       	std	Y+6, r25	; 0x06
    1f76:	8d 83       	std	Y+5, r24	; 0x05
    1f78:	3f c0       	rjmp	.+126    	; 0x1ff8 <storePassword+0x10e>
	else if (__tmp > 65535)
    1f7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7c:	78 85       	ldd	r23, Y+8	; 0x08
    1f7e:	89 85       	ldd	r24, Y+9	; 0x09
    1f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	3f ef       	ldi	r19, 0xFF	; 255
    1f86:	4f e7       	ldi	r20, 0x7F	; 127
    1f88:	57 e4       	ldi	r21, 0x47	; 71
    1f8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f8e:	18 16       	cp	r1, r24
    1f90:	4c f5       	brge	.+82     	; 0x1fe4 <storePassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e2       	ldi	r20, 0x20	; 32
    1fa0:	51 e4       	ldi	r21, 0x41	; 65
    1fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9e 83       	std	Y+6, r25	; 0x06
    1fb8:	8d 83       	std	Y+5, r24	; 0x05
    1fba:	0f c0       	rjmp	.+30     	; 0x1fda <storePassword+0xf0>
    1fbc:	88 ec       	ldi	r24, 0xC8	; 200
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	9c 83       	std	Y+4, r25	; 0x04
    1fc2:	8b 83       	std	Y+3, r24	; 0x03
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <storePassword+0xde>
    1fcc:	9c 83       	std	Y+4, r25	; 0x04
    1fce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	9e 83       	std	Y+6, r25	; 0x06
    1fd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fda:	8d 81       	ldd	r24, Y+5	; 0x05
    1fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	69 f7       	brne	.-38     	; 0x1fbc <storePassword+0xd2>
    1fe2:	14 c0       	rjmp	.+40     	; 0x200c <storePassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe6:	78 85       	ldd	r23, Y+8	; 0x08
    1fe8:	89 85       	ldd	r24, Y+9	; 0x09
    1fea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	9e 83       	std	Y+6, r25	; 0x06
    1ff6:	8d 83       	std	Y+5, r24	; 0x05
    1ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffa:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffc:	9a 83       	std	Y+2, r25	; 0x02
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	9a 81       	ldd	r25, Y+2	; 0x02
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <storePassword+0x11a>
    2008:	9a 83       	std	Y+2, r25	; 0x02
    200a:	89 83       	std	Y+1, r24	; 0x01
	return 0;
}
void storePassword(void)
{
	EEPROM_init();
	for(uint8 i=0;i<PASSWORD_SIZE;i++){
    200c:	8f 85       	ldd	r24, Y+15	; 0x0f
    200e:	8f 5f       	subi	r24, 0xFF	; 255
    2010:	8f 87       	std	Y+15, r24	; 0x0f
    2012:	8f 85       	ldd	r24, Y+15	; 0x0f
    2014:	85 30       	cpi	r24, 0x05	; 5
    2016:	08 f4       	brcc	.+2      	; 0x201a <storePassword+0x130>
    2018:	76 cf       	rjmp	.-276    	; 0x1f06 <storePassword+0x1c>
		EEPROM_writeByte(0x0311+i,g_password[i]);
		_delay_ms(20);
	}

}
    201a:	2f 96       	adiw	r28, 0x0f	; 15
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	cd bf       	out	0x3d, r28	; 61
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <recieveCommand>:
uint8 recieveCommand(void)
{
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte() != READY){};
    2034:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <UART_recieveByte>
    2038:	81 30       	cpi	r24, 0x01	; 1
    203a:	e1 f7       	brne	.-8      	; 0x2034 <recieveCommand+0x8>
	UART_sendByte(READY);
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	0e 94 cb 06 	call	0xd96	; 0xd96 <UART_sendByte>
	command=UART_recieveByte();
    2042:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <UART_recieveByte>
    2046:	80 93 7d 01 	sts	0x017D, r24
	UART_sendByte(DONE);
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	0e 94 cb 06 	call	0xd96	; 0xd96 <UART_sendByte>
	return command;
    2050:	80 91 7d 01 	lds	r24, 0x017D
}
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <sendCommand>:
void sendCommand(uint8 command)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	0f 92       	push	r0
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(READY);
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	0e 94 cb 06 	call	0xd96	; 0xd96 <UART_sendByte>
	while(UART_recieveByte() != READY){};
    206c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <UART_recieveByte>
    2070:	81 30       	cpi	r24, 0x01	; 1
    2072:	e1 f7       	brne	.-8      	; 0x206c <sendCommand+0x12>
	UART_sendByte(command);
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	0e 94 cb 06 	call	0xd96	; 0xd96 <UART_sendByte>
	while(UART_recieveByte() != DONE){};
    207a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <UART_recieveByte>
    207e:	82 30       	cpi	r24, 0x02	; 2
    2080:	e1 f7       	brne	.-8      	; 0x207a <sendCommand+0x20>
}
    2082:	0f 90       	pop	r0
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <getSavedPassword>:
void getSavedPassword(uint8 a_arr[])
{
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	61 97       	sbiw	r28, 0x11	; 17
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	f8 94       	cli
    2098:	de bf       	out	0x3e, r29	; 62
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	cd bf       	out	0x3d, r28	; 61
    209e:	99 8b       	std	Y+17, r25	; 0x11
    20a0:	88 8b       	std	Y+16, r24	; 0x10
	EEPROM_init();
    20a2:	0e 94 36 0c 	call	0x186c	; 0x186c <EEPROM_init>
	for(uint8 i=0 ; i<PASSWORD_SIZE ; i++){
    20a6:	1f 86       	std	Y+15, r1	; 0x0f
    20a8:	86 c0       	rjmp	.+268    	; 0x21b6 <getSavedPassword+0x12c>
		EEPROM_readByte(0x0311+i, &a_arr[i]);
    20aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ac:	88 2f       	mov	r24, r24
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	8f 5e       	subi	r24, 0xEF	; 239
    20b2:	9c 4f       	sbci	r25, 0xFC	; 252
    20b4:	ac 01       	movw	r20, r24
    20b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	88 89       	ldd	r24, Y+16	; 0x10
    20be:	99 89       	ldd	r25, Y+17	; 0x11
    20c0:	28 0f       	add	r18, r24
    20c2:	39 1f       	adc	r19, r25
    20c4:	ca 01       	movw	r24, r20
    20c6:	b9 01       	movw	r22, r18
    20c8:	0e 94 82 0c 	call	0x1904	; 0x1904 <EEPROM_readByte>
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	a0 ea       	ldi	r26, 0xA0	; 160
    20d2:	b1 e4       	ldi	r27, 0x41	; 65
    20d4:	8b 87       	std	Y+11, r24	; 0x0b
    20d6:	9c 87       	std	Y+12, r25	; 0x0c
    20d8:	ad 87       	std	Y+13, r26	; 0x0d
    20da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20de:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	4a ef       	ldi	r20, 0xFA	; 250
    20ea:	54 e4       	ldi	r21, 0x44	; 68
    20ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	8f 83       	std	Y+7, r24	; 0x07
    20f6:	98 87       	std	Y+8, r25	; 0x08
    20f8:	a9 87       	std	Y+9, r26	; 0x09
    20fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20fc:	6f 81       	ldd	r22, Y+7	; 0x07
    20fe:	78 85       	ldd	r23, Y+8	; 0x08
    2100:	89 85       	ldd	r24, Y+9	; 0x09
    2102:	9a 85       	ldd	r25, Y+10	; 0x0a
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e8       	ldi	r20, 0x80	; 128
    210a:	5f e3       	ldi	r21, 0x3F	; 63
    210c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2110:	88 23       	and	r24, r24
    2112:	2c f4       	brge	.+10     	; 0x211e <getSavedPassword+0x94>
		__ticks = 1;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9e 83       	std	Y+6, r25	; 0x06
    211a:	8d 83       	std	Y+5, r24	; 0x05
    211c:	3f c0       	rjmp	.+126    	; 0x219c <getSavedPassword+0x112>
	else if (__tmp > 65535)
    211e:	6f 81       	ldd	r22, Y+7	; 0x07
    2120:	78 85       	ldd	r23, Y+8	; 0x08
    2122:	89 85       	ldd	r24, Y+9	; 0x09
    2124:	9a 85       	ldd	r25, Y+10	; 0x0a
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	3f ef       	ldi	r19, 0xFF	; 255
    212a:	4f e7       	ldi	r20, 0x7F	; 127
    212c:	57 e4       	ldi	r21, 0x47	; 71
    212e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2132:	18 16       	cp	r1, r24
    2134:	4c f5       	brge	.+82     	; 0x2188 <getSavedPassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2136:	6b 85       	ldd	r22, Y+11	; 0x0b
    2138:	7c 85       	ldd	r23, Y+12	; 0x0c
    213a:	8d 85       	ldd	r24, Y+13	; 0x0d
    213c:	9e 85       	ldd	r25, Y+14	; 0x0e
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e2       	ldi	r20, 0x20	; 32
    2144:	51 e4       	ldi	r21, 0x41	; 65
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	bc 01       	movw	r22, r24
    2150:	cd 01       	movw	r24, r26
    2152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
    215e:	0f c0       	rjmp	.+30     	; 0x217e <getSavedPassword+0xf4>
    2160:	88 ec       	ldi	r24, 0xC8	; 200
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9c 83       	std	Y+4, r25	; 0x04
    2166:	8b 83       	std	Y+3, r24	; 0x03
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <getSavedPassword+0xe2>
    2170:	9c 83       	std	Y+4, r25	; 0x04
    2172:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2174:	8d 81       	ldd	r24, Y+5	; 0x05
    2176:	9e 81       	ldd	r25, Y+6	; 0x06
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	9e 81       	ldd	r25, Y+6	; 0x06
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	69 f7       	brne	.-38     	; 0x2160 <getSavedPassword+0xd6>
    2186:	14 c0       	rjmp	.+40     	; 0x21b0 <getSavedPassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2188:	6f 81       	ldd	r22, Y+7	; 0x07
    218a:	78 85       	ldd	r23, Y+8	; 0x08
    218c:	89 85       	ldd	r24, Y+9	; 0x09
    218e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	9e 83       	std	Y+6, r25	; 0x06
    219a:	8d 83       	std	Y+5, r24	; 0x05
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
    21a0:	9a 83       	std	Y+2, r25	; 0x02
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <getSavedPassword+0x11e>
    21ac:	9a 83       	std	Y+2, r25	; 0x02
    21ae:	89 83       	std	Y+1, r24	; 0x01
	while(UART_recieveByte() != DONE){};
}
void getSavedPassword(uint8 a_arr[])
{
	EEPROM_init();
	for(uint8 i=0 ; i<PASSWORD_SIZE ; i++){
    21b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b2:	8f 5f       	subi	r24, 0xFF	; 255
    21b4:	8f 87       	std	Y+15, r24	; 0x0f
    21b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b8:	85 30       	cpi	r24, 0x05	; 5
    21ba:	08 f4       	brcc	.+2      	; 0x21be <getSavedPassword+0x134>
    21bc:	76 cf       	rjmp	.-276    	; 0x20aa <getSavedPassword+0x20>
		EEPROM_readByte(0x0311+i, &a_arr[i]);
		_delay_ms(20);
	}
}
    21be:	61 96       	adiw	r28, 0x11	; 17
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <g_tickCounterMotor>:
void g_tickCounterMotor(void)
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    21d8:	80 91 7a 01 	lds	r24, 0x017A
    21dc:	90 91 7b 01 	lds	r25, 0x017B
    21e0:	01 96       	adiw	r24, 0x01	; 1
    21e2:	90 93 7b 01 	sts	0x017B, r25
    21e6:	80 93 7a 01 	sts	0x017A, r24
	if(g_tick==TIMER_TICKS_15SEC_STOP)
    21ea:	80 91 7a 01 	lds	r24, 0x017A
    21ee:	90 91 7b 01 	lds	r25, 0x017B
    21f2:	21 e0       	ldi	r18, 0x01	; 1
    21f4:	82 31       	cpi	r24, 0x12	; 18
    21f6:	92 07       	cpc	r25, r18
    21f8:	11 f4       	brne	.+4      	; 0x21fe <g_tickCounterMotor+0x2e>
	{
		Timer1_deinit();
    21fa:	0e 94 4b 08 	call	0x1096	; 0x1096 <Timer1_deinit>
	}
}
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	08 95       	ret

00002204 <g_tickCounterBuzzer>:
void g_tickCounterBuzzer(void)
{
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    220c:	80 91 7a 01 	lds	r24, 0x017A
    2210:	90 91 7b 01 	lds	r25, 0x017B
    2214:	01 96       	adiw	r24, 0x01	; 1
    2216:	90 93 7b 01 	sts	0x017B, r25
    221a:	80 93 7a 01 	sts	0x017A, r24
	if(g_tick==TIMER_TICKS_1MINUTE)
    221e:	80 91 7a 01 	lds	r24, 0x017A
    2222:	90 91 7b 01 	lds	r25, 0x017B
    2226:	23 e0       	ldi	r18, 0x03	; 3
    2228:	83 39       	cpi	r24, 0x93	; 147
    222a:	92 07       	cpc	r25, r18
    222c:	11 f4       	brne	.+4      	; 0x2232 <g_tickCounterBuzzer+0x2e>
	{
		Timer1_deinit();
    222e:	0e 94 4b 08 	call	0x1096	; 0x1096 <Timer1_deinit>
	}
}
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <__udivmodsi4>:
    2238:	a1 e2       	ldi	r26, 0x21	; 33
    223a:	1a 2e       	mov	r1, r26
    223c:	aa 1b       	sub	r26, r26
    223e:	bb 1b       	sub	r27, r27
    2240:	fd 01       	movw	r30, r26
    2242:	0d c0       	rjmp	.+26     	; 0x225e <__udivmodsi4_ep>

00002244 <__udivmodsi4_loop>:
    2244:	aa 1f       	adc	r26, r26
    2246:	bb 1f       	adc	r27, r27
    2248:	ee 1f       	adc	r30, r30
    224a:	ff 1f       	adc	r31, r31
    224c:	a2 17       	cp	r26, r18
    224e:	b3 07       	cpc	r27, r19
    2250:	e4 07       	cpc	r30, r20
    2252:	f5 07       	cpc	r31, r21
    2254:	20 f0       	brcs	.+8      	; 0x225e <__udivmodsi4_ep>
    2256:	a2 1b       	sub	r26, r18
    2258:	b3 0b       	sbc	r27, r19
    225a:	e4 0b       	sbc	r30, r20
    225c:	f5 0b       	sbc	r31, r21

0000225e <__udivmodsi4_ep>:
    225e:	66 1f       	adc	r22, r22
    2260:	77 1f       	adc	r23, r23
    2262:	88 1f       	adc	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	1a 94       	dec	r1
    2268:	69 f7       	brne	.-38     	; 0x2244 <__udivmodsi4_loop>
    226a:	60 95       	com	r22
    226c:	70 95       	com	r23
    226e:	80 95       	com	r24
    2270:	90 95       	com	r25
    2272:	9b 01       	movw	r18, r22
    2274:	ac 01       	movw	r20, r24
    2276:	bd 01       	movw	r22, r26
    2278:	cf 01       	movw	r24, r30
    227a:	08 95       	ret

0000227c <__prologue_saves__>:
    227c:	2f 92       	push	r2
    227e:	3f 92       	push	r3
    2280:	4f 92       	push	r4
    2282:	5f 92       	push	r5
    2284:	6f 92       	push	r6
    2286:	7f 92       	push	r7
    2288:	8f 92       	push	r8
    228a:	9f 92       	push	r9
    228c:	af 92       	push	r10
    228e:	bf 92       	push	r11
    2290:	cf 92       	push	r12
    2292:	df 92       	push	r13
    2294:	ef 92       	push	r14
    2296:	ff 92       	push	r15
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	ca 1b       	sub	r28, r26
    22a6:	db 0b       	sbc	r29, r27
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	09 94       	ijmp

000022b4 <__epilogue_restores__>:
    22b4:	2a 88       	ldd	r2, Y+18	; 0x12
    22b6:	39 88       	ldd	r3, Y+17	; 0x11
    22b8:	48 88       	ldd	r4, Y+16	; 0x10
    22ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    22bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    22be:	7d 84       	ldd	r7, Y+13	; 0x0d
    22c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    22c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    22c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    22c6:	b9 84       	ldd	r11, Y+9	; 0x09
    22c8:	c8 84       	ldd	r12, Y+8	; 0x08
    22ca:	df 80       	ldd	r13, Y+7	; 0x07
    22cc:	ee 80       	ldd	r14, Y+6	; 0x06
    22ce:	fd 80       	ldd	r15, Y+5	; 0x05
    22d0:	0c 81       	ldd	r16, Y+4	; 0x04
    22d2:	1b 81       	ldd	r17, Y+3	; 0x03
    22d4:	aa 81       	ldd	r26, Y+2	; 0x02
    22d6:	b9 81       	ldd	r27, Y+1	; 0x01
    22d8:	ce 0f       	add	r28, r30
    22da:	d1 1d       	adc	r29, r1
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	f8 94       	cli
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	cd bf       	out	0x3d, r28	; 61
    22e6:	ed 01       	movw	r28, r26
    22e8:	08 95       	ret

000022ea <_exit>:
    22ea:	f8 94       	cli

000022ec <__stop_program>:
    22ec:	ff cf       	rjmp	.-2      	; 0x22ec <__stop_program>
